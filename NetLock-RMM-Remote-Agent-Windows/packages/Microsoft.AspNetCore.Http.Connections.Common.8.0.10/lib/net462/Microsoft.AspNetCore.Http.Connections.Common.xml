<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.Http.Connections.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.Http.Connections.AvailableTransport">
            <summary>
            Part of the <see cref="T:Microsoft.AspNetCore.Http.Connections.NegotiationResponse"/> that represents an individual transport and the trasfer formats the transport supports.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Connections.AvailableTransport.Transport">
            <summary>
            A transport available on the server.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Connections.AvailableTransport.TransferFormats">
            <summary>
            A list of formats supported by the transport. Examples include "Text" and "Binary".
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.Connections.HttpTransports">
            <summary>
            Constants related to HTTP transports.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.Connections.HttpTransports.All">
            <summary>
            A bitmask combining all available <see cref="T:Microsoft.AspNetCore.Http.Connections.HttpTransportType"/> values.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.Connections.HttpTransportType">
            <summary>
            Specifies transports that the client can use to send HTTP requests.
            </summary>
            <remarks>
            This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a bitwise combination of its member values.
            </remarks>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.Connections.HttpTransportType.None">
            <summary>
            Specifies that no transport is used.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets">
            <summary>
            Specifies that the web sockets transport is used.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.Connections.HttpTransportType.ServerSentEvents">
            <summary>
            Specifies that the server sent events transport is used.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.Connections.HttpTransportType.LongPolling">
            <summary>
            Specifies that the long polling transport is used.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.Connections.NegotiateProtocol">
            <summary>
            The protocol for reading and writing negotiate requests and responses.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Connections.NegotiateProtocol.WriteResponse(Microsoft.AspNetCore.Http.Connections.NegotiationResponse,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Writes the <paramref name="response"/> to the <paramref name="output"/>.
            </summary>
            <param name="response">The negotiation response generated in response to a negotiation request.</param>
            <param name="output">Where the <paramref name="response"/> is written to as Json.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Connections.NegotiateProtocol.ParseResponse(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a <see cref="T:Microsoft.AspNetCore.Http.Connections.NegotiationResponse"/> from the <paramref name="content"/> as Json.
            </summary>
            <param name="content">The bytes of a Json payload that represents a <see cref="T:Microsoft.AspNetCore.Http.Connections.NegotiationResponse"/>.</param>
            <returns>The parsed <see cref="T:Microsoft.AspNetCore.Http.Connections.NegotiationResponse"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.Connections.NegotiationResponse">
            <summary>
            A response to a '/negotiate' request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Connections.NegotiationResponse.Url">
            <summary>
            An optional Url to redirect the client to another endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Connections.NegotiationResponse.AccessToken">
            <summary>
            An optional access token to go along with the Url.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Connections.NegotiationResponse.ConnectionId">
            <summary>
            The public ID for the connection.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Connections.NegotiationResponse.ConnectionToken">
            <summary>
            The private ID for the connection.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Connections.NegotiationResponse.Version">
            <summary>
            The minimum value between the version the client sends and the maximum version the server supports.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Connections.NegotiationResponse.AvailableTransports">
            <summary>
            A list of transports the server supports.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Connections.NegotiationResponse.Error">
            <summary>
            An optional error during the negotiate. If this is not null the other properties on the response can be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Connections.NegotiationResponse.UseStatefulReconnect">
            <summary>
            If set, the connection should attempt to reconnect with the same <see cref="P:Microsoft.AspNetCore.Connections.BaseConnectionContext.ConnectionId"/> if it disconnects.
            It should also set <see cref="T:Microsoft.AspNetCore.Connections.Abstractions.IStatefulReconnectFeature"/> on the <see cref="P:Microsoft.AspNetCore.Connections.BaseConnectionContext.Features"/> collection so other layers of the
            application (like SignalR) can react.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
