@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Pages.Devices.Dialogs.Remote_File_Browser.Result_Dialog> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudDialog Style="width: 600px;">
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["title"]</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="@Localizer["result"]" T="string" Lines="20" @bind-Value="@result" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" ReadOnly="true" />
       
    </DialogContent>
    <DialogActions>

        <MudButton OnClick="@OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">@Localizer["close"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    [Parameter] public string result { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get the current user from the authentication state
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        // Check if user is authenticated
        if (user?.Identity is not { IsAuthenticated: true })
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        this.MudDialog.Close(DialogResult.Ok("success"));
    }

    private void Cancel() => MudDialog.Cancel();
}