@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Pages.Users.Dialogs.Add_User_Dialog> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["title"]</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Label="Name" T="string" @bind-Value="@username" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
        <MudTextField Label="@Localizer["text"]" T="string" @bind-Value="@password" ReadOnly="true" Immediate="@true" />
        <MudButton Class="mt-3 ml-2" Size="Size.Small" Variant="Variant.Filled" Color="Color.Warning" OnClick="Copy_Credentials_To_Clipboard" Disabled="(String.IsNullOrEmpty(username) || String.IsNullOrEmpty(password))">Copy to clipboard</MudButton>

        <MudSelect Class="mt-3" T="string" @bind-Value="role" Label="@Localizer["role"]" AnchorOrigin="Origin.BottomCenter" >
            <MudSelectItem Value="@("Administrator")" />
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer["cancel"]</MudButton>

        <MudButton OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success" Disabled="(String.IsNullOrEmpty(username) || String.IsNullOrEmpty(password))" >Confirm</MudButton>
    </DialogActions>
</MudDialog>

@code {

    protected override async Task OnInitializedAsync()
    {
        // Get the current user from the authentication state
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        // Check if user is authenticated
        if (user?.Identity is not { IsAuthenticated: true })
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        password = Randomizer.Handler.Generate_Password(true, 12);
    }

    private string username = String.Empty;
    private string password = String.Empty;
    private string role = "Administrator";

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private async Task Copy_Credentials_To_Clipboard()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        string credentials = @"Username: " + username + "\nOTP: " + password;

        await JSRuntime.InvokeVoidAsync("copyToClipboard", credentials);

        Snackbar.Add(Localizer["copied_to_clipboard"], Severity.Info, config => { config.ShowCloseIcon = true; });
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            // Check whether the user name already exists
            using (MySqlCommand checkCmd = new MySqlCommand("SELECT COUNT(*) FROM accounts WHERE username = @username LIMIT 1;", conn))
            {
                checkCmd.Parameters.AddWithValue("@username", username);
                long count = (long)await checkCmd.ExecuteScalarAsync();
                if (count > 0)
                {
                    Logging.Handler.Debug("/user_settings (Add_User_Dialog)", "Username already exists", username);
                    success = false;

                    this.Snackbar.Add(@Localizer["username_exists"], Severity.Error);

                    return;
                }
            }

            // Username does not exist, so insert new entry
            string password_hashed = BCrypt.HashPassword(password);

            using (MySqlCommand cmd = new MySqlCommand("INSERT INTO `accounts` (`username`, `password`, `role`, `reset_password`, `tenants`) VALUES (@username, @password, @role, 1, '[]');", conn))
            {
                cmd.Parameters.AddWithValue("@username", username);
                cmd.Parameters.AddWithValue("@password", password_hashed);
                cmd.Parameters.AddWithValue("@role", role);
                await cmd.ExecuteNonQueryAsync();
                success = true;
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/user_settings (Add_User_Dialog) -> OK", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.Snackbar.Add(@Localizer["added"], Severity.Success);
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add(@Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}