@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Layout.Agent_Download.Add_Agent_Configuration_Dialog> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["create_configuration"]</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="Name" T="string" @bind-Value="name" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" ReadOnly="false" />

    </DialogContent>
    <DialogActions>

        <MudButton OnClick="@Create_Configuration" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success" Disabled="@(String.IsNullOrEmpty(name))" >@Localizer["confirm"]</MudButton>

    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    private string name = String.Empty;
    private string netlock_username = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user from the authentication state
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        // Check if user is authenticated
        if (user?.Identity is not { IsAuthenticated: true })
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }
    }

    // Create configuration
    private async Task Create_Configuration()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            // Check if the configuration name already exists
            string checkQuery = "SELECT COUNT(*) FROM agent_package_configurations WHERE name = @name;";

			MySqlCommand checkCmd = new MySqlCommand(checkQuery, conn);
			checkCmd.Parameters.AddWithValue("@name", name);
            long count = (long)await checkCmd.ExecuteScalarAsync();
			if (count > 0)
			{
				this.Snackbar.Add("A configuration with this name already exists.", Severity.Error);
				return;
			}

            string query = "INSERT INTO agent_package_configurations (name, guid) VALUES (@name, @guid);";

            MySqlCommand cmd = new MySqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@name", name);
            cmd.Parameters.AddWithValue("@guid", Guid.NewGuid());
            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/MainLayout -> Create_Configuration", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
			this.Snackbar.Add("Configuration created.", Severity.Success);
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}