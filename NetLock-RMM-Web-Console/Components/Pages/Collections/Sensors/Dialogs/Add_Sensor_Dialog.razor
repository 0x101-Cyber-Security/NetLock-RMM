@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Collections.Sensors.Dialogs.Add_Sensor_Dialog> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["add"]</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="@Localizer["name"]" T="string" @bind-Value="@sensor_name" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
        <MudTextField Label="@Localizer["description"]" T="string" @bind-Value="@description" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" />

        <MudSelect Class="mt-3" T="string" @bind-Value="platform" @bind-Value:after="async () => { await Get_Scripts(); }" Label="@Localizer["platform"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Immediate="true">
            <MudSelectItem T="string" Value="@Localizer["Windows"]" />
            <MudSelectItem T="string" Value="@Localizer["Linux"]" />
            <MudSelectItem T="string" Value="@Localizer["MacOS"]" />
        </MudSelect>

        <MudSelect Class="mt-3" T="string" @bind-Value="severity" Label="@Localizer["severity"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            <MudSelectItem T="string" Value="@Localizer["critical"]" />
            <MudSelectItem T="string" Value="@Localizer["high"]" />
            <MudSelectItem T="string" Value="@Localizer["moderate"]" />
            <MudSelectItem T="string" Value="@Localizer["low"]" />
        </MudSelect>

        <MudSelect Class="mt-3" T="string" @bind-Value="time_scheduler_type_display" Label="@Localizer["schedule"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            <MudSelectItem T="string" Value="@Localizer["schedule_system_boot"]" />
            <MudSelectItem T="string" Value="@Localizer["schedule_date_time"]" />
            <MudSelectItem T="string" Value="@Localizer["schedule_x_seconds"]" />
            <MudSelectItem T="string" Value="@Localizer["schedule_x_minutes"]" />
            <MudSelectItem T="string" Value="@Localizer["schedule_x_hours"]" />
            <MudSelectItem T="string" Value="@Localizer["schedule_date_x_seconds"]" />
            <MudSelectItem T="string" Value="@Localizer["schedule_date_x_minutes"]" />
            <MudSelectItem T="string" Value="@Localizer["schedule_date_x_hours"]" />
            <MudSelectItem T="string" Value="@Localizer["schedule_days_x_time"]" />
            <MudSelectItem T="string" Value="@Localizer["schedule_days_x_seconds"]" />
            <MudSelectItem T="string" Value="@Localizer["schedule_days_x_minutes"]" />
            <MudSelectItem T="string" Value="@Localizer["schedule_days_x_hours"]" />
        </MudSelect>

        @{
            if (time_scheduler_type_display == Localizer["schedule_date_time"])
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="@Localizer["date"].ToString()" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudTimePicker Class="ml-2" Label="@Localizer["time"].ToString()" @bind-Time="time_scheduler_time" />
                </div>
            }
            else if (time_scheduler_type_display == Localizer["schedule_x_seconds"])
            {
                <MudNumericField Class="mt-3" @bind-Value="time_scheduler_seconds" Label="@Localizer["seconds"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
            }
            else if (time_scheduler_type_display == Localizer["schedule_x_minutes"])
            {
                <MudNumericField Class="mt-3" @bind-Value="time_scheduler_minutes" Label="@Localizer["minutes"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
            }
            else if (time_scheduler_type_display == Localizer["schedule_x_hours"])
            {
                <MudNumericField Class="mt-3" @bind-Value="time_scheduler_hours" Label="@Localizer["hours"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
            }
            else if (time_scheduler_type_display == Localizer["schedule_date_x_seconds"])
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="@Localizer["date"].ToString()" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudNumericField Class="ml-2" @bind-Value="time_scheduler_seconds" Label="@Localizer["seconds"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
                </div>
            }
            else if (time_scheduler_type_display == Localizer["schedule_date_x_minutes"])
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="@Localizer["date"].ToString()" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudNumericField Class="ml-2" @bind-Value="time_scheduler_minutes" Label="@Localizer["minutes"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
                </div>
            }
            else if (time_scheduler_type_display == Localizer["schedule_date_x_hours"])
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="@Localizer["date"].ToString()" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudNumericField Class="ml-2" @bind-Value="time_scheduler_hours" Label="@Localizer["hours"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
                </div>
            }
            else if (time_scheduler_type_display == Localizer["schedule_days_x_time"])
            {
                <MudTimePicker Label="@Localizer["time"].ToString()" @bind-Time="time_scheduler_time" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="@Localizer["monday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="@Localizer["tuesday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="@Localizer["wednesday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="@Localizer["thursday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="@Localizer["friday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="@Localizer["saturday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="@Localizer["sunday"].ToString()" Color="Color.Primary" />
            }
            else if (time_scheduler_type_display == Localizer["schedule_days_x_seconds"])
            {
                <MudNumericField @bind-Value="time_scheduler_seconds" Label="@Localizer["seconds"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="@Localizer["monday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="@Localizer["tuesday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="@Localizer["wednesday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="@Localizer["thursday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="@Localizer["friday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="@Localizer["saturday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="@Localizer["sunday"].ToString()" Color="Color.Primary" />
            }
            else if (time_scheduler_type_display == Localizer["schedule_days_x_minutes"])
            {
                <MudNumericField @bind-Value="time_scheduler_minutes" Label="@Localizer["minutes"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="@Localizer["monday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="@Localizer["tuesday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="@Localizer["wednesday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="@Localizer["thursday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="@Localizer["friday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="@Localizer["saturday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="@Localizer["sunday"].ToString()" Color="Color.Primary" />
            }
            else if (time_scheduler_type_display == Localizer["schedule_days_x_hours"])
            {
                <MudNumericField @bind-Value="time_scheduler_hours" Label="@Localizer["hours"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="@Localizer["monday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="@Localizer["tuesday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="@Localizer["wednesday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="@Localizer["thursday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="@Localizer["friday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="@Localizer["saturday"].ToString()" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="@Localizer["sunday"].ToString()" Color="Color.Primary" />
            }

        }

        <MudSelect Class="mt-3" T="string" @bind-Value="category" Label="@Localizer["category"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            <MudSelectItem T="string" Value="@Localizer["utilization"]" />

            @if (platform == "Windows")
            {
                <MudSelectItem T="string" Value="@("Windows Eventlog")" />
                <MudSelectItem T="string" Value="@("PowerShell")" />
            }
            else if (platform == "Linux")
            {
                <MudSelectItem T="string" Value="@("Bash")" />
            }
            else if (platform == "MacOS")
            {
                <MudSelectItem T="string" Value="@("Zsh")" />
            }

            <MudSelectItem T="string" Value="@Localizer["service"]" />
            <MudSelectItem T="string" Value="@("Ping")" />
        </MudSelect>

        @{
            if (category == @Localizer["utilization"])
            {
                <MudSelect Class="mt-3" T="string" @bind-Value="sub_category" Label="@Localizer["sub_category"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <MudSelectItem T="string" Value="@Localizer["processor"]" />
                    <MudSelectItem T="string" Value="@Localizer["ram"]" />
                    <MudSelectItem T="string" Value="@Localizer["drive"]" />
                    <MudSelectItem T="string" Value="@Localizer["process_cpu_utilization (%)"]" />
                    <MudSelectItem T="string" Value="@Localizer["process_ram_utilization (%)"]" />
                    <MudSelectItem T="string" Value="@Localizer["process_ram_utilization (MB)"]" />
                </MudSelect>

                if (sub_category == Localizer["processor"])
                {
                    <MudText Class="mt-5" Typo="Typo.h6">@Localizer["rule"]</MudText>

                    <MudSlider Class="mt-3" @bind-Value="cpu_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">@Localizer["utilization"] (@cpu_usage%)</MudSlider>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="@Localizer["notification_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="@Localizer["notification_treshold_max_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudText Class="mt-5" Typo="Typo.h6">@Localizer["action"]</MudText>

                    <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="@Localizer["script"]" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                        @{
                            foreach (var script in scripts_list)
                            {
                                <MudSelectItem Value="@(script.name)" />
                            }
                        }
                    </MudSelect>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="@Localizer["action_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="@Localizer["action_treshold_max_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>
                }
                else if (sub_category == Localizer["process_cpu_utilization (%)"])
                {
                    <MudText Class="mt-5" Typo="Typo.h6">@Localizer["rule"]</MudText>

                    <div style="display: flex; align-items: center;">
                        <MudTextField Label="@Localizer["process_name"]" T="string" @bind-Value="@process_name" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />

                        <MudTooltip Text="@Localizer["process_cpu_utilization (%)_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudSlider Class="mt-3" @bind-Value="cpu_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">@Localizer["utilization"] (%)</MudSlider>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="@Localizer["notification_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="@Localizer["notification_treshold_max_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudText Class="mt-5" Typo="Typo.h6">@Localizer["action"]</MudText>

                    <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="@Localizer["script"]" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                        @{
                            foreach (var script in scripts_list)
                            {
                                <MudSelectItem Value="@(script.name)" />
                            }
                        }
                    </MudSelect>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="@Localizer["action_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="@Localizer["action_treshold_max_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>
                }
                else if (sub_category == Localizer["process_ram_utilization (%)"])
                {
                    <MudText Class="mt-5" Typo="Typo.h6">@Localizer["rule"]</MudText>

                    <div style="display: flex; align-items: center;">
                        <MudTextField Label="@Localizer["process_name"]" T="string" @bind-Value="@process_name" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />

                        <MudTooltip Text="@Localizer["process_cpu_utilization (%)_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudSlider @bind-Value="ram_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">@Localizer["utilization"] (%)</MudSlider>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="@Localizer["notification_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="@Localizer["notification_treshold_max_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudText Class="mt-5" Typo="Typo.h6">@Localizer["action"]</MudText>

                    <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="@Localizer["script"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Immediate=@true>
                        @{
                            foreach (var script in scripts_list)
                            {
                                <MudSelectItem Value="@(script.name)" />
                            }
                        }
                    </MudSelect>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="@Localizer["action_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="@Localizer["action_treshold_max_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>
                }
                else if (sub_category == Localizer["process_ram_utilization (MB)"])
                {
                    <MudText Class="mt-5" Typo="Typo.h6">@Localizer["rule"]</MudText>

                    <div style="display: flex; align-items: center;">
                        <MudTextField Label="@Localizer["process_name"]" T="string" @bind-Value="@process_name" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />

                        <MudTooltip Text="@Localizer["process_cpu_utilization (%)_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudNumericField @bind-Value="ram_usage" Label="MB" Variant="Variant.Text" Min="1" Max="999999" />

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="@Localizer["notification_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="@Localizer["notification_treshold_max_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudText Class="mt-5" Typo="Typo.h6">@Localizer["action"]</MudText>

                    <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="@Localizer["script"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Immediate=@true>
                        @{
                            foreach (var script in scripts_list)
                            {
                                <MudSelectItem Value="@(script.name)" />
                            }
                        }
                    </MudSelect>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="@Localizer["action_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="@Localizer["action_treshold_max_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>
                }
                else if (sub_category == Localizer["ram"])
                {
                    <MudText Class="mt-5" Typo="Typo.h6">@Localizer["rule"]</MudText>

                    <MudSlider @bind-Value="ram_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">@Localizer["utilization"] (%)</MudSlider>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="@Localizer["notification_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="@Localizer["notification_treshold_max_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudText Class="mt-5" Typo="Typo.h6">@Localizer["action"]</MudText>

                    <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="@Localizer["script"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Immediate=@true>
                        @{
                            foreach (var script in scripts_list)
                            {
                                <MudSelectItem Value="@(script.name)" />
                            }
                        }
                    </MudSelect>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="@Localizer["action_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="@Localizer["action_treshold_max_tooltip"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>
                }
                else if (sub_category == Localizer["drive"])
                {
                    <MudSelect Class="mt-3" T="string" @bind-Value="disk_category" Label="@Localizer["if..."]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                        <MudSelectItem T="string" Value="@Localizer["drive_used_more_than_x_gb"]" />
                        <MudSelectItem T="string" Value="@Localizer["drive_used_less_than_x_gb"]" />
                        <MudSelectItem T="string" Value="@Localizer["drive_used_more_than_x_%"]" />
                        <MudSelectItem T="string" Value="@Localizer["drive_used_less_than_x_%"]" />
                    </MudSelect>

                    if (!String.IsNullOrEmpty(disk_category))
                    {
                        <MudText Class="mt-5" Typo="Typo.h6">@Localizer["rule"]</MudText>

                        <div style="display: flex; align-items: center;">
                            <MudTextField Label="@Localizer["drive_letter"]" T="string" @bind-Value="@disk_letters" Variant="Variant.Text" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" />

                            <MudTooltip Text="@Localizer["drive_letter_tooltip"]">
                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>

                        <div style="display: flex; align-items: center;">
                            <MudNumericField Class="mt-3" @bind-Value="disk_minimum_capacity" Label="@Localizer["disk_minimum_capacity"]" Variant="Variant.Text" Min="0" Max="9999" />

                            <MudTooltip Text="@Localizer["disk_minimum_capacity_tooltip"]">
                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>

                        if (disk_category == Localizer["drive_used_more_than_x_gb"])
                        {
                            <MudNumericField Class="mt-3" @bind-Value="disk_usage" Label="@Localizer["drive_used_more_or_less_than_x_gb_tooltip"]" Variant="Variant.Text" Min="1" Max="9999" />
                        }
                        else if (disk_category == Localizer["drive_used_less_than_x_gb"])
                        {
                            <MudNumericField Class="mt-3" @bind-Value="disk_usage" Label="@Localizer["drive_used_more_or_less_than_x_gb_tooltip"]" Variant="Variant.Text" Min="1" Max="9999" />
                        }
                        if (disk_category == Localizer["drive_used_more_than_x_%"])
                        {
                            <MudSlider @bind-Value="disk_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">@Localizer["drive_used_more_or_less_than_x_%_tooltip"]</MudSlider>
                        }
                        else if (disk_category == Localizer["drive_used_less_than_x_%"])
                        {
                            <MudSlider @bind-Value="disk_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">@Localizer["drive_used_more_or_less_than_x_%_tooltip"]</MudSlider>
                        }

                        <div style="display: flex; align-items: center;">
                            <MudCheckBox T="bool" @bind-Value="@disk_include_network_disks" Label="@Localizer["network_drives"]" Color="Color.Primary" />

                            <MudTooltip Text="@Localizer["network_drives_tooltip"]">
                                <MudIconButton Class="ml-2 mt-0" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>

                        <div style="display: flex; align-items: center;">
                            <MudCheckBox T="bool" @bind-Value="@disk_include_removable_disks" Label="@Localizer["removable_drives"]" Color="Color.Primary" />

                            <MudTooltip Text="@Localizer["removable_drives_tooltip"]">
                                <MudIconButton Class="ml-2 mt-0" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>

                        <div style="display: flex; align-items: center;">
                            <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="@Localizer["notification_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                            <MudTooltip Text="@Localizer["notification_treshold_max_tooltip"]">
                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>

                        <MudText Class="mt-2" Typo="Typo.h6">@Localizer["action"]</MudText>

                        <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="@Localizer["script"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Immediate=@true>
                            @{
                                foreach (var script in scripts_list)
                                {
                                    <MudSelectItem Value="@(script.name)" />
                                }
                            }
                        </MudSelect>

                        <div style="display: flex; align-items: center;">
                            <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="@Localizer["action_treshold_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                            <MudTooltip Text="@Localizer["action_treshold_max_tooltip"]">
                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>
                    }
                }
            }
            else if (category == "PowerShell" && platform == "Windows" || category == "Bash" && platform == "Linux" || category == "Zsh" && platform == "MacOS")
            {
                <MudText Class="mt-5" Typo="Typo.h6">@Localizer["rule"]</MudText>

                <MudSelect Class="mt-3" T="string" @bind-Value="script" Label="@Localizer["script"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Immediate=@true>
                    @{
                        foreach (var script in scripts_list)
                        {
                            <MudSelectItem Value="@(script.name)" />
                        }
                    }
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudTextField Label="@Localizer["expected_result"]" T="string" @bind-Value="@expected_result" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />

                    <MudTooltip Text="@Localizer["regex_supported_tooltip"]">
                        <MudIconButton Class="ml-2 mt-3" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="@Localizer["notification_treshold_hits_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="@Localizer["notification_treshold_hits_max_tooltip"]">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <MudText Class="mt-5" Typo="Typo.h6">@Localizer["action"]</MudText>

                <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="@Localizer["script"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Immediate=@true>
                    @{
                        foreach (var script in scripts_list)
                        {
                            <MudSelectItem Value="@(script.name)" />
                        }
                    }
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="@Localizer["action_treshold_hits_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="@Localizer["action_treshold_hits_max_tooltip"]">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>
            }
            else if (category == "Windows Eventlog" && platform == "Windows")
            {
                <MudText Class="mt-5" Typo="Typo.h6">@Localizer["rule"]</MudText>

                @if (!eventlog_custom)
                {
                    <MudSelect Class="mt-3" T="string" @bind-Value="eventlog" Label="Eventlog" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                        <MudSelectItem T="string" Value="@Localizer["eventlog_application"]" />
                        <MudSelectItem T="string" Value="@Localizer["eventlog_security"]" />
                        <MudSelectItem T="string" Value="@Localizer["eventlog_setup"]" />
                        <MudSelectItem T="string" Value="@("System")" />
                    </MudSelect>
                }

                <MudCheckBox T="bool" @bind-Value="eventlog_custom" Label="@Localizer["custom"].ToString()" Color="Color.Primary" />

                if (eventlog_custom)
                {
                    <MudTextField Class="mt-3" Label="Eventlog" T="string" @bind-Value="@eventlog" Variant="Variant.Text" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
                }

                <div style="display: flex; align-items: center;">
                    <MudTextField Label="@Localizer["event_id"]" T="string" @bind-Value="@eventlog_event_id" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
                </div>

                <div style="display: flex; align-items: center;">
                    <MudTextField Label="@Localizer["expected_result"]" T="string" @bind-Value="@expected_result" Required="false" RequiredError="@Localizer["required"]" Immediate="@false" />

                    <MudTooltip Text="@Localizer["event_id_tooltip_expected_result"]">
                        <MudIconButton Class="ml-2 mt-3" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="@Localizer["notification_treshold_hits_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="@Localizer["notification_treshold_hits_max_tooltip"]">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <MudText Class="mt-5" Typo="Typo.h6">@Localizer["action"]</MudText>

                <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="@Localizer["script"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Immediate=@true>
                    @{
                        foreach (var script in scripts_list)
                        {
                            <MudSelectItem Value="@(script.name)" />
                        }
                    }
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="@Localizer["action_treshold_hits_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="@Localizer["action_treshold_hits_max_tooltip"]">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>
            }
            else if (category == @Localizer["service"])
            {
                <MudText Class="mt-5" Typo="Typo.h6">@Localizer["rule"]</MudText>

                <MudTextField Class="mt-0" Label="@Localizer["service_name"]" T="string" @bind-Value="@service_name" Variant="Variant.Text" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />

                <MudSelect Class="mt-2" T="string" @bind-Value="service_condition" Label="@Localizer["service_status"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <MudSelectItem T="string" Value="@Localizer["service_status_running"]" />
                    <MudSelectItem T="string" Value="@Localizer["service_status_paused"]" />
                    <MudSelectItem T="string" Value="@Localizer["service_status_stopped"]" />
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="@Localizer["notification_treshold_hits_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="@Localizer["notification_treshold_hits_max_tooltip"]">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <MudText Class="mt-5" Typo="Typo.h6">@Localizer["action"]</MudText>

                <MudSelect Class="mt-0" T="string" @bind-Value="service_action" Label="@Localizer["service_action"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <MudSelectItem T="string" Value="@Localizer["service_action_start"]" />
                    <MudSelectItem T="string" Value="@Localizer["service_action_stop"]" />
                    <MudSelectItem T="string" Value="@Localizer["service_action_restart"]" />
                </MudSelect>

                <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="@Localizer["script"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Immediate=@true>
                    @{
                        foreach (var script in scripts_list)
                        {
                            <MudSelectItem Value="@(script.name)" />
                        }
                    }
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="@Localizer["action_treshold_hits_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="@Localizer["action_treshold_hits_max_tooltip"]">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>
            }
            else if (category == "Ping")
            {
                <MudText Class="mt-5" Typo="Typo.h6">@Localizer["rule"]</MudText>

                <MudTextField Class="mt-3" Label="@Localizer["ip_address/hostname"]" T="string" @bind-Value="@ping_address" Variant="Variant.Text" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
                <MudNumericField Class="mt-3" Label="@Localizer["timeout_milliseconds"]" @bind-Value="ping_timeout" Variant="Variant.Text" Min="1" Max="120" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />

                <MudSelect Class="mt-2" T="string" @bind-Value="ping_condition" Label="@Localizer["ping_status"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <MudSelectItem T="string" Value="@Localizer["successful"]" />
                    <MudSelectItem T="string" Value="@Localizer["failed"]" />
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="@Localizer["notification_treshold_failures_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="@Localizer["notification_treshold_hits_max_tooltip"]">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <MudText Class="mt-5" Typo="Typo.h6">@Localizer["action"]</MudText>

                <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="@Localizer["script"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Immediate=@true>
                    @{
                        foreach (var script in scripts_list)
                        {
                            <MudSelectItem Value="@(script.name)" />
                        }
                    }
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="@Localizer["action_treshold_failures_max"]" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="@Localizer["action_treshold_hits_max_tooltip"]">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>
            }

        }

        <div style="display: flex; align-items: center;">
            <MudCheckBox Class="mt-3" T="bool" @bind-Value="auto_reset" Label="@Localizer["auto_reset"]" Color="Color.Primary" />

            <MudTooltip Text="@Localizer["auto_reset_tooltip"]">
                <MudIconButton Class="ml-2 mt-3" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
            </MudTooltip>
        </div>

        <MudText Class="mt-5" Typo="Typo.h6">@Localizer["notifications"]</MudText>

        <div style="display: flex; align-items: center;">
            <MudCheckBox T="bool" @bind-Value="notifications_mail" Label="E-Mail" Color="Color.Primary" />

            <MudTooltip Text="@Localizer["notifications_mail_tooltip"]">
                <MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
            </MudTooltip>
        </div>

        <div style="display: flex; align-items: center;">
            <MudCheckBox T="bool" @bind-Value="notifications_microsoft_teams" Label="Microsoft Teams" Color="Color.Primary" />

            <MudTooltip Text="@Localizer["notifications_microsoft_teams_tooltip"]">
                <MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
            </MudTooltip>
        </div>

        <div style="display: flex; align-items: center;">
            <MudCheckBox T="bool" @bind-Value="notifications_telegram" Label="Telegram" Color="Color.Primary" />

            <MudTooltip Text="@Localizer["notifications_telegram_tooltip"]">
                <MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
            </MudTooltip>
        </div>

        <div style="display: flex; align-items: center;">
            <MudCheckBox T="bool" @bind-Value="notifications_ntfy_sh" Label="ntfy.sh" Color="Color.Primary" />

            <MudTooltip Text="@Localizer["notifications_ntfy_sh_tooltip"]">
                <MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
            </MudTooltip>
        </div>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer["cancel"]</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">@Localizer["confirm"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private string netlock_username = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user from the authentication state
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

		// Check if user is authenticated
        if (user?.Identity is not { IsAuthenticated: true })
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        // Retrieve username from claims
        netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;
        
        category = Localizer["utilization"];
        severity = Localizer["moderate"];
        eventlog = Localizer["eventlog_application"];
        service_condition = Localizer["service_status_stopped"];
        service_action = Localizer["service_action_start"];
        time_scheduler_type_display = Localizer["schedule_system_boot"];

        await Get_Scripts();
    }

    public List<Script> scripts_list = new List<Script>();

    private string updatedJson = String.Empty;

    private string sensor_name = String.Empty;
    private string description = String.Empty;
    private string platform = "Windows";
    private string severity = String.Empty;
    private string category = String.Empty;
    private string sub_category = String.Empty;
    private string utilization_category = String.Empty;

    private string script = String.Empty;
    private string script_action = String.Empty;
    private int notification_treshold_max = 0;
    private int action_treshold_max = 0;
    private bool auto_reset = false;

    //Utilization sensor
    private string disk_category = String.Empty;

    private int cpu_usage = 90;
    private string process_name = String.Empty;
    private int ram_usage = 90;
    private int disk_usage = 50;
    private int disk_minimum_capacity = 5;
    private string disk_letters = "C";

    private bool disk_include_network_disks = false;
    private bool disk_include_removable_disks = false;

    //Eventlog sensor
    private string eventlog = String.Empty;
    private bool eventlog_custom = false;
    private string eventlog_event_id = String.Empty;
    private string expected_result = String.Empty;

    //service sensor
    private string service_name = String.Empty;
    private string service_condition = String.Empty;
    private string service_action = String.Empty;

    //ping sensor
    private string ping_address = String.Empty;
    private int ping_timeout = 5;
    private string ping_condition = String.Empty;

    //Time scheduler
    private int time_scheduler_type = 0;
    private string time_scheduler_type_display = String.Empty;
    private int time_scheduler_seconds = 10;
    private int time_scheduler_minutes = 5;
    private int time_scheduler_hours = 1;
    private TimeSpan? time_scheduler_time = new TimeSpan(12, 00, 00);
    private DateTime? time_scheduler_date = DateTime.Now;
    private bool time_scheduler_monday = false;
    private bool time_scheduler_tuesday = false;
    private bool time_scheduler_wednesday = false;
    private bool time_scheduler_thursday = false;
    private bool time_scheduler_friday = false;
    private bool time_scheduler_saturday = false;
    private bool time_scheduler_sunday = false;

    // NetLock notifications
    private bool notifications_mail = false;
    private bool notifications_microsoft_teams = false;
    private bool notifications_telegram = false;
    private bool notifications_ntfy_sh = false;

    public class Sensor
    {
        public string id { get; set; }
        public string name { get; set; }
        public string date { get; set; }
        public string last_run { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public string platform { get; set; }
        public int severity { get; set; }
        public int category { get; set; }
        public int sub_category { get; set; }
        public int utilization_category { get; set; }
        public int notification_treshold_count { get; set; }
        public int notification_treshold_max { get; set; }
        public string notification_history { get; set; }
        public int action_treshold_count { get; set; }
        public int action_treshold_max { get; set; }
        public string action_history { get; set; }
        public bool auto_reset { get; set; }
        public int script_id { get; set; }
        public string script { get; set; }
        public int script_action_id { get; set; }
        public string script_action { get; set; }
        public int cpu_usage { get; set; }
        public string process_name { get; set; }
        public int ram_usage { get; set; }
        public int disk_usage { get; set; }
        public int disk_minimum_capacity { get; set; }
        public int disk_category { get; set; }
        public string disk_letters { get; set; }
        public bool disk_include_network_disks { get; set; }
        public bool disk_include_removable_disks { get; set; }
        public string eventlog { get; set; }
        public bool eventlog_custom { get; set; }
        public string eventlog_event_id { get; set; }
        public string expected_result { get; set; }

        //service sensor
        public string service_name { get; set; }
        public int service_condition { get; set; }
        public int service_action { get; set; }

        //ping sensor
        public string ping_address { get; set; }
        public int ping_timeout { get; set; }
        public int ping_condition { get; set; }

        //time schedule
        public int time_scheduler_type { get; set; }
        public int time_scheduler_seconds { get; set; }
        public int time_scheduler_minutes { get; set; }
        public int time_scheduler_hours { get; set; }
        public string time_scheduler_time { get; set; }
        public string time_scheduler_date { get; set; }
        public bool time_scheduler_monday { get; set; }
        public bool time_scheduler_tuesday { get; set; }
        public bool time_scheduler_wednesday { get; set; }
        public bool time_scheduler_thursday { get; set; }
        public bool time_scheduler_friday { get; set; }
        public bool time_scheduler_saturday { get; set; }
        public bool time_scheduler_sunday { get; set; }

        // NetLock notifications
        public bool notifications_mail { get; set; }
        public bool notifications_microsoft_teams { get; set; }
        public bool notifications_telegram { get; set; }
        public bool notifications_ntfy_sh { get; set; }
    }

    public class Script
    {
        public int id { get; set; }
        public string name { get; set; }
        public string date { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public string platform { get; set; }
        public string shell { get; set; }
        public string script { get; set; }
    }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private bool Form_Valid()
    {
        //human to computable time scheduler
        if (time_scheduler_type_display == Localizer["schedule_system_boot"])
            time_scheduler_type = 0;
        else if (time_scheduler_type_display == Localizer["schedule_date_time"])
            time_scheduler_type = 1;
        else if (time_scheduler_type_display == Localizer["schedule_x_seconds"])
            time_scheduler_type = 2;
        else if (time_scheduler_type_display == Localizer["schedule_x_minutes"])
            time_scheduler_type = 3;
        else if (time_scheduler_type_display == Localizer["schedule_x_hours"])
            time_scheduler_type = 4;
        else if (time_scheduler_type_display == Localizer["schedule_date_x_seconds"])
            time_scheduler_type = 5;
        else if (time_scheduler_type_display == Localizer["schedule_date_x_minutes"])
            time_scheduler_type = 6;
        else if (time_scheduler_type_display == Localizer["schedule_date_x_hours"])
            time_scheduler_type = 7;
        else if (time_scheduler_type_display == Localizer["schedule_days_x_time"])
        {
            time_scheduler_type = 8;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_thursday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }
        else if (time_scheduler_type_display == Localizer["schedule_days_x_seconds"])
        {
            time_scheduler_type = 9;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_thursday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }
        else if (time_scheduler_type_display == Localizer["schedule_days_x_minutes"])
        {
            time_scheduler_type = 10;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_thursday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }
        else if (time_scheduler_type_display == Localizer["schedule_days_x_hours"])
        {
            time_scheduler_type = 11;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_thursday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }

        if (String.IsNullOrEmpty(sensor_name) || String.IsNullOrEmpty(category))
            return true;
        else
            return false;
    }

    private async Task Get_Scripts()
    {
        scripts_list.Clear();

        // Add empty script
        scripts_list.Add(new Script { id = 0, name = "-", date = String.Empty, author = String.Empty, description = String.Empty, platform = String.Empty, shell = String.Empty, script = String.Empty });

        string query = "SELECT * FROM scripts WHERE platform = @platform;";

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@platform", platform);

            Logging.Handler.Debug("/manage_jobs Add_Sensor_Dialog) -> Get_Scripts", "MySQL_Prepared_Query", query); //Output prepared query

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/manage_jobs Add_Sensor_Dialog) -> Get_Scripts", "MySQL_Result (json)", reader["json"].ToString() ?? String.Empty); //Output the JSON
                        Logging.Handler.Debug("/manage_jobs Add_Sensor_Dialog) -> Get_Scripts", "MySQL_Result (id)", reader["id"].ToString() ?? String.Empty); //Output the JSON

                        Script script = new Script
                            {
                                id = Convert.ToInt32(reader["id"].ToString()),
                                name = reader["name"].ToString() ?? String.Empty,
                                date = reader["date"].ToString() ?? String.Empty,
                                author = reader["author"].ToString() ?? String.Empty,
                                description = reader["description"].ToString() ?? String.Empty,
                                platform = reader["platform"].ToString() ?? String.Empty,
                                shell = reader["shell"].ToString() ?? String.Empty,
                                script = reader["script"].ToString() ?? String.Empty,
                            };

                        scripts_list.Add(script);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_jobs Add_Sensor_Dialog) -> Get_Scripts", "MySQL_Query", ex.Message);
        }
        finally
        {
            conn.Close();
            StateHasChanged();
        }
    }

    private async Task<int> Get_Script_ID(string name)
    {
        int id = 0;

        foreach (var _object in scripts_list)
        {
            if (_object.name == name)
            {
                id = _object.id;
                break;
            }
        }

        return id;
    }

    private async Task<string> Get_Script_Code(int id)
    {
        string script = String.Empty;

        foreach (var _object in scripts_list)
        {
            if (_object.id == id)
            {
                script = _object.script;
                break;
            }
        }

        return script;
    }

    private async Task OK()
    {
        Form_Valid();

        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            int severity_converted = 0;
            int category_converted = 0;
            int sub_category_converted = 0;
            int disk_category_converted = 0;
            int service_condition_converted = 0;
            int service_action_converted = 0;
            int ping_condition_converted = 0;
            int script_id = await Get_Script_ID(script);
            int script_action_id = await Get_Script_ID(script_action);

            //Human readable to computable: severity
            if (severity == Localizer["critical"])
                severity_converted = 3;
            else if (severity == Localizer["high"])
                severity_converted = 2;
            else if (severity == Localizer["moderate"])
                severity_converted = 1;
            else if (severity == Localizer["low"])
                severity_converted = 0;

            //category
            if (category == Localizer["utilization"])
                category_converted = 0;
            else if (category == "Windows Eventlog")
                category_converted = 1;
            else if (category == "PowerShell")
                category_converted = 2;
            else if (category == Localizer["service"])
                category_converted = 3;
            else if (category == "Ping")
                category_converted = 4;
            else if (category == "Bash")
                category_converted = 5;
            else if (category == "Zsh")
                category_converted = 6;

            //sub_category
            if (sub_category == Localizer["processor"])
                sub_category_converted = 0;
            else if (sub_category == Localizer["ram"])
                sub_category_converted = 1;
            else if (sub_category == Localizer["drive"])
                sub_category_converted = 2;
            else if (sub_category == Localizer["process_cpu_utilization (%)"])
                sub_category_converted = 3;
            else if (sub_category == Localizer["process_ram_utilization (%)"])
                sub_category_converted = 4;
            else if (sub_category == Localizer["process_ram_utilization (MB)"])
                sub_category_converted = 5;

            //disk_category
            if (disk_category == Localizer["drive_used_more_than_x_gb"])
                disk_category_converted = 0;
            else if (disk_category == Localizer["drive_used_less_than_x_gb"])
                disk_category_converted = 1;
            else if (disk_category == Localizer["drive_used_more_than_x_%"])
                disk_category_converted = 2;
            else if (disk_category == Localizer["drive_used_less_than_x_%"])
                disk_category_converted = 3;

            //service condition
            if (service_condition == Localizer["service_status_running"])
                service_condition_converted = 0;
            else if (service_condition == Localizer["service_status_paused"])
                service_condition_converted = 1;
            else if (service_condition == Localizer["service_status_stopped"])
                service_condition_converted = 2;

            //service action
            if (service_action == Localizer["service_action_start"])
                service_action_converted = 0;
            else if (service_action == Localizer["service_action_stop"])
                service_action_converted = 1;
            else if (service_action == Localizer["service_action_restart"])
                service_action_converted = 2;

            // windows event log
            if (eventlog == Localizer["eventlog_application"])
                eventlog = "Application";
            else if (eventlog == Localizer["eventlog_security"])
                eventlog = "Security";
            else if (eventlog == Localizer["eventlog_setup"])
                eventlog = "Setup";
            else if (eventlog == "System")
                eventlog = "System";

            // ping condition
            if (ping_condition == Localizer["successful"])
                ping_condition_converted = 0;
            else if (ping_condition == Localizer["failed"])
                ping_condition_converted = 1;

            Sensor sensor_json = new Sensor
                {
                    id = Randomizer.Handler.Standard(6),
                    name = sensor_name,
                    date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                    author = netlock_username,
                    description = description,
                    platform = platform,
                    severity = severity_converted,
                    category = category_converted,
                    sub_category = sub_category_converted,
                    notification_treshold_max = notification_treshold_max,
                    action_treshold_max = action_treshold_max,
                    auto_reset = auto_reset,
                    script_id = script_id,
                    script = await Base64.Handler.Encode(await Get_Script_Code(script_id)),
                    script_action_id = script_action_id,
                    script_action = await Base64.Handler.Encode(await Get_Script_Code(script_action_id)),
                    cpu_usage = cpu_usage,
                    process_name = process_name,
                    ram_usage = ram_usage,
                    disk_usage = disk_usage,
                    disk_minimum_capacity = disk_minimum_capacity,
                    disk_category = disk_category_converted,
                    disk_letters = disk_letters,
                    disk_include_network_disks = disk_include_network_disks,
                    disk_include_removable_disks = disk_include_removable_disks,
                    eventlog = eventlog,
                    eventlog_custom = eventlog_custom,
                    eventlog_event_id = eventlog_event_id,
                    expected_result = expected_result,

                //service sensor
                    service_name = service_name,
                    service_condition = service_condition_converted,
                    service_action = service_action_converted,

                //ping sensor
                    ping_address = ping_address,
                    ping_timeout = ping_timeout,
                    ping_condition = ping_condition_converted,

                //time schedule
                    time_scheduler_type = time_scheduler_type,
                    time_scheduler_seconds = time_scheduler_seconds,
                    time_scheduler_minutes = time_scheduler_minutes,
                    time_scheduler_hours = time_scheduler_hours,
                    time_scheduler_time = time_scheduler_time.ToString(),
                    time_scheduler_date = time_scheduler_date.ToString(),
                    time_scheduler_monday = time_scheduler_monday,
                    time_scheduler_tuesday = time_scheduler_tuesday,
                    time_scheduler_wednesday = time_scheduler_wednesday,
                    time_scheduler_thursday = time_scheduler_thursday,
                    time_scheduler_friday = time_scheduler_friday,
                    time_scheduler_saturday = time_scheduler_saturday,
                    time_scheduler_sunday = time_scheduler_sunday,

                // notifications
                    notifications_mail = notifications_mail,
                    notifications_microsoft_teams = notifications_microsoft_teams,
                    notifications_telegram = notifications_telegram,
                    notifications_ntfy_sh = notifications_ntfy_sh,
                };

            string sensors_json_string = JsonSerializer.Serialize(sensor_json, new JsonSerializerOptions { WriteIndented = true });

            //Save to MySQL
            await conn.OpenAsync();

            // Check if the sensor already exists
            string check_query = "SELECT * FROM sensors WHERE name = @name;";
            MySqlCommand check_cmd = new MySqlCommand(check_query, conn);
            check_cmd.Parameters.AddWithValue("@name", sensor_name);

            using (DbDataReader reader = await check_cmd.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    this.Snackbar.Add(Localizer["already_exists"], Severity.Warning);
                    return;
                }
            }

            string execute_query = "INSERT INTO `sensors` (`name`, `date`, `author`, `description`, `severity`, `category`, `sub_category`, `script_id`, `script_action_id`, `json`, `platform`) VALUES (@name, @date, @author, @description, @severity, @category, @sub_category, @script_id, @script_action_id, @json, @platform);";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@name", sensor_name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@author", await localStorage.GetItemAsync<string>("username"));
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@severity", severity_converted);
            cmd.Parameters.AddWithValue("@category", category_converted);
            cmd.Parameters.AddWithValue("@sub_category", sub_category_converted);
            cmd.Parameters.AddWithValue("@script_id", script_id);
            cmd.Parameters.AddWithValue("@script_action_id", script_action_id);
            cmd.Parameters.AddWithValue("@json", sensors_json_string);
            cmd.Parameters.AddWithValue("@platform", platform);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_sensors (Add_Sensor_Dialog) -> OK", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}