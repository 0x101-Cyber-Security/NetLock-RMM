@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Collections.Jobs.Dialogs.Add_Job_Dialog> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["add"]</MudText>
    </TitleContent>
        <DialogContent>

            <MudTextField Label="@Localizer["name"]" T="string" @bind-Value="@job_name" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
            <MudTextField Label="@Localizer["description"]" T="string" @bind-Value="@description" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" />

            <MudSelect Class="mt-3" T="string" @bind-Value="time_scheduler_type_display" Label="@Localizer["schedule"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                <MudSelectItem T="string" Value="@Localizer["schedule_system_boot"]" />
                <MudSelectItem T="string" Value="@Localizer["schedule_date_time"]" />
                <MudSelectItem T="string" Value="@Localizer["schedule_x_seconds"]" />
                <MudSelectItem T="string" Value="@Localizer["schedule_x_minutes"]" />
                <MudSelectItem T="string" Value="@Localizer["schedule_x_hours"]" />
                <MudSelectItem T="string" Value="@Localizer["schedule_date_x_seconds"]" />
                <MudSelectItem T="string" Value="@Localizer["schedule_date_x_minutes"]" />
                <MudSelectItem T="string" Value="@Localizer["schedule_date_x_hours"]" />
                <MudSelectItem T="string" Value="@Localizer["schedule_days_x_time"]" />
                <MudSelectItem T="string" Value="@Localizer["schedule_days_x_seconds"]" />
                <MudSelectItem T="string" Value="@Localizer["schedule_days_x_minutes"]" />
                <MudSelectItem T="string" Value="@Localizer["schedule_days_x_hours"]" />
            </MudSelect>

            @{
            
                if (time_scheduler_type_display == Localizer["schedule_date_time"])
                {
                    <div style="display: flex; align-items: center;">
                        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="@Localizer["date"].ToString()" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                            <MudTimePicker Class="ml-2" Label="@Localizer["time"].ToString()" @bind-Time="time_scheduler_time" />
                    </div>
                }
                else if (time_scheduler_type_display == Localizer["schedule_x_seconds"])
                {
                    <MudNumericField Class="mt-3" @bind-Value="time_scheduler_seconds" Label="@Localizer["seconds"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
                }
                else if (time_scheduler_type_display == Localizer["schedule_x_minutes"])
                {
                    <MudNumericField Class="mt-3" @bind-Value="time_scheduler_minutes" Label="@Localizer["minutes"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
                }
                else if (time_scheduler_type_display == Localizer["schedule_x_hours"])
                {
                    <MudNumericField Class="mt-3" @bind-Value="time_scheduler_hours" Label="@Localizer["hours"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
                }
                else if (time_scheduler_type_display == Localizer["schedule_date_x_seconds"])
                {
                    <div style="display: flex; align-items: center;">
                        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="@Localizer["date"].ToString()" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                        <MudNumericField Class="ml-2" @bind-Value="time_scheduler_seconds" Label="@Localizer["seconds"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
                    </div>
                }
                else if (time_scheduler_type_display == Localizer["schedule_date_x_minutes"])
                {
                    <div style="display: flex; align-items: center;">
                        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="@Localizer["date"].ToString()" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                        <MudNumericField Class="ml-2" @bind-Value="time_scheduler_minutes" Label="@Localizer["minutes"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
                    </div>
                }
                else if (time_scheduler_type_display == Localizer["schedule_date_x_hours"])
                {
                    <div style="display: flex; align-items: center;">
                        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="@Localizer["date"].ToString()" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                        <MudNumericField Class="ml-2" @bind-Value="time_scheduler_hours" Label="@Localizer["hours"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />
                    </div>
                }
                else if (time_scheduler_type_display == Localizer["schedule_days_x_time"])
                {
                    <MudTimePicker Label="@Localizer["time"].ToString()" @bind-Time="time_scheduler_time" />

                    <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="@Localizer["monday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="@Localizer["tuesday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="@Localizer["wednesday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="@Localizer["thursday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="@Localizer["friday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="@Localizer["saturday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="@Localizer["sunday"].ToString()" Color="Color.Primary" />
                }
                else if (time_scheduler_type_display == Localizer["schedule_days_x_seconds"])
                {
                    <MudNumericField @bind-Value="time_scheduler_seconds" Label="@Localizer["seconds"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />

                    <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="@Localizer["monday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="@Localizer["tuesday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="@Localizer["wednesday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="@Localizer["thursday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="@Localizer["friday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="@Localizer["saturday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="@Localizer["sunday"].ToString()" Color="Color.Primary" />
                }
                else if (time_scheduler_type_display == Localizer["schedule_days_x_minutes"])
                {
                    <MudNumericField @bind-Value="time_scheduler_minutes" Label="@Localizer["minutes"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />

                    <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="@Localizer["monday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="@Localizer["tuesday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="@Localizer["wednesday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="@Localizer["thursday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="@Localizer["friday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="@Localizer["saturday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="@Localizer["sunday"].ToString()" Color="Color.Primary" />
                }
                else if (time_scheduler_type_display == Localizer["schedule_days_x_hours"])
                {
                    <MudNumericField @bind-Value="time_scheduler_hours" Label="@Localizer["hours"].ToString()" Variant="Variant.Text" Min="1" Max="9999" />

                    <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="@Localizer["monday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="@Localizer["tuesday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="@Localizer["wednesday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="@Localizer["thursday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="@Localizer["friday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="@Localizer["saturday"].ToString()" Color="Color.Primary" />
                    <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="@Localizer["sunday"].ToString()" Color="Color.Primary" />
                }

            <MudSelect Class="mt-3" T="string" @bind-Value="platform" @bind-Value:after="async () => { await Get_Scripts(); }" Label="@Localizer["platform"].ToString()" AnchorOrigin="Origin.BottomCenter" Immediate=@true TransformOrigin="Origin.TopCenter">
                    <MudSelectItem Value="@("Windows")" />
                    <MudSelectItem Value="@("Linux")" />
                    <MudSelectItem Value="@("MacOS")" />
                    <MudSelectItem Value="@("System")" />
                </MudSelect>

            <MudSelect Class="mt-3" T="string" @bind-Value="type_display" @bind-Value:after="async () => { await Get_Scripts(); }" Label="@Localizer["type"].ToString()" AnchorOrigin="Origin.BottomCenter" Immediate=@true TransformOrigin="Origin.TopCenter">
                    @if (platform == "Windows")
                    {
                        type_display = "PowerShell";
                        <MudSelectItem Value="@("PowerShell")" />
                    }
                    else if (platform == "System")
                    {
                        type_display = "MySQL";
                        <MudSelectItem Value="@("MySQL")" />
                    }
                    else if (platform == "Linux")
                    {
                        type_display = "Bash";
                        <MudSelectItem Value="@("Bash")" />
                    }
                    else if (platform == "MacOS")
                    {
                        type_display = "Zsh";
                        <MudSelectItem Value="@("Zsh")" />
                    }
                </MudSelect>

            <MudSelect Class="mt-3" T="string" @bind-Value="script" Label="@Localizer["script"].ToString()" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Immediate=@true>
                @{
                    foreach (var script in scripts_list)
                    {
                        <MudSelectItem Value="@(script.name)" />
                    }
                }
            </MudSelect>
          
            }

        </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer["cancel"].ToString()</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">@Localizer["confirm"].ToString()</MudButton>
    </DialogActions>
</MudDialog>

@code {

	private string netlock_username = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user from the authentication state
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

		// Check if user is authenticated
        if (user?.Identity is not { IsAuthenticated: true })
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        // Retrieve username from claims
        netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;

        time_scheduler_type_display = Localizer["schedule_system_boot"];
        await Get_Scripts();
    }

    public List<Script> scripts_list = new List<Script>();

    private string job_name = String.Empty;
    private string description = String.Empty;
    private string platform = "Windows";
    //private string type = String.Empty;
    private string type_display = String.Empty;
    private string script = String.Empty;

    private int time_scheduler_type = 0;
    private string time_scheduler_type_display = String.Empty;
    private int time_scheduler_seconds = 10;
    private int time_scheduler_minutes = 5;
    private int time_scheduler_hours = 1;
    private TimeSpan? time_scheduler_time = new TimeSpan(12, 00, 00);
    private DateTime? time_scheduler_date = DateTime.Now;
    private bool time_scheduler_monday = false;
    private bool time_scheduler_tuesday = false;
    private bool time_scheduler_wednesday = false;
    private bool time_scheduler_thursday = false;
    private bool time_scheduler_friday = false;
    private bool time_scheduler_saturday = false;
    private bool time_scheduler_sunday = false;

    public class Job
    {
        public string id { get; set; }
        public string name { get; set; }
        public string date { get; set; }
        public string last_run { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public string platform { get; set; }
        public string type { get; set; }
        public int script_id { get; set; }
        public string script { get; set; }

        public int time_scheduler_type { get; set; }
        public int time_scheduler_seconds { get; set; }
        public int time_scheduler_minutes { get; set; }
        public int time_scheduler_hours { get; set; }
        public string time_scheduler_time { get; set; }
        public string time_scheduler_date { get; set; }
        public bool time_scheduler_monday { get; set; }
        public bool time_scheduler_tuesday { get; set; }
        public bool time_scheduler_wednesday { get; set; }
        public bool time_scheduler_thursday { get; set; }
        public bool time_scheduler_friday { get; set; }
        public bool time_scheduler_saturday { get; set; }
        public bool time_scheduler_sunday { get; set; }
    }

    public class Script
    {
        public int id { get; set; }
        public string name { get; set; }
        public string date { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public string platform { get; set; }
        public string shell { get; set; }
        public string script { get; set; }
    }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private bool Form_Valid()
    {
        //human to computable time scheduler
        if (time_scheduler_type_display == Localizer["schedule_system_boot"])
            time_scheduler_type = 0;
        else if (time_scheduler_type_display == Localizer["schedule_date_time"])
            time_scheduler_type = 1;
        else if (time_scheduler_type_display == Localizer["schedule_x_seconds"])
            time_scheduler_type = 2;
        else if (time_scheduler_type_display == Localizer["schedule_x_minutes"])
            time_scheduler_type = 3;
        else if (time_scheduler_type_display == Localizer["schedule_x_hours"])
            time_scheduler_type = 4;
        else if (time_scheduler_type_display == Localizer["schedule_date_x_seconds"])
            time_scheduler_type = 5;
        else if (time_scheduler_type_display == Localizer["schedule_date_x_minutes"])
            time_scheduler_type = 6;
        else if (time_scheduler_type_display == Localizer["schedule_date_x_hours"])
            time_scheduler_type = 7;
        else if (time_scheduler_type_display == Localizer["schedule_days_x_time"])
        {
            time_scheduler_type = 8;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_thursday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;            
        }
        else if (time_scheduler_type_display == Localizer["schedule_days_x_seconds"])
        {   
            time_scheduler_type = 9;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_thursday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }
        else if (time_scheduler_type_display == Localizer["schedule_days_x_minutes"])
        {
            time_scheduler_type = 10;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_thursday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }
        else if (time_scheduler_type_display == Localizer["schedule_days_x_hours"])
        {
            time_scheduler_type = 11;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_thursday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }

        if (String.IsNullOrEmpty(job_name) || String.IsNullOrEmpty(type_display) || String.IsNullOrEmpty(script))
            return true;
        else
            return false;
    }

    private async Task Get_Scripts()
    {
        scripts_list = new List<Script>();
        scripts_list.Clear();

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            string query = "SELECT * FROM scripts WHERE platform = @platform AND shell = @shell;";
            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@platform", platform);
            command.Parameters.AddWithValue("@shell", type_display);

            Logging.Handler.Debug("/manage_jobs Add_Job_Dialog) -> Get_Scripts", "MySQL_Prepared_Query", query); //Output prepared query

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/manage_jobs Add_Job_Dialog) -> Get_Scripts", "MySQL_Result (json)", reader["json"].ToString() ?? String.Empty); //Output the JSON
                        Logging.Handler.Debug("/manage_jobs Add_Job_Dialog) -> Get_Scripts", "MySQL_Result (id)", reader["id"].ToString() ?? String.Empty); //Output the JSON

                        Script script = new Script
                        {
                            id = Convert.ToInt32(reader["id"].ToString()),
                            name = reader["name"].ToString() ?? String.Empty,
                            date = reader["date"].ToString() ?? String.Empty,
                            author = reader["author"].ToString() ?? String.Empty,
                            description = reader["description"].ToString() ?? String.Empty,
                            platform = reader["platform"].ToString() ?? String.Empty,
                            shell = reader["shell"].ToString() ?? String.Empty,
                            script = reader["script"].ToString() ?? String.Empty,
                        };

                        scripts_list.Add(script);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_jobs Add_Job_Dialog) -> Get_Scripts", "MySQL_Query", ex.Message);
        }
        finally
        {
            conn.Close();
            StateHasChanged();
        }
    }

    private async Task<int> Get_Script_ID(string name)
    {
        int id = 0;

        foreach (var _object in scripts_list)
        {
            if (_object.name == name)
            {
                id = _object.id;
                break;
            }
        }

        return id;
    }

    private async Task<string> Get_Script_Code(int id)
    {
        string script = String.Empty;

        foreach (var _object in scripts_list)
        {
            if (_object.id == id)
            {
                script = _object.script;
                break;
            }
        }

        return script;
    }

    private async Task OK()
    {
        Form_Valid();

        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            string type_converted = String.Empty;

            if (type_display == Localizer["script"])
                type_converted = Localizer["script"];
            else
                type_converted = type_display;

            int script_id = await Get_Script_ID(script);

            Job job_json = new Job
                {
                    id = Randomizer.Handler.Standard(6),
                    name = job_name,
                    date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                    author = netlock_username,
                    description = description,
                    platform = platform,
                    type = type_converted,
                    script_id = script_id,
                    script = await Base64.Handler.Encode(await Get_Script_Code(script_id)),

                    //time scheduler
                    time_scheduler_type = time_scheduler_type,
                    time_scheduler_seconds = time_scheduler_seconds,
                    time_scheduler_minutes = time_scheduler_minutes,
                    time_scheduler_hours = time_scheduler_hours,
                    time_scheduler_time = time_scheduler_time.ToString(),
                    time_scheduler_date = time_scheduler_date.ToString(),
                    time_scheduler_monday = time_scheduler_monday,
                    time_scheduler_tuesday = time_scheduler_tuesday,
                    time_scheduler_wednesday = time_scheduler_wednesday,
                    time_scheduler_thursday = time_scheduler_thursday,
                    time_scheduler_friday = time_scheduler_friday,
                    time_scheduler_saturday = time_scheduler_saturday,
                    time_scheduler_sunday = time_scheduler_sunday,
                };

            string scripts_json_string = JsonSerializer.Serialize(job_json, new JsonSerializerOptions { WriteIndented = true });

            //Save to MySQL
            await conn.OpenAsync();

            // Check if job already exists
            string query = "SELECT * FROM jobs WHERE name = @name;";
            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@name", job_name);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    this.Snackbar.Add(Localizer["already_exists"], Severity.Warning);
                    return;
                }
            }

            string execute_query = "INSERT INTO `jobs` (`name`, `date`, `author`, `description`, `platform`, `type`, `script_id`, `json`) VALUES (@name, @date, @author, @description, @platform, @type, @script_id, @json);";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@name", job_name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@author", await localStorage.GetItemAsync<string>("username"));
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@platform", platform);
            cmd.Parameters.AddWithValue("@type", type_converted);
            cmd.Parameters.AddWithValue("@script_id", script_id);
            cmd.Parameters.AddWithValue("@json", scripts_json_string);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_jobs Add_Job_Dialog) -> OK", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}