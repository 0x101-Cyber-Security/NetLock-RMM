@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Collections.Antivirus_Controlled_Folder_Access.Dialogs.Add_Process_Dialog> Localizer

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["add"]</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="@Localizer["name"]" T="string" @bind-Value="@name" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
        <MudTextField Label="@Localizer["application_path"]" T="string" @bind-Value="@process_path" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
        <MudTextField Label="@Localizer["description"]" T="string" @bind-Value="@description" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer["cancel"]</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">@Localizer["confirm"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string json { get; set; }


    protected override async Task OnInitializedAsync()
    {
        processes_json = json;
        Logging.Handler.Debug("/Policy_Settings (Add_Controlled_Folder_Access_Processes_Dialog) -> OnInitializedAsync", "processes_json", processes_json);
    }

    private string ruleset_name = String.Empty;
    private string processes_json = String.Empty;
    private string updatedJson = String.Empty;

    private string name = String.Empty;
    private string process_path = String.Empty;
    private string description = String.Empty;

    public class Processes
    {
        public string id { get; set; }
        public string name { get; set; }
        public string date { get; set; }
        public string description { get; set; }
        public string author { get; set; }
        public string process_path { get; set; }
        public string company { get; set; }
        public string product { get; set; }
        public string copyright { get; set; }
        public string brand { get; set; }
        public string product_version { get; set; }
        public string file_version { get; set; }
        public string file_sha1 { get; set; }
        public string file_md5 { get; set; }
        public string file_sha256 { get; set; }
        public string file_sha512 { get; set; }
        public string cert_owner { get; set; }
        public string cert_issuer { get; set; }
        public string cert_begin_date { get; set; }
        public string cert_end_date { get; set; }
        public string cert_public_key { get; set; }
        public string cert_serial_key { get; set; }
        public string cert_sha1 { get; set; }
    }

    private bool Form_Valid()
    {
        if (String.IsNullOrEmpty(name) || String.IsNullOrEmpty(process_path))
            return true;
        else
            return false;
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        try
        {
            // Get author from session storage
            var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
            var author = await sessionStorage.GetAsync<string>("username");

            List<Processes> processs = JsonSerializer.Deserialize<List<Processes>>(processes_json);

            // Check if process path already exists
            foreach (var _object in processs)
            {
                if (_object.process_path == process_path)
                {
                    this.Snackbar.Add(Localizer["process_path_already_exists"], Severity.Warning);
                    return;
                }
            }

            // Generate random id, six digits
            string id = Randomizer.Handler.Number(6);

            // Neue Ausnahme hinzufügen
            processs.Add(new Processes
                {
                    id = id,
                    name = name,
                    date = DateTime.Now.ToString("dd.MM.yyyy HH:mm:ss"),
                    description = description,
                    author = author.Value,
                    process_path = process_path,
                    company = "-",
                    product = "-",
                    copyright = "-",
                    brand = "-",
                    product_version = "-",
                    file_version = "-",
                    file_sha1 = "-",
                    file_md5 = "-",
                    file_sha256 = "-",
                    file_sha512 = "-",
                    cert_owner = "-",
                    cert_issuer = "-",
                    cert_begin_date = "-",
                    cert_end_date = "-",
                    cert_public_key = "-",
                    cert_serial_key = "-",
                    cert_sha1 = "-",
                });

            // Konvertieren der Liste in JSON
            updatedJson = JsonSerializer.Serialize(processs, new JsonSerializerOptions { WriteIndented = true });

            Logging.Handler.Debug("/Policy_Settings (Add_Controlled_Folder_Access_Processes_Dialog) -> OK", "Update existing JSON (updatedJson)", updatedJson);

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings (Add_Controlled_Folder_Access_Processes_Dialog) -> OK", "Update existing JSON", ex.ToString());
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok(updatedJson));
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}