@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Collections.Antivirus_Controlled_Folder_Access.Dialogs.Add_Ruleset_Dialog> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["add"]</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="@Localizer["name"]" T="string" @bind-Value="@name" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
        <MudTextField Label="@Localizer["description"]" T="string" @bind-Value="@description" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer["cancel"]</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">@Localizer["confirm"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private string netlock_username = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user from the authentication state
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        // Check if user is authenticated
        if (user?.Identity is not { IsAuthenticated: true })
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        // Retrieve username from claims
        netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;
    }

    private string name = String.Empty;
    private string description = String.Empty;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private bool Form_Valid()
    {
        if (String.IsNullOrEmpty(name))
            return true;
        else
            return false;
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        bool success = false;

        try
        {
            await conn.OpenAsync();

            // Check if the name already exists
            string check_query = "SELECT COUNT(*) FROM `antivirus_controlled_folder_access_rulesets` WHERE `name` = @name;";
            MySqlCommand check_cmd = new MySqlCommand(check_query, conn);
            check_cmd.Parameters.AddWithValue("@name", name);

            long count = (long)check_cmd.ExecuteScalar();

            if (count > 0)
            {
                this.Snackbar.Add(Localizer["already_exists"], Severity.Warning);
                return;
            }

            string execute_query = "INSERT INTO `antivirus_controlled_folder_access_rulesets` (`name`, `date`, `author`, `description`, `json`) VALUES (@name, @date, @author, @description, @json);";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@name", name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@author", netlock_username);
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@json", "[ ]");

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/rulesets_antivirus_controlled_folder_access -> Save_Policy (To DB)", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Configuration.ShowCloseIcon = true;
            this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Cancel());
        }
    }

    private void Cancel() => MudDialog.Cancel();
}