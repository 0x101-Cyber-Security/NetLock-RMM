@page "/controlled_folder_access_ruleset"
@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using OfficeOpenXml;
@using System.Xml.Serialization;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.DataProtection;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Collections.Antivirus_Controlled_Folder_Access.Ruleset> Localizer

<style>

    .selected-row-light {
        background-color: lightgray;
    }

    .selected-row-dark {
        background-color: #141414;
    }

    .custom-expansion-panel {
        background-color: transparent;
    }

    .dialog-blurring {
        backdrop-filter: blur(10px);
    }

    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }

    @@media only screen and (max-width: 768px) {
        .desktop-icon {
            display: none;
        }
    }
</style>

<AuthorizeView>
    <Authorized>
        
        @if (permissions_collections_antivirus_controlled_folder_access_enabled && permissions_collections_antivirus_controlled_folder_access_manage)
        {
            <MudText Typo="Typo.h5">@Localizer["title"]</MudText>
            <MudText Class="mt-0" Typo="Typo.h6">@Localizer["ruleset"]: @name</MudText>

            <MudButton Class="mt-5 mr-2" Size="Size.Small" Variant="Variant.Filled" Color="Color.Default" StartIcon="@Icons.Material.Filled.ArrowBack" Href="/controlled_folder_access_manage_rulesets">Zurück</MudButton>

            @if (permissions_collections_antivirus_controlled_folder_access_edit)
            {
                <MudButton Class="mt-5 mr-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Save_Ruleset" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save">@Localizer["save"]</MudButton>
            }

            @if (permissions_collections_antivirus_controlled_folder_access_edit)
            {
                <MudButton Class="mt-5 mr-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Edit_Ruleset_Dialog" Color="Color.Default" StartIcon="@Icons.Material.Filled.Edit">@Localizer["edit"]</MudButton>
            }

            @if (permissions_collections_antivirus_controlled_folder_access_delete)
            {
                <MudButton Class="mt-5" Size="Size.Small" Variant="Variant.Filled" OnClick="@Delete_Ruleset_Dialog" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete">@Localizer["delete"]</MudButton>
            }
            
            <MudPaper Class="mt-5">

                <MudText Class="ml-2 mt-3" Typo="Typo.h6">@Localizer["allowed_processes"]</MudText>

                @if (permissions_collections_antivirus_controlled_folder_access_processes_add)
                {
                    <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Add_Process_Dialog" Color="Color.Default" StartIcon="@Icons.Material.Filled.Add">@Localizer["add"]</MudButton>
                }

                @if (permissions_collections_antivirus_controlled_folder_access_processes_edit)
                {
                    <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@(() => Edit_Process_Dialog(antivirus_controlled_folder_access_processes_selectedRowContent))" Color="Color.Default" StartIcon="@Icons.Material.Filled.Edit" Disabled="Antivirus_Controlled_Folder_Access_Processes_Get_Row_Selected()">@Localizer["edit"]</MudButton>
                }

                @if (permissions_collections_antivirus_controlled_folder_access_processes_delete)
                {
                    <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@(() => Delete_Process_Dialog(antivirus_controlled_folder_access_processes_selectedRowContent))" Color="Color.Error" StartIcon="@Icons.Material.Filled.Recycling" Disabled="Antivirus_Controlled_Folder_Access_Processes_Get_Row_Selected()">@Localizer["delete"]</MudButton>
                }
                
                <MudTooltip Text="@Localizer["export_data"]">
                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Table_Dialog"></MudIconButton>
                </MudTooltip>

                <MudTable Class="mt-0" Height="70vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@antivirus_controlled_folder_access_processes_mysql_data" Filter="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, bool>(Antivirus_Controlled_Folder_Access_Processes_Table_Filter_Func)">
                    <ToolBarContent>
                        <MudTextField @bind-Value="antivirus_controlled_folder_access_processes_table_search_string" Placeholder="@Localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.name)">@Localizer["name"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.date)">@Localizer["date"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.description)">@Localizer["description"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.author)">Author</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.process_path)">@Localizer["application_path"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.company)">@Localizer["company"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.product)">@Localizer["product"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.copyright)">@Localizer["copyright"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.brand)">@Localizer["brand"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.product_version)">@Localizer["product_version"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.file_version)">@Localizer["file_version"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.file_sha1)">@Localizer["file_sha1"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.file_md5)">@Localizer["file_md5"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.file_sha256)">@Localizer["file_sha256"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.file_sha512)">@Localizer["file_sha512"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.cert_owner)">@Localizer["cert_owner"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.cert_issuer)">@Localizer["cert_issuer"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.cert_begin_date)">@Localizer["cert_begin_date"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.cert_end_date)">@Localizer["cert_end_date"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.cert_public_key)">@Localizer["cert_public_key"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.cert_serial_key)">@Localizer["cert_serial_key"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Processes_Entity, object>(x => x.cert_sha1)">@Localizer["cert_sha1"]</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="antivirus_controlled_folder_access_processes_row">

                        <MudTd DataLabel="@Localizer["name"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.name
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["date"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.date
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["description"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.description
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Author" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.author
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["application_path"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.process_path
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["company"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.company
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["product"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.product
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Copyright" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.copyright
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["brand"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.brand
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["product_version"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.product_version
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["file_version"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.file_version
                            </span>
                        </MudTd>

                        <MudTd DataLabel="SHA1" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.file_sha1
                            </span>
                        </MudTd>

                        <MudTd DataLabel="MD5" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.file_md5
                            </span>
                        </MudTd>

                        <MudTd DataLabel="SHA256" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.file_sha256
                            </span>
                        </MudTd>

                        <MudTd DataLabel="SHA512" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.file_sha512
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["cert_owner"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.cert_owner
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["cert_issuer"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.cert_issuer
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["cert_begin_date"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.cert_begin_date
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["cert_end_date"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.cert_end_date
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["cert_public_key"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.cert_public_key
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["cert_serial_key"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.cert_serial_key
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["cert_sha1"]" @onclick="() => Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(antivirus_controlled_folder_access_processes_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(antivirus_controlled_folder_access_processes_row)" class="@Antivirus_Controlled_Folder_Access_Processes_GetRowClass(antivirus_controlled_folder_access_processes_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@antivirus_controlled_folder_access_processes_row.cert_sha1
                            </span>
                        </MudTd>

                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["rows_per_site"]" />
                    </PagerContent>
                </MudTable>

            </MudPaper>
        }

    </Authorized>
 </AuthorizeView>

@code {

    #region Permissions System

    private string permissions_json = String.Empty;
    private string permissions_tenants_json = String.Empty;
    public static List<string> permissions_tenants_list = new List<string> { };

    private bool permissions_collections_enabled = false;
    private bool permissions_collections_antivirus_controlled_folder_access_enabled = false;
    private bool permissions_collections_antivirus_controlled_folder_access_add = false;
    private bool permissions_collections_antivirus_controlled_folder_access_manage = false;
    private bool permissions_collections_antivirus_controlled_folder_access_edit = false;
    private bool permissions_collections_antivirus_controlled_folder_access_delete = false;
    private bool permissions_collections_antivirus_controlled_folder_access_processes_add = false;
    private bool permissions_collections_antivirus_controlled_folder_access_processes_edit = false;
    private bool permissions_collections_antivirus_controlled_folder_access_processes_delete = false;

    public class Permissions_Tenants_Activation_State
    {
        public string id { get; set; } = String.Empty;
    }

    private async Task Get_Permissions()
    {
        //Extract user info from users session storage
        var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
        var username = await sessionStorage.GetAsync<string>("username");
        var password = await sessionStorage.GetAsync<string>("password");

        Logging.Handler.Debug("/controlled_folder_access_ruleset -> Permissions_Load", "username", username.Value ?? String.Empty);

        //if user info empty, force logout
        if (String.IsNullOrEmpty(username.Value) || String.IsNullOrEmpty(password.Value))
        {
            Logging.Handler.Debug("/controlled_folder_access_ruleset -> Permissions_Load", "sessions storage data", "empty, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Check if user info is valid, if not, force logout
        if (!await Classes.Authentication.User.Verify_User(username.Value ?? String.Empty, password.Value ?? String.Empty))
        {
            Logging.Handler.Debug("/controlled_folder_access_ruleset -> Permissions_Load", "verify user", "incorrect data, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Get permissions
        string query = "SELECT * FROM `accounts` WHERE username = @username;";

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@username", username.Value);

            Logging.Handler.Debug("/controlled_folder_access_ruleset -> Permissions_Load", "query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        permissions_json = reader["permissions"].ToString() ?? String.Empty;
                        permissions_tenants_json = reader["tenants"].ToString() ?? String.Empty;
                    }
                }
            }

            Logging.Handler.Debug("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json", permissions_json);

            //Extract permissions
            if (!String.IsNullOrEmpty(permissions_json))
            {
                using (JsonDocument document = JsonDocument.Parse(permissions_json))
                {
                    //collections_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("collections_enabled");
                        permissions_collections_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json (collections_enabled)", ex.Message);
                    }

                    //collections_antivirus_controlled_folder_access_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("collections_antivirus_controlled_folder_access_enabled");
                        permissions_collections_antivirus_controlled_folder_access_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json (collections_antivirus_controlled_folder_access_enabled)", ex.Message);
                    }

                    //collections_antivirus_controlled_folder_access_add
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("collections_antivirus_controlled_folder_access_add");
                        permissions_collections_antivirus_controlled_folder_access_add = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json (collections_antivirus_controlled_folder_access_add)", ex.Message);
                    }

                    //collections_antivirus_controlled_folder_access_manage
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("collections_antivirus_controlled_folder_access_manage");
                        permissions_collections_antivirus_controlled_folder_access_manage = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json (collections_antivirus_controlled_folder_access_manage)", ex.Message);
                    }

                    //collections_antivirus_controlled_folder_access_edit
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("collections_antivirus_controlled_folder_access_edit");
                        permissions_collections_antivirus_controlled_folder_access_edit = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json (collections_antivirus_controlled_folder_access_edit)", ex.Message);
                    }

                    //collections_antivirus_controlled_folder_access_delete
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("collections_antivirus_controlled_folder_access_delete");
                        permissions_collections_antivirus_controlled_folder_access_delete = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json (collections_antivirus_controlled_folder_access_delete)", ex.Message);
                    }

                    //collections_antivirus_controlled_folder_access_processes_add
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("collections_antivirus_controlled_folder_access_processes_add");
                        permissions_collections_antivirus_controlled_folder_access_processes_add = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json (collections_antivirus_controlled_folder_access_processes_add)", ex.Message);
                    }

                    //collections_antivirus_controlled_folder_access_processes_edit
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("collections_antivirus_controlled_folder_access_processes_edit");
                        permissions_collections_antivirus_controlled_folder_access_processes_edit = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json (collections_antivirus_controlled_folder_access_processes_edit)", ex.Message);
                    }

                    //collections_antivirus_controlled_folder_access_processes_delete
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("collections_antivirus_controlled_folder_access_processes_delete");
                        permissions_collections_antivirus_controlled_folder_access_processes_delete = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json (collections_antivirus_controlled_folder_access_processes_delete)", ex.Message);
                    }
                }
            }
            else if (permissions_json == "[]")
            {
                Logging.Handler.Debug("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }
            else
            {
                Logging.Handler.Debug("/controlled_folder_access_ruleset -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }

            //Extract tenants from json
            permissions_tenants_list.Clear();
            if (!String.IsNullOrEmpty(permissions_tenants_json))
            {
                //Set the activation state for the tenants
                try
                {
                    List<Permissions_Tenants_Activation_State> tenants_activation_state_list = JsonSerializer.Deserialize<List<Permissions_Tenants_Activation_State>>(permissions_tenants_json);

                    foreach (var tenant in tenants_activation_state_list)
                    {
                        Logging.Handler.Debug("/controlled_folder_access_ruleset -> Permissions_Load", "foreach tenant", tenant.id);

                        permissions_tenants_list.Add(tenant.id);
                    }
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/controlled_folder_access_ruleset -> Permissions_Load (permissions_tenants_json deserialize)", "Result", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Debug("/controlled_folder_access_ruleset -> Permissions_Load (permissions_tenants_json deserialize)", "Result", "Empty");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/controlled_folder_access_ruleset -> Permissions_Load", "general_error (force logout)", ex.Message);
            NavigationManager.NavigateTo("/logout", true);
        }
        finally
        {
            conn.Close();
        }
    }

    #endregion

    private bool _isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        await Get_Permissions();
        //Check permissions
        if (!permissions_collections_enabled || !permissions_collections_antivirus_controlled_folder_access_enabled || !permissions_collections_antivirus_controlled_folder_access_manage)
        {
            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        _isDarkMode = await JSRuntime.InvokeAsync<bool>("isDarkMode");

        id = await localStorage.GetItemAsync<string>("antivirus_controlled_folder_access_id");

        await Load_Ruleset();
        StateHasChanged();
    }

    private string id = String.Empty;
    private string name = String.Empty;
    private string antivirus_controlled_folder_access_processes_json = String.Empty;

    private async Task Load_Ruleset()
    {
        string query = "SELECT * FROM antivirus_controlled_folder_access_rulesets WHERE id = @id;";

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@id", id);

            Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "MySQL_Prepared_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        name = reader["name"].ToString() ?? String.Empty;
                        antivirus_controlled_folder_access_processes_json = reader["json"].ToString() ?? String.Empty;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/rulesets_antivirus_controlled_folder_access -> Load_Policy (DB)", "MySQL_Query", ex.ToString());
        }
        finally
        {
            conn.Close();
        }

        Logging.Handler.Debug("/rulesets_antivirus_controlled_folder_access -> Load_Policy", "JSON (antivirus_controlled_folder_access_processes_json)", antivirus_controlled_folder_access_processes_json);

        await Antivirus_Controlled_Folder_Access_Processes_Load();
    }

    private async Task Save_Ruleset()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        bool success = false;

        try
        {
            await conn.OpenAsync();

            string execute_query = "UPDATE antivirus_controlled_folder_access_rulesets SET json = @json WHERE id = @id;";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@id", id);
            cmd.Parameters.AddWithValue("@json", antivirus_controlled_folder_access_processes_json);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/rulesets_antivirus_controlled_folder_access -> Save_Ruleset (To DB)", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            await Classes.MySQL.Database.Reset_Device_Sync(true, String.Empty);
        }
        else
        {
            this.Snackbar.Add(@Localizer["error_occurred"], Severity.Error);
        }

        Snackbar.Add(@Localizer["saved"], Severity.Success);
    }

    #region Antivirus Controlled Folder Access Processes

    public List<Antivirus_Controlled_Folder_Access_Processes_Entity> antivirus_controlled_folder_access_processes_mysql_data;

    public class Antivirus_Controlled_Folder_Access_Processes_Entity
    {
        public string id { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string process_path { get; set; } = String.Empty;
        public string company { get; set; } = String.Empty;
        public string product { get; set; } = String.Empty;
        public string copyright { get; set; } = String.Empty;
        public string brand { get; set; } = String.Empty;
        public string product_version { get; set; } = String.Empty;
        public string file_version { get; set; } = String.Empty;
        public string file_sha1 { get; set; } = String.Empty;
        public string file_md5 { get; set; } = String.Empty;
        public string file_sha256 { get; set; } = String.Empty;
        public string file_sha512 { get; set; } = String.Empty;
        public string cert_owner { get; set; } = String.Empty;
        public string cert_issuer { get; set; } = String.Empty;
        public string cert_begin_date { get; set; } = String.Empty;
        public string cert_end_date { get; set; } = String.Empty;
        public string cert_public_key { get; set; } = String.Empty;
        public string cert_serial_key { get; set; } = String.Empty;
        public string cert_sha1 { get; set; } = String.Empty;
    }

    private string antivirus_controlled_folder_access_processes_table_view_port = "70vh";
    private string antivirus_controlled_folder_access_processes_table_sorted_column;
    private string antivirus_controlled_folder_access_processes_table_search_string = "";

    private bool Antivirus_Controlled_Folder_Access_Processes_Table_Filter_Func(Antivirus_Controlled_Folder_Access_Processes_Entity row)
    {
        if (string.IsNullOrEmpty(antivirus_controlled_folder_access_processes_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.author.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.process_path.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.company.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.product.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.copyright.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.brand.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.product_version.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.file_version.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.file_sha1.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.file_md5.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.file_sha256.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.file_sha512.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cert_owner.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cert_issuer.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cert_begin_date.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cert_end_date.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cert_public_key.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cert_serial_key.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cert_sha1.Contains(antivirus_controlled_folder_access_processes_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string antivirus_controlled_folder_access_processes_selectedRowContent = String.Empty; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Antivirus_Controlled_Folder_Access_Processes_RowClickHandler(Antivirus_Controlled_Folder_Access_Processes_Entity row)
    {
        antivirus_controlled_folder_access_processes_selectedRowContent = row.id;
    }

    private async void Antivirus_Controlled_Folder_Access_Processes_RowDblClickHandler(Antivirus_Controlled_Folder_Access_Processes_Entity row)
    {
        antivirus_controlled_folder_access_processes_selectedRowContent = row.id;

        await Edit_Process_Dialog(row.id);
    }

    private string Antivirus_Controlled_Folder_Access_Processes_GetRowClass(Antivirus_Controlled_Folder_Access_Processes_Entity row)
    {
        return row.id == antivirus_controlled_folder_access_processes_selectedRowContent ? (_isDarkMode ? "selected-row-dark" : "selected-row-light") : String.Empty;
    }

    private bool Antivirus_Controlled_Folder_Access_Processes_Get_Row_Selected()
    {
        if (String.IsNullOrEmpty(antivirus_controlled_folder_access_processes_selectedRowContent) == false)
            return false;
        else
            return true;
    }

    private async Task Antivirus_Controlled_Folder_Access_Processes_Load()
    {
        try
        {
            antivirus_controlled_folder_access_processes_mysql_data = new List<Antivirus_Controlled_Folder_Access_Processes_Entity>();

            JsonArray antivirus_controlled_folder_access_folders_array = JsonNode.Parse(antivirus_controlled_folder_access_processes_json).AsArray();

            foreach (var _object in antivirus_controlled_folder_access_folders_array)
            {
                Antivirus_Controlled_Folder_Access_Processes_Entity antivirus_controlled_folder_access_folders_entity = new Antivirus_Controlled_Folder_Access_Processes_Entity
                    {
                        id = _object["id"].ToString(),
                        name = _object["name"].ToString(),
                        date = _object["date"].ToString(),
                        description = _object["description"].ToString(),
                        author = _object["author"].ToString(),
                        process_path = _object["process_path"].ToString(),
                        company = _object["company"].ToString(),
                        product = _object["product"].ToString(),
                        copyright = _object["copyright"].ToString(),
                        brand = _object["brand"].ToString(),
                        product_version = _object["product_version"].ToString(),
                        file_version = _object["file_version"].ToString(),
                        file_sha1 = _object["file_sha1"].ToString(),
                        file_md5 = _object["file_md5"].ToString(),
                        file_sha256 = _object["file_sha256"].ToString(),
                        file_sha512 = _object["file_sha512"].ToString(),
                        cert_owner = _object["cert_owner"].ToString(),
                        cert_issuer = _object["cert_issuer"].ToString(),
                        cert_begin_date = _object["cert_begin_date"].ToString(),
                        cert_end_date = _object["cert_end_date"].ToString(),
                        cert_public_key = _object["cert_public_key"].ToString(),
                        cert_serial_key = _object["cert_serial_key"].ToString(),
                        cert_sha1 = _object["cert_sha1"].ToString(),
                    };
                antivirus_controlled_folder_access_processes_mysql_data.Add(antivirus_controlled_folder_access_folders_entity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/rulesets_antivirus_controlled_folder_access -> Antivirus_Controlled_Folder_Access_Processes_Load", "Result", ex.ToString());
        }
    }

    private bool edit_ruleset_dialog_open = false;

    private async Task Edit_Ruleset_Dialog()
    {
        if (edit_ruleset_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("id", id);
        parameters.Add("name", name);

        edit_ruleset_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Collections.Antivirus_Controlled_Folder_Access.Dialogs.Edit_Ruleset_Dialog>(string.Empty, parameters, options).Result;

        edit_ruleset_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/rulesets_antivirus_controlled_folder_access -> Edit_Ruleset_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            name = result.Data.ToString();

            await Load_Ruleset();
        }
    }

    private bool delete_ruleset_dialog_open = false;

    private async Task Delete_Ruleset_Dialog()
    {
        if (delete_ruleset_dialog_open)
            return; 

        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            BackgroundClass = "dialog-blurring",
        };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("id", id);

        delete_ruleset_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Collections.Antivirus_Controlled_Folder_Access.Dialogs.Delete_Ruleset_Dialog>(string.Empty, parameters, options).Result;

        delete_ruleset_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/rulesets_antivirus_controlled_folder_access -> Delete_Ruleset_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
            NavigationManager.NavigateTo("/controlled_folder_access_manage_rulesets");
    }

    private bool add_process_dialog_open = false;

    private async Task Add_Process_Dialog()
    {
        if (add_process_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("json", antivirus_controlled_folder_access_processes_json);

        add_process_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Collections.Antivirus_Controlled_Folder_Access.Dialogs.Add_Process_Dialog>(string.Empty, parameters, options).Result;

        add_process_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/rulesets_antivirus_controlled_folder_access -> Add_Process_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_controlled_folder_access_processes_json = result.Data.ToString();

            await Antivirus_Controlled_Folder_Access_Processes_Load();
        }
    }

    private bool edit_process_dialog_open = false;

    private async Task Edit_Process_Dialog(string id)
    {
        if (edit_process_dialog_open)
            return;

        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            BackgroundClass = "dialog-blurring",
        };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("id", id);
        parameters.Add("json", antivirus_controlled_folder_access_processes_json);

        edit_process_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Collections.Antivirus_Controlled_Folder_Access.Dialogs.Edit_Process_Dialog>(string.Empty, parameters, options).Result;

        edit_process_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/rulesets_antivirus_controlled_folder_access -> Edit_Process_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_controlled_folder_access_processes_json = result.Data.ToString();

            await Antivirus_Controlled_Folder_Access_Processes_Load();
        }
    }

    private bool delete_process_dialog_open = false;

    private async Task Delete_Process_Dialog(string id)
    {
        if (delete_process_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("id", id);
        parameters.Add("antivirus_controlled_folder_access_processes_json", antivirus_controlled_folder_access_processes_json);

        delete_process_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Collections.Antivirus_Controlled_Folder_Access.Dialogs.Delete_Process_Dialog>(string.Empty, parameters, options).Result;

        delete_process_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/rulesets_antivirus_controlled_folder_access -> Delete_Exclusion_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_controlled_folder_access_processes_json = result.Data.ToString();

            await Antivirus_Controlled_Folder_Access_Processes_Load();
        }
    }

    #endregion

    #region Data_Export
    private async Task Trigger_Export_Table_Dialog()
    {
        await Export_Table_Dialog("antivirus_controlled_folder_access_ruleset");
    }

    private async Task Export_Table_Dialog(string type)
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",
            };

        var result = await this.DialogService.Show<Shared.Export_Data_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result != null && result.Data != null)
        {
            if (result.Data.ToString() == "JSON")
                await Export_Data_Json(type);
            else if (result.Data.ToString() == "Spreadsheet (.xlsx)")
                await Export_Data_Spreadsheet(type);
            else if (result.Data.ToString() == "HTML")
                await Export_Data_HTML(type);
        }
    }

    private async Task Export_Data_Json(string type)
    {
        try
        {
            string jsonContent = String.Empty;

            // Erstellen eines JSON-Strings aus den MudTable-Einträgen
            if (type == "antivirus_controlled_folder_access_ruleset")
                jsonContent = JsonSerializer.Serialize(antivirus_controlled_folder_access_processes_mysql_data, new JsonSerializerOptions { WriteIndented = true });

            // Aufruf der JavaScript-Funktion für den Export als .txt
            await JSRuntime.InvokeVoidAsync("exportToTxt", $"{type}.json", jsonContent);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/controlled_folder_access_manage_rulesets -> Export_Data_Json", "", ex.Message);
        }
    }

    public async Task Export_Data_HTML(string type)
    {
        try
        {
            StringBuilder htmlBuilder = new StringBuilder();

            if (type == "antivirus_controlled_folder_access_ruleset")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in antivirus_controlled_folder_access_processes_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in antivirus_controlled_folder_access_processes_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }

            htmlBuilder.Append("</table>");

            string htmlContent = htmlBuilder.ToString();

            // Hier wird JavaScript-Interop verwendet, um den HTML-Inhalt herunterzuladen
            await JSRuntime.InvokeVoidAsync("exportToTxt", $"{type}.html", htmlContent, "text/html");
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/controlled_folder_access_manage_rulesets -> Export_Data_HTML", "", ex.Message);
        }
    }

    private async Task Export_Data_Spreadsheet(string type)
    {
        try
        {
            using (var package = new ExcelPackage())
            {
                var worksheet = package.Workbook.Worksheets.Add("Sheet1");

                if (type == "antivirus_controlled_folder_access_ruleset")
                {
                    if (antivirus_controlled_folder_access_processes_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in antivirus_controlled_folder_access_processes_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in antivirus_controlled_folder_access_processes_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }

                var stream = new MemoryStream(package.GetAsByteArray());

                // Hier wird JavaScript-Interop verwendet, um die Datei herunterzuladen
                await JSRuntime.InvokeVoidAsync("saveAsSpreadSheet", $"{type}.xlsx", Convert.ToBase64String(stream.ToArray()));
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/controlled_folder_access_manage_rulesets -> Export_Data_Spreadsheet", "", ex.Message);
        }
    }
    #endregion
}