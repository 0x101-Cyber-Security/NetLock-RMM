@page "/controlled_folder_access_manage_rulesets"
@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using System.Xml.Serialization;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.DataProtection;
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Collections.Antivirus_Controlled_Folder_Access.Manage_Rulesets> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>

    .selected-row-light {
        background-color: lightgray;
    }

    .selected-row-dark {
        background-color: #141414;
    }

    .custom-expansion-panel {
        background-color: transparent;
    }

    .dialog-blurring {
        backdrop-filter: blur(10px);
    }

    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }

    @@media only screen and (max-width: 768px) {
        .desktop-icon {
            display: none;
        }
    }
</style>

<AuthorizeView>
    <Authorized>

        @if (permissions_collections_antivirus_controlled_folder_access_enabled)
        {
            <MudText Typo="Typo.h5">@Localizer["title"]</MudText>

            @if (permissions_collections_antivirus_controlled_folder_access_add)
            {
                <MudButton Class="mt-5 mr-2" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="Show_Add_Ruleset_Dialog">@Localizer["add"]</MudButton>
            }

            @if (permissions_collections_antivirus_controlled_folder_access_manage)
            {
                <MudButton Class="mt-5" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => Update_Selected_Ruleset(rulesets_selectedRowContent))">@Localizer["manage"]</MudButton>
            }

            <MudTooltip Text="@Localizer["export_data"]">
                <MudIconButton Class="ml-2 mt-5 mr-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" OnClick="Trigger_Export_Table_Dialog"></MudIconButton>
            </MudTooltip>

            <MudTable Class="mt-5" Height="@rulesets_table_view_port" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@rulesets_mysql_data" Filter="new Func<Ruleset_Entity, bool>(Rulesets_Table_Filter_Func)">
                <ToolBarContent>
                    <MudTextField @bind-Value="rulesets_table_search_string" Placeholder="@Localizer["search"]"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<Ruleset_Entity, object>(x => x.name)">@Localizer["name"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Ruleset_Entity, object>(x => x.description)">@Localizer["description"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Ruleset_Entity, object>(x => x.author)">Author</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Ruleset_Entity, object>(x => x.date)">@Localizer["date"]</MudTableSortLabel></MudTh>
                </HeaderContent>

                <RowTemplate Context="rulesets_row">
                    <MudTd DataLabel="@Localizer["name"]" @onclick="() => Rulesets_RowClickHandler(rulesets_row)" @ondblclick="() => Rulesets_RowDblClickHandler(rulesets_row)"
                           class="@Rulesets_GetRowClass(rulesets_row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Title" Size="Size.Small" />&nbsp;@rulesets_row.name
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["description"]" @onclick="() => Rulesets_RowClickHandler(rulesets_row)" @ondblclick="() => Rulesets_RowDblClickHandler(rulesets_row)"
                           class="@Rulesets_GetRowClass(rulesets_row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" />&nbsp;@rulesets_row.description
                        </span>
                    </MudTd>

                    <MudTd DataLabel="Author" @onclick="() => Rulesets_RowClickHandler(rulesets_row)" @ondblclick="() => Rulesets_RowDblClickHandler(rulesets_row)"
                           class="@Rulesets_GetRowClass(rulesets_row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Small" />&nbsp;@rulesets_row.author
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["date"]" @onclick="() => Rulesets_RowClickHandler(rulesets_row)" @ondblclick="() => Rulesets_RowDblClickHandler(rulesets_row)"
                           class="@Rulesets_GetRowClass(rulesets_row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />&nbsp;@rulesets_row.date
                        </span>
                    </MudTd>

                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["rows_per_site"]" />
                </PagerContent>
            </MudTable>

        }

    </Authorized>
</AuthorizeView>

@code {

    #region Permissions System

    private string permissions_json = String.Empty;

    private bool permissions_collections_enabled = false;
    private bool permissions_collections_antivirus_controlled_folder_access_enabled = false;
    private bool permissions_collections_antivirus_controlled_folder_access_add = false;
    private bool permissions_collections_antivirus_controlled_folder_access_manage = false;

    private async Task<bool> Permissions()
    {
        try
        {
            bool logout = false;

            // Get the current user from the authentication state
            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

            // Check if user is authenticated
            if (user?.Identity is not { IsAuthenticated: true })
                logout = true;

            string netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;

            permissions_collections_enabled = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "collections_enabled");

            if (!permissions_collections_enabled)
                logout = true;

            if (logout) // Redirect to the login page
            {
                NavigationManager.NavigateTo("/logout", true);
                return false;
            }

            // Load other permissions here
            permissions_collections_antivirus_controlled_folder_access_enabled = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "collections_antivirus_controlled_folder_access_add");
            permissions_collections_antivirus_controlled_folder_access_add = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "collections_antivirus_controlled_folder_access_add");
            permissions_collections_antivirus_controlled_folder_access_manage = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "collections_antivirus_controlled_folder_access_manage");

            // All fine? Nice.
            return true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Permissions", "Error", ex.ToString());
            return false;
        }
    }

    #endregion

    private bool _isDarkMode;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        if (!await Permissions())
            return;

        _isDarkMode = await JSRuntime.InvokeAsync<bool>("isDarkMode");

        await Get_Ruleset_Overview();

        StateHasChanged();
    }

    public List<Ruleset_Entity> rulesets_mysql_data;

    public class Ruleset_Entity
    {
        public string id { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
    }

    private string rulesets_table_view_port = "70vh";
    private string rulesets_table_sorted_column;
    private string rulesets_table_search_string = "";

    private bool Rulesets_Table_Filter_Func(Ruleset_Entity row)
    {
        if (string.IsNullOrEmpty(rulesets_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(rulesets_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.date.Contains(rulesets_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.author.Contains(rulesets_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.description.Contains(rulesets_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string rulesets_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Rulesets_RowClickHandler(Ruleset_Entity row)
    {
        rulesets_selectedRowContent = row.id;
    }

    // Handler for double-clicking on a line    
    private async void Rulesets_RowDblClickHandler(Ruleset_Entity row)
    {
        rulesets_selectedRowContent = row.id;

        await Update_Selected_Ruleset(row.id);
    }

    // Dynamische CSS-Klasse für die ausgewählte Zeile (abhängig vom Modus)
    private string Rulesets_GetRowClass(Ruleset_Entity row)
    {
        // Überprüfe, ob die aktuelle Zeile die ausgewählte ist
        return row.id == rulesets_selectedRowContent ? (_isDarkMode ? "selected-row-dark" : "selected-row-light") : String.Empty;
    }

    private async Task Get_Ruleset_Overview()
    {
        rulesets_mysql_data = new List<Ruleset_Entity>();

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM antivirus_controlled_folder_access_rulesets;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Ruleset_Entity entity = new Ruleset_Entity
                            {
                                id = reader["id"].ToString() ?? String.Empty,
                                name = reader["name"].ToString() ?? String.Empty,
                                description = reader["description"].ToString() ?? String.Empty,
                                author = reader["author"].ToString() ?? String.Empty,
                                date = reader["date"].ToString() ?? String.Empty,
                            };

                        rulesets_mysql_data.Add(entity);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("class", "Get_Ruleset_Overview", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }

    private async Task Update_Selected_Ruleset(string id)
    {
        await localStorage.SetItemAsync("antivirus_controlled_folder_access_id", id);

        NavigationManager.NavigateTo("/controlled_folder_access_ruleset");
    }

    private bool add_ruleset_dialog_open = false;


    private async Task Show_Add_Ruleset_Dialog()
    {
        if (add_ruleset_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",
            };

        add_ruleset_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Collections.Antivirus_Controlled_Folder_Access.Dialogs.Add_Ruleset_Dialog>(string.Empty, new DialogParameters(), options).Result;

        add_ruleset_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/controlled_folder_access_manage_rulesets -> Show_Add_Ruleset_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            await Get_Ruleset_Overview();
        }
    }

    #region Data_Export
    private async Task Trigger_Export_Table_Dialog()
    {
        await Export_Table_Dialog("antivirus_controlled_folder_access_rulesets");
    }

    private async Task Export_Table_Dialog(string type)
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",
            };

        var result = await this.DialogService.Show<Shared.Export_Data_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result != null && result.Data != null)
        {
            if (result.Data.ToString() == "JSON")
                await Export_Data_Json(type);
            else if (result.Data.ToString() == "HTML")
                await Export_Data_HTML(type);
        }
    }

    private async Task Export_Data_Json(string type)
    {
        try
        {
            string jsonContent = String.Empty;

            // Erstellen eines JSON-Strings aus den MudTable-Einträgen
            if (type == "antivirus_controlled_folder_access_rulesets")
                jsonContent = JsonSerializer.Serialize(rulesets_mysql_data, new JsonSerializerOptions { WriteIndented = true });

            // Aufruf der JavaScript-Funktion für den Export als .txt
            await JSRuntime.InvokeVoidAsync("exportToTxt", $"{type}.json", jsonContent);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/controlled_folder_access_manage_rulesets -> Export_Data_Json", "", ex.Message);
        }
    }

    public async Task Export_Data_HTML(string type)
    {
        try
        {
            StringBuilder htmlBuilder = new StringBuilder();

            if (type == "antivirus_controlled_folder_access_rulesets")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in rulesets_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in rulesets_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }

            htmlBuilder.Append("</table>");

            string htmlContent = htmlBuilder.ToString();

            // Hier wird JavaScript-Interop verwendet, um den HTML-Inhalt herunterzuladen
            await JSRuntime.InvokeVoidAsync("exportToTxt", $"{type}.html", htmlContent, "text/html");
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/controlled_folder_access_manage_rulesets -> Export_Data_HTML", "", ex.Message);
        }
    }

    #endregion
}
