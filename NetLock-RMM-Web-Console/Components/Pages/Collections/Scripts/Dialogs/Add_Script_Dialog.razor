@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Collections.Scripts.Dialogs.Add_Script_Dialog> Localizer

<style>

    .monaco-editor {
        flex-grow: 1;
        height: 100vh;
        width: 100%; /* Each editor takes half of the screen width */
    }

</style>

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["add"]</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="@Localizer["name"]" T="string" @bind-Value="@script_name" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
        <MudTextField Label="@Localizer["description"]" T="string" @bind-Value="@description" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" />

        <MudSelect Class="mt-3" T="string" @bind-Value="platform" @bind-Value:after=@StateHasChanged Label="@Localizer["platform"]" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Windows")" />
            <MudSelectItem Value="@("System")" />
        </MudSelect>

        <MudSelect Class="mt-3" T="string" @bind-Value="shell" Label="Shell" AnchorOrigin="Origin.BottomCenter">
            @if (platform == "Windows")
            {
                shell = "PowerShell";
                <MudSelectItem Value="@("PowerShell")" />
            }
            else if (platform == "System")
            {
                shell = "MySQL";
                <MudSelectItem Value="@("MySQL")" />
            }
        </MudSelect>

        @{
            if (platform == "Windows")
            {
                if (shell == "PowerShell")
                {
                    <MudSelect Class="mt-3 mb-3" T="string" @bind-Value="collection_script_name" @bind-Value:after="async () => await Get_Script(collection_script_name, platform, shell)" Label="Templates" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var s in scripts)
                        {
                            <MudSelectItem Value="@s" />
                        }
                    </MudSelect>

                    <StandaloneCodeEditor Id="powershell-editor" CssClass="monaco-editor" @ref="script_editor" ConstructionOptions="Editor_Construction_Options" OnDidChangeModelContent="Editor_Handle_Input" />
                }
            }
            else if (platform == "System")
            {
                if (shell == "MySQL")
                {
                    <StandaloneCodeEditor Id="powershell-editor" CssClass="monaco-editor" @ref="script_editor" ConstructionOptions="Editor_Construction_Options" OnDidChangeModelContent="Editor_Handle_Input" />
                }
            }
        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer["cancel"]</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">@Localizer["confirm"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await Get_Scripts();
    }

    private string updatedJson = String.Empty;

    private string script_name = String.Empty;
    private string description = String.Empty;
    private string platform = "Windows";
    private string shell = "PowerShell";
    private string script = String.Empty;

    public class Script
    {
        public string name { get; set; }
        public string date { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public string platform { get; set; }
        public string shell { get; set; }
        public string script { get; set; }
    }

    private bool Form_Valid()
    {
        if (String.IsNullOrEmpty(script_name))
            return true;
        else
            return false;
    }

    private StandaloneCodeEditor script_editor = null!;

    private StandaloneEditorConstructionOptions Editor_Construction_Options(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
	    {
		    AutomaticLayout = true,
            Theme = "vs-dark",
		    Language = "powershell",
		    //Value = @"New-Item -ItemType File -Path 'C:\Test.txt\' | Set-Content -Value 'Dies ist ein Test'"
	    };
    }

    private async Task Editor_Handle_Input(ModelContentChangedEvent e)
    {
        script = await script_editor.GetValue();
    }

    private List<string> scripts = new List<string>();

    private string collection_script_name = String.Empty;
    private string collection_script = String.Empty;

    private async Task Get_Scripts()
    {
        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            string query = "SELECT * FROM scripts;";
            MySqlCommand cmd = new MySqlCommand(query, conn);

            using (DbDataReader reader = await cmd.ExecuteReaderAsync())
            {
                while (await reader.ReadAsync())
                {
                    scripts.Add(reader["name"].ToString() ?? String.Empty);
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Add_Script_Dialog) -> Get_Scripts", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }   
    }

    private async Task Get_Script(string name, string platform, string shell)
    {
        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            string query = "SELECT * FROM scripts WHERE platform = @platform AND shell = @shell AND name = @name;";
            MySqlCommand cmd = new MySqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@name", name);
            cmd.Parameters.AddWithValue("@platform", platform);
            cmd.Parameters.AddWithValue("@shell", shell);

            using (DbDataReader reader = await cmd.ExecuteReaderAsync())
            {
                while (await reader.ReadAsync())
                {
                    await script_editor.SetValue(reader["script"].ToString() ?? String.Empty);
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Add_Script_Dialog) -> Get_Script", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {  
            // Get author from session storage
            var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
            var author = await sessionStorage.GetAsync<string>("username");

            Script script_json = new Script
            {
                name = script_name,
                date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                author = "",
                description = description,
                platform = platform,
                shell = shell,
                script = script,
            };

            string scripts_json_string = JsonSerializer.Serialize(script_json, new JsonSerializerOptions { WriteIndented = true });

            //Save to MySQL
            await conn.OpenAsync();

            // Check if the name already exists
            string check_query = "SELECT COUNT(*) FROM `scripts` WHERE `name` = @name;";
            MySqlCommand check_cmd = new MySqlCommand(check_query, conn);
            check_cmd.Parameters.AddWithValue("@name", script_name);

            long count = (long)check_cmd.ExecuteScalar();

            if (count > 0)
            {
                this.Snackbar.Add(Localizer["already_exists"], Severity.Warning);
                return;
            }

            string execute_query = "INSERT INTO `scripts` (`name`, `date`, `author`, `description`, `platform`, `shell`, `script`, `json`) VALUES (@name, @date, @author, @description, @platform, @shell, @script, @json);";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@name", script_name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@author", await localStorage.GetItemAsync<string>("username"));
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@platform", platform);
            cmd.Parameters.AddWithValue("@shell", shell);
            cmd.Parameters.AddWithValue("@script", script);
            cmd.Parameters.AddWithValue("@json", scripts_json_string);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Add_Script_Dialog) -> OK", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}