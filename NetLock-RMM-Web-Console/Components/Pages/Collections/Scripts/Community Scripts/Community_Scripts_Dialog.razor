@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Net.Http.Headers

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Collections.Scripts.Dialogs.Add_Script_Dialog> Localizer

<style>
    .dialog-blurring {
    backdrop-filter: blur(10px);
    }
</style>

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Community Scripts</MudText>
    </TitleContent>
    <DialogContent>

        <MudTable Class="mt-5" Height="60vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@scripts_mysql_data" Filter="new Func<Scripts_Entity, bool>(Scripts_Table_Filter_Func)">
            <ToolBarContent>
                <MudTextField Class="mt-0" @bind-Value="scripts_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh @onclick="() => scripts_table_sorted_column = (nameof(Scripts_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                <MudTh @onclick="() => scripts_table_sorted_column = (nameof(Scripts_Entity.description))" style="white-space: nowrap;">Description</MudTh>
                <MudTh @onclick="() => scripts_table_sorted_column = (nameof(Scripts_Entity.maintainer))" style="white-space: nowrap;">Maintainer</MudTh>
                <MudTh @onclick="() => scripts_table_sorted_column = (nameof(Scripts_Entity.contact))" style="white-space: nowrap;">Contact</MudTh>
                <MudTh @onclick="() => scripts_table_sorted_column = (nameof(Scripts_Entity.created))" style="white-space: nowrap;">Created</MudTh>
                <MudTh @onclick="() => scripts_table_sorted_column = (nameof(Scripts_Entity.last_edited))" style="white-space: nowrap;">Last edited</MudTh>
                <MudTh @onclick="() => scripts_table_sorted_column = (nameof(Scripts_Entity.platform))" style="white-space: nowrap;">Platform</MudTh>
                <MudTh @onclick="() => scripts_table_sorted_column = (nameof(Scripts_Entity.shell))" style="white-space: nowrap;">Shell</MudTh>
            </HeaderContent>

            <RowTemplate Context="scripts_row">

                <MudTd DataLabel="Name" @onclick="() => Scripts_RowClickHandler(scripts_row)" @ondblclick="() => Scripts_RowDblClickHandler(scripts_row)" class="@Scripts_GetRowClass(scripts_row)" style="white-space: nowrap;">
                    <span style="display: flex; align-items: center;">
                        &nbsp;@scripts_row.name
                    </span>
                </MudTd>

                <MudTd DataLabel="Description" @onclick="() => Scripts_RowClickHandler(scripts_row)" @ondblclick="() => Scripts_RowDblClickHandler(scripts_row)" class="@Scripts_GetRowClass(scripts_row)" style="white-space: nowrap;">
                    <span style="display: flex; align-items: center;">
                        &nbsp;@scripts_row.description
                    </span>
                </MudTd>

                <MudTd DataLabel="Author" @onclick="() => Scripts_RowClickHandler(scripts_row)" @ondblclick="() => Scripts_RowDblClickHandler(scripts_row)" class="@Scripts_GetRowClass(scripts_row)" style="white-space: nowrap;">
                    <span style="display: flex; align-items: center;">
                        &nbsp;@scripts_row.maintainer
                    </span>
                </MudTd>

                <MudTd DataLabel="Contact" @onclick="() => Scripts_RowClickHandler(scripts_row)" @ondblclick="() => Scripts_RowDblClickHandler(scripts_row)" class="@Scripts_GetRowClass(scripts_row)" style="white-space: nowrap;">
                    <span style="display: flex; align-items: center;">
                        &nbsp;@scripts_row.contact
                    </span>
                </MudTd>

                <MudTd DataLabel="Created" @onclick="() => Scripts_RowClickHandler(scripts_row)" @ondblclick="() => Scripts_RowDblClickHandler(scripts_row)" class="@Scripts_GetRowClass(scripts_row)" style="white-space: nowrap;">
                    <span style="display: flex; align-items: center;">
                        &nbsp;@scripts_row.created
                    </span>
                </MudTd>

                <MudTd DataLabel="Last edited" @onclick="() => Scripts_RowClickHandler(scripts_row)" @ondblclick="() => Scripts_RowDblClickHandler(scripts_row)" class="@Scripts_GetRowClass(scripts_row)" style="white-space: nowrap;">
                    <span style="display: flex; align-items: center;">
                        &nbsp;@scripts_row.last_edited
                    </span>
                </MudTd>

                <MudTd DataLabel="Platform" @onclick="() => Scripts_RowClickHandler(scripts_row)" @ondblclick="() => Scripts_RowDblClickHandler(scripts_row)" class="@Scripts_GetRowClass(scripts_row)" style="white-space: nowrap;">
                    <span style="display: flex; align-items: center;">
                        &nbsp;@scripts_row.platform
                    </span>
                </MudTd>

                <MudTd DataLabel="Shell" @onclick="() => Scripts_RowClickHandler(scripts_row)" @ondblclick="() => Scripts_RowDblClickHandler(scripts_row)" class="@Scripts_GetRowClass(scripts_row)" style="white-space: nowrap;">
                    <span style="display: flex; align-items: center;">
                        &nbsp;@scripts_row.shell
                    </span>
                </MudTd>

            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Rows per page" />
            </PagerContent>
        </MudTable>

        @{
            if (loading_overlay)
            {
                <MudProgressLinear Class="mt-2 mb-2" Size="Size.Medium" Color="Color.Info" Indeterminate="true">
                    <MudText Typo="Typo.body1">Please wait.</MudText>
                </MudProgressLinear>
            }
        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    private string api_key = String.Empty;
    private bool loading_overlay = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        // Get API Key
        api_key = await Classes.MySQL.Handler.Get_Api_Key();

        await Get_Community_Scripts();

        StateHasChanged();
    }

    private List<Scripts_Entity> scripts_mysql_data = new List<Scripts_Entity>();

    private class Scripts_Entity
    {
        public string? guid { get; set; }
        public string? created { get; set; }
        public string? last_edited { get; set; }
        public string? maintainer { get; set; }
        public string? contact { get; set; }
        public bool? is_admin { get; set; }
        public string? name { get; set; }
        public string? description { get; set; }
        public string? platform { get; set; }
        public string? shell { get; set; }
        public string? script { get; set; }
    }

    private bool Scripts_Table_Filter_Func(Scripts_Entity row)
    {
        if (string.IsNullOrEmpty(scripts_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(scripts_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(scripts_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string scripts_table_sorted_column;
    private string scripts_table_search_string = String.Empty;
    private string scripts_selectedRowContent_guid = String.Empty; // Saving content of selected row

    // Executes on row click
    private void Scripts_RowClickHandler(Scripts_Entity row)
    {
        scripts_selectedRowContent_guid = row.guid;
    }

    private async void Scripts_RowDblClickHandler(Scripts_Entity row)
    {
        scripts_selectedRowContent_guid = row.guid;

        await View_Script_Dialog(row.created, row.last_edited, row.maintainer, row.contact, row.is_admin.ToString(), row.name, row.description, row.platform, row.shell, row.script);
    }

    private string Scripts_GetRowClass(Scripts_Entity row)
    {
        return row.guid == scripts_selectedRowContent_guid ? ("selected-row-dark") : String.Empty;
    }

    private async Task Get_Community_Scripts()
    {
        loading_overlay = true;

        StateHasChanged();

        try
        {
            string url = Application_Settings.IsLiveEnvironment ? Application_Settings.Members_Portal_Api_Url_Live : Application_Settings.Members_Portal_Api_Url_Test;
            url = url + "/api/community/scripts/get";

            string json = await Classes.Helper.Http.Get_Request_With_Api_Key(url);

            json = Encryption.String_Encryption.Decrypt(json, Application_Settings.Obfuscation_Encryption_Password);

            scripts_mysql_data = JsonSerializer.Deserialize<List<Scripts_Entity>>(json);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Online_Mode.Handler.Get_Community_Scripts", "General error", ex.ToString());
        }
        finally
        {
            loading_overlay = false;
            StateHasChanged();
        }
    }

    private bool view_script_dialog_open = false;

    private async Task View_Script_Dialog(string created, string last_edited, string maintainer, string contact, string is_admin, string name, string description, string platform, string shell, string script)
    {
        try
        {
            if (view_script_dialog_open)
                return;

            var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.ExtraLarge,
                BackgroundClass = "dialog-blurring",
            };

            DialogParameters parameters = new DialogParameters();
            parameters.Add("created", created);
            parameters.Add("last_edited", last_edited);
            parameters.Add("maintainer", maintainer);
            parameters.Add("contact", contact);
            parameters.Add("is_admin", is_admin);
            parameters.Add("name", name);
            parameters.Add("description", description);
            parameters.Add("platform", platform);
            parameters.Add("shell", shell);
            parameters.Add("script", script);

            view_script_dialog_open = true;

            var result = await this.DialogService.Show<Pages.Collections.Scripts.Community_Scripts.View_Dialog>(string.Empty, parameters, options).Result;

            view_script_dialog_open = false;

            if (result.Canceled)
                return;

            Logging.Handler.Debug("/community/scripts -> View_Script_Dialog", "Result", result.Data.ToString());
        }
		catch (Exception ex)
		{
			Logging.Handler.Error("/community/scripts -> View_Script_Dialog", "Result", ex.ToString());
		}
    }

    private void Cancel() => MudDialog.Cancel();
}