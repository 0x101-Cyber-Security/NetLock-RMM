@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using System.Resources;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Pages.Automations.Dialogs.Add_Automations_Dialog> Localizer
@inject IDataProtectionProvider DataProtectionProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["add"]</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="@Localizer["name"]" T="string" @bind-Value="@name" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
        <MudTextField Label="@Localizer["description"]" T="string" @bind-Value="@description" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" />

        <MudSelect Class="mt-3" T="string" @bind-Value="category" Label="@Localizer["category"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            <MudSelectItem T="string" Value="@Localizer["policy"]" />
        </MudSelect>

        @{
            if (category == @Localizer["policy"])
            {
                <MudSelect Class="mt-3" T="string" @bind-Value="condition" Label="@Localizer["if..."]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <MudSelectItem T="string" Value="@Localizer["condition_device_name"]" />
                    <MudSelectItem T="string" Value="@Localizer["condition_tenant"]" />
                    <MudSelectItem T="string" Value="@Localizer["condition_location"]" />
                    <MudSelectItem T="string" Value="@Localizer["condition_group"]" />
                    <MudSelectItem T="string" Value="@Localizer["condition_internal_ip_adress"]" />
                    <MudSelectItem T="string" Value="@Localizer["condition_external_ip_adress"]" />
                    <MudSelectItem T="string" Value="@Localizer["condition_domain"]" />
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    @{
                        if (condition == Localizer["condition_tenant"])
                        {
                            <MudSelect Class="mt-3" T="string" @bind-Value="expected_result" Label="@Localizer["equal..."]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                @{
                                    foreach (var tenant in tenants_list)
                                    {
                                        <MudSelectItem T="string" Value="@tenant">@tenant</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        }
						else if (condition == Localizer["condition_location"])
						{
							<MudSelect Class="mt-3" T="string" @bind-Value="expected_result" Label="@Localizer["equal..."]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
								@{
									foreach (var location in locations_list)
									{
										<MudSelectItem T="string" Value="@location">@location</MudSelectItem>
									}
								}
							</MudSelect>
						}
						else if (condition == Localizer["condition_group"])
						{
							<MudSelect Class="mt-3" T="string" @bind-Value="expected_result" Label="@Localizer["equal..."]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
								@{
									foreach (var group in groups_list)
									{
										<MudSelectItem T="string" Value="@group">@group</MudSelectItem>
									}
								}
							</MudSelect>
						}
                        else if(condition == Localizer["condition_device_name"])
						{
							<MudSelect Class="mt-3" T="string" @bind-Value="expected_result" Label="@Localizer["equal..."]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
								@{
									foreach (var device in devices_list)
									{
										<MudSelectItem T="string" Value="@device">@device</MudSelectItem>
									}
								}
							</MudSelect>
						}
                        else
                        {
                            <MudTextField Label="@Localizer["equal..."]" T="string" @bind-Value="@expected_result" Variant="Variant.Text" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
                        }
                    }

                    <MudTooltip Text="@Localizer["regex_supported"]">
                        <MudIconButton Class="ml-2 mt-0" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <MudSelect Class="mt-3" T="string" @bind-Value="trigger" Label="@Localizer["policy"]" Required="true" RequiredError="@Localizer["required"]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    @foreach (var policy in policies_list)
                    {
                        <MudSelectItem Value="@policy" />
                    }
                </MudSelect>
            }
        }

    </DialogContent>
    <DialogActions>
        <MudButton Size="Size.Small" OnClick="Cancel">@Localizer["cancel"]</MudButton>

        <MudButton OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success" Disabled="@(String.IsNullOrEmpty(name) || String.IsNullOrEmpty(category) || String.IsNullOrEmpty(expected_result) || String.IsNullOrEmpty(trigger))">@Localizer["confirm"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

	private string netlock_username = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user from the authentication state
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

		// Check if user is authenticated
        if (user?.Identity is not { IsAuthenticated: true })
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

		// Retrieve email from claims
        netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;

        category = Localizer["policy"];
        condition = Localizer["condition_tenant"];

        await Get_Policies();
		await Get_Tenants();
        await Get_Locations();
        await Get_Groups();
		await Get_Devices();
    }

    private string updatedJson = String.Empty;

    private string name = String.Empty;
    private string description = String.Empty;
    private string category = String.Empty;
    private string category_item_policy = String.Empty;

    private string sub_category = String.Empty;
    private string condition = String.Empty;
    private string expected_result = String.Empty;
    private string trigger = String.Empty;

    private List<string> policies_list = new List<string> { };

    public class Automation
    {
        public string name { get; set; }
        public string date { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public int category { get; set; }
        public int sub_category { get; set; }
        public int condition { get; set; }
        public string expected_result { get; set; }
        public string trigger { get; set; }
    }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private async Task Get_Policies()
    {
        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("SELECT * FROM `policies`;", conn);
            DbDataReader reader = await cmd.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                policies_list.Add(reader["name"].ToString());
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_automations (Add_Automation_Dialog) -> Get_Policies", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }
    }

    // Load tenants
	private List<string> tenants_list = new List<string> { };

	private async Task Get_Tenants()
	{
		MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

		try
		{
			await conn.OpenAsync();
			
            MySqlCommand cmd = new MySqlCommand("SELECT * FROM `tenants`;", conn);
			DbDataReader reader = await cmd.ExecuteReaderAsync();
		
            while (await reader.ReadAsync())
			{
				tenants_list.Add(reader["name"].ToString());
			}
		}
		catch (Exception ex)
		{
			Logging.Handler.Error("/manage_automations (Add_Automation_Dialog) -> Get_Tenants", "Result", ex.ToString());
		}
		finally
		{
			await conn.CloseAsync();
		}
	}

    // Load locations
    private List<string> locations_list = new List<string> { };

	private async Task Get_Locations()
	{
		MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

		try
		{
			await conn.OpenAsync();

			MySqlCommand cmd = new MySqlCommand("SELECT * FROM `locations`;", conn);
			DbDataReader reader = await cmd.ExecuteReaderAsync();

			while (await reader.ReadAsync())
			{
				locations_list.Add(reader["name"].ToString());
			}
		}
		catch (Exception ex)
		{
			Logging.Handler.Error("/manage_automations (Add_Automation_Dialog) -> Get_Locations", "Result", ex.ToString());
		}
		finally
		{
			await conn.CloseAsync();
		}
	}

    // Load groups
    private List<string> groups_list = new List<string> { };

    private async Task Get_Groups()
	{
		MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

		try
		{
			await conn.OpenAsync();

			MySqlCommand cmd = new MySqlCommand("SELECT * FROM `groups`;", conn);
			DbDataReader reader = await cmd.ExecuteReaderAsync();

			while (await reader.ReadAsync())
			{
				groups_list.Add(reader["name"].ToString());
			}
		}
		catch (Exception ex)
		{
			Logging.Handler.Error("/manage_automations (Add_Automation_Dialog) -> Get_Groups", "Result", ex.ToString());
		}
		finally
		{
			await conn.CloseAsync();
		}
	}

    // Load devices
    private List<string> devices_list = new List<string> { };

	private async Task Get_Devices()
	{
		MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

		try
		{
			await conn.OpenAsync();

			MySqlCommand cmd = new MySqlCommand("SELECT * FROM `devices`;", conn);

			DbDataReader reader = await cmd.ExecuteReaderAsync();

			while (await reader.ReadAsync())
			{
                devices_list.Add(reader["device_name"].ToString());
			}
		}
		catch (Exception ex)
		{
			Logging.Handler.Error("/manage_automations (Add_Automation_Dialog) -> Get_Devices", "Result", ex.ToString());
		}
		finally
		{
			await conn.CloseAsync();
		}
	}

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            int category_converted = 0;
            int sub_category_converted = 0;
            int condition_converted = 0;

            //category
            if (category == Localizer["policy"])
                category_converted = 0;

            //sub_category
            if (sub_category == "-")
                sub_category_converted = 0;

            if (condition == Localizer["condition_device_name"])
                condition_converted = 0;
            else if (condition == Localizer["condition_tenant"])
                condition_converted = 1;
            else if (condition == Localizer["condition_location"])
                condition_converted = 2;
            else if (condition == Localizer["condition_group"])
                condition_converted = 3;
            else if (condition == Localizer["condition_internal_ip_adress"])
                condition_converted = 4;
            else if (condition == Localizer["condition_external_ip_adress"])
                condition_converted = 5;
            else if (condition == Localizer["condition_domain"])
                condition_converted = 6;

            Automation automation_json = new Automation
                {
                    name = name,
                    date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                    author = netlock_username,
                    description = description,
                    category = category_converted,
                    sub_category = sub_category_converted,
                    condition = condition_converted,
                    expected_result = expected_result,
                    trigger = trigger,
                };

            string automations_json_string = JsonSerializer.Serialize(automation_json, new JsonSerializerOptions { WriteIndented = true });

            //Save to MySQL
            await conn.OpenAsync();

            string execute_query = "INSERT INTO `automations` (`name`, `date`, `author`, `description`, `category`, `sub_category`, `condition`, `expected_result`, `trigger`, `json`) VALUES (@name, @date, @author, @description, @category, @sub_category, @condition, @expected_result, @trigger, @json);";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@name", name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@author", netlock_username);
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@category", category_converted);
            cmd.Parameters.AddWithValue("@sub_category", sub_category_converted);
            cmd.Parameters.AddWithValue("@condition", condition_converted);
            cmd.Parameters.AddWithValue("@expected_result", expected_result);
            cmd.Parameters.AddWithValue("@trigger", trigger);
            cmd.Parameters.AddWithValue("@json", automations_json_string);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_automations (Add_Automation_Dialog) -> OK", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            await Classes.MySQL.Handler.Reset_Device_Sync(true, String.Empty);
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}