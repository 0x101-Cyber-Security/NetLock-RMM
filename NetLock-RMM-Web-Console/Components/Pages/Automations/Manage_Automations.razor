@page "/automations"
@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using System.Xml.Serialization;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.DataProtection;
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Automations.Manage_Automations> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    
    .selected-row-light {
        background-color: lightgray;
    }

    .selected-row-dark {
        background-color: #141414;
    }

    .custom-expansion-panel {
        background-color: transparent;
    }

    @@media only screen and (max-width: 768px) {
        .desktop-icon {
            display: none;
        }
    }

    .dialog-blurring {
        backdrop-filter: blur(10px);
    }

    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<AuthorizeView>
    <Authorized>
        
        @if (permissions_automation_enabled)
        {
            <MudText Typo="Typo.h5">@Localizer["automation"]</MudText>

            @if (permissions_automation_add)
            {
                <MudButton Class="mt-5" Size="Size.Small" Variant="Variant.Filled" OnClick="@Add_Automation_Dialog" Color="Color.Default" StartIcon="@Icons.Material.Filled.Add">@Localizer["add"]</MudButton>
            }

            @if (permissions_automation_edit)
            {
                <MudButton Class="ml-2 mt-5" Size="Size.Small" Variant="Variant.Filled" OnClick="@(() => Edit_Automation_Dialog(automations_selectedRowContent_id, automations_selectedRowContent_name, automations_selectedRowContent_json))" Color="Color.Default" StartIcon="@Icons.Material.Filled.Edit" Disabled="Automation_Get_Row_Selected()">@Localizer["edit"]</MudButton>
            }

            @if (permissions_automation_delete)
            {
                <MudButton Class="ml-2 mt-5" Size="Size.Small" Variant="Variant.Filled" OnClick="@(() => Delete_Automation_Dialog(automations_selectedRowContent_id))" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Disabled="Automation_Get_Row_Selected()">@Localizer["delete"]</MudButton>
            }
            
            <MudPaper Class="mt-5">

                <MudTooltip Text="@Localizer["export_data"]">
                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Table_Dialog"></MudIconButton>
                </MudTooltip>

                <MudTable Class="mt-0" Height="70vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@automations_mysql_data" Filter="new Func<Automation_Entity, bool>(Automation_Table_Filter_Func)">
                    <ToolBarContent>
                        <MudTextField @bind-Value="automations_table_search_string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<Automation_Entity, object>(x => x.name)">@Localizer["name"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Automation_Entity, object>(x => x.category)">@Localizer["category"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Automation_Entity, object>(x => x.sub_category)">@Localizer["sub_category"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Automation_Entity, object>(x => x.description)">@Localizer["description"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Automation_Entity, object>(x => x.author)">@Localizer["author"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Automation_Entity, object>(x => x.date)">@Localizer["date"]</MudTableSortLabel></MudTh>
                    </HeaderContent>

                    <RowTemplate Context="automations_row">
                        <MudTd DataLabel="@Localizer["name"]" @onclick="() => Automation_RowClickHandler(automations_row)" @ondblclick="() => Automation_RowDblClickHandler(automations_row)" class="@Automation_GetRowClass(automations_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@automations_row.name
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["category"]" @onclick="() => Automation_RowClickHandler(automations_row)" @ondblclick="() => Automation_RowDblClickHandler(automations_row)" class="@Automation_GetRowClass(automations_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@automations_row.category
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["sub_category"]" @onclick="() => Automation_RowClickHandler(automations_row)" @ondblclick="() => Automation_RowDblClickHandler(automations_row)" class="@Automation_GetRowClass(automations_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@automations_row.sub_category
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["description"]" @onclick="() => Automation_RowClickHandler(automations_row)" @ondblclick="() => Automation_RowDblClickHandler(automations_row)" class="@Automation_GetRowClass(automations_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@automations_row.description
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["author"]" @onclick="() => Automation_RowClickHandler(automations_row)" @ondblclick="() => Automation_RowDblClickHandler(automations_row)" class="@Automation_GetRowClass(automations_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@automations_row.author
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["date"]" @onclick="() => Automation_RowClickHandler(automations_row)" @ondblclick="() => Automation_RowDblClickHandler(automations_row)" class="@Automation_GetRowClass(automations_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@automations_row.date
                            </span>
                        </MudTd>
                    </RowTemplate>

                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["rows_per_site"]" />
                    </PagerContent>
                </MudTable>


            </MudPaper>
        }

    </Authorized>
 </AuthorizeView>

@code {

    #region Permissions System

    private string permissions_json = String.Empty;

    private bool permissions_automation_enabled = false;
    private bool permissions_automation_add = false;
    private bool permissions_automation_edit = false;
    private bool permissions_automation_delete = false;

    private async Task<bool> Permissions()
    {
        try
        {
            bool logout = false;

            // Get the current user from the authentication state
            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

            // Check if user is authenticated
            if (user?.Identity is not { IsAuthenticated: true })
                logout = true;

			string netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;

            permissions_automation_enabled = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "automation_enabled");
            
            if (!permissions_automation_enabled)
                logout = true;

            if (logout) // Redirect to the login page
            {
                NavigationManager.NavigateTo("/logout", true);
			    return false;
            }

            // Load other permissions here
            permissions_automation_add = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "automation_add");
            permissions_automation_edit = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "automation_edit");
            permissions_automation_delete = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "automation_delete");

		    // All fine? Nice.
		    return true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Permissions", "Error", ex.ToString());
		    return false;
        }
    }

    #endregion

    private bool _isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        if (!await Permissions())
            return;

        await Automation_Load();

        _isDarkMode = await JSRuntime.InvokeAsync<bool>("isDarkMode");

        StateHasChanged();
    }

    private string automations_json = String.Empty;

    private async Task Automation_Load()
    {
        automations_mysql_data = new List<Automation_Entity>();

        string query = "SELECT * FROM automations;";

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM automations;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        //convert computable to human readable
                        string category_converted = String.Empty;
                        string sub_category_converted = String.Empty;

                        //category
                        if (reader["category"].ToString() == "0")
                            category_converted = Localizer["policy"];

                        //sub_category
                        /*if (reader["sub_category"].ToString() == "0")
                            sub_category_converted = "-";*/

                        //clean categories for view
                        if (category_converted == Localizer["policy"])
                            sub_category_converted = "-";

                        Automation_Entity entity = new Automation_Entity //Create entity
                            {
                                id = reader["id"].ToString(),
                                name = reader["name"].ToString(),
                                description = reader["description"].ToString(),
                                author = reader["author"].ToString(),
                                date = reader["date"].ToString(),
                                category = category_converted,
                                sub_category = sub_category_converted,
                                json = reader["json"].ToString(),
                            };

                        automations_mysql_data.Add(entity);
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_automations -> Automation_Load", "Result", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }

    public List<Automation_Entity> automations_mysql_data;

    public class Automation_Entity
    {
        public string id { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string category { get; set; } = String.Empty;
        public string sub_category { get; set; } = String.Empty;
        public string json { get; set; } = String.Empty;
    }

    private string automations_table_view_port = "70vh";
    private string automations_table_sorted_column;
    private string automations_table_search_string = "";

    private bool Automation_Table_Filter_Func(Automation_Entity row)
    { 
        if (string.IsNullOrEmpty(automations_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(automations_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(automations_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.category.Contains(automations_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.author.Contains(automations_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(automations_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.json.Contains(automations_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string automations_selectedRowContent_id = String.Empty; // Hier wird der Inhalt der ausgewählten Zeile gespeichert
    private string automations_selectedRowContent_name = String.Empty; // Hier wird der Inhalt der ausgewählten Zeile gespeichert
    private string automations_selectedRowContent_json = String.Empty; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private async void Automation_RowClickHandler(Automation_Entity row)
    {
        automations_selectedRowContent_id = row.id;
        automations_selectedRowContent_name = row.name;
        automations_selectedRowContent_json = row.json;
    }

    private async void Automation_RowDblClickHandler(Automation_Entity row)
    {
        automations_selectedRowContent_id = row.id;
        automations_selectedRowContent_name = row.name;
        automations_selectedRowContent_json = row.json;

        await Edit_Automation_Dialog(row.id, row.name, row.json);
    }

    private string Automation_GetRowClass(Automation_Entity row)
    {
        return row.id == automations_selectedRowContent_id ? (_isDarkMode ? "selected-row-dark" : "selected-row-light") : String.Empty;
    }

    private bool Automation_Get_Row_Selected()
    {
        if (String.IsNullOrEmpty(automations_selectedRowContent_name) == false)
            return false;
        else
            return true;
    }

    private bool add_automation_dialog_open = false;

    private async Task Add_Automation_Dialog()
    {
        if (add_automation_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        add_automation_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Automations.Dialogs.Add_Automations_Dialog>(string.Empty, new DialogParameters(), options).Result;

        add_automation_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/manage_automations -> Add_Automation_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            automations_json = result.Data.ToString();

            await Automation_Load();
        }
    }

    private bool edit_automations_dialog_open = false;

    private async Task Edit_Automation_Dialog(string id, string name, string json)
    {
        if (edit_automations_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("id", id);
        parameters.Add("name", name);
        parameters.Add("json", json);

        edit_automations_dialog_open = true;

        var result = await DialogService.Show<Pages.Automations.Dialogs.Edit_Automations_Dialog>(string.Empty, parameters, options).Result;

        edit_automations_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/manage_automations -> Edit_Automation_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            automations_json = result.Data.ToString();

            automations_selectedRowContent_id = String.Empty;
            automations_selectedRowContent_name = String.Empty;
            automations_selectedRowContent_json = String.Empty;

            await Automation_Load();
        }
    }

    private bool delete_automations_dialog_open = false;

    private async Task Delete_Automation_Dialog(string id)
    {
        if (delete_automations_dialog_open)
            return;
        
        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("id", id);

        delete_automations_dialog_open = true;

        var result = await DialogService.Show<Pages.Automations.Dialogs.Delete_Automations_Dialog>(string.Empty, parameters, options).Result;

        delete_automations_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/manage_automations -> Delete_Automation_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            automations_json = result.Data.ToString();

            automations_selectedRowContent_id = String.Empty;
            automations_selectedRowContent_name = String.Empty;
            automations_selectedRowContent_json = String.Empty;

            await Automation_Load();
        }
    }

    #region Data_Export
    private async Task Trigger_Export_Table_Dialog()
    {
        await Export_Table_Dialog("automations");
    }

    private async Task Export_Table_Dialog(string type)
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        var result = await this.DialogService.Show<Shared.Export_Data_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result != null && result.Data != null)
        {
            if (result.Data.ToString() == "JSON")
                await Export_Data_Json(type);
            else if (result.Data.ToString() == "HTML")
                await Export_Data_HTML(type);
        }
    }

    private async Task Export_Data_Json(string type)
    {
        try
        {
            string jsonContent = String.Empty;

            // Erstellen eines JSON-Strings aus den MudTable-Einträgen
            if (type == "automations")
                jsonContent = JsonSerializer.Serialize(automations_mysql_data, new JsonSerializerOptions { WriteIndented = true });

            // Aufruf der JavaScript-Funktion für den Export als .txt
            await JSRuntime.InvokeVoidAsync("exportToTxt", $"{type}.json", jsonContent);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_automations -> Export_Data_Json", "", ex.Message);
        }
    }

    public async Task Export_Data_HTML(string type)
    {
        try
        {
            StringBuilder htmlBuilder = new StringBuilder();

            if (type == "automations")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in automations_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in automations_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }

            htmlBuilder.Append("</table>");

            string htmlContent = htmlBuilder.ToString();

            // Hier wird JavaScript-Interop verwendet, um den HTML-Inhalt herunterzuladen
            await JSRuntime.InvokeVoidAsync("exportToTxt", $"{type}.html", htmlContent, "text/html");
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_automations -> Export_Data_HTML", "", ex.Message);
        }
    }

    #endregion
}