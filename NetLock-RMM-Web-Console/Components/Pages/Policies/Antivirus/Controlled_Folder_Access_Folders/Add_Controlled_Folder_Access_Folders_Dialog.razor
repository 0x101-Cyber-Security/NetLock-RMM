@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IStringLocalizer<Pages.Policies.Antivirus.Controlled_Folder_Access_Folders.Add_Controlled_Folder_Access_Folders_Dialog> Localizer

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["title"]</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="@Localizer["directory"]" T="string" @bind-Value="@folder_name" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
        <MudTextField Label="@Localizer["description"]" T="string" @bind-Value="@description" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer["cancel"]</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">@Localizer["confirm"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string id { get; set; }
    [Parameter] public string antivirus_controlled_folder_access_folders_json { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Logging.Handler.Debug("/Policy_Settings (Add_Controlled_Folder_Access_Folders_Dialog) -> OnInitializedAsync", "folders_json", antivirus_controlled_folder_access_folders_json);
    }

    string updatedJson = String.Empty;

    private string folder_name = String.Empty;
    private string description = String.Empty;

    public class Folders
    {
        public string id { get; set; }
        public string folder { get; set; }
        public string description { get; set; }
        public string date { get; set; }
    }

    private bool Form_Valid()
    {
        if (String.IsNullOrEmpty(folder_name))
            return true;
        else
            return false;
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        try
        {
            List<Folders> folders = JsonSerializer.Deserialize<List<Folders>>(antivirus_controlled_folder_access_folders_json);

            string cleaned_folder = folder_name.Replace("\\\\", "\\");

            // Neue Ausnahme hinzufügen
            folders.Add(new Folders
            {
                id = Randomizer.Handler.Standard(6),
                folder = folder_name,
                description = description,
                date = DateTime.Now.ToString("dd.MM.yyyy HH:mm:ss"),
            });

            // Konvertieren der Liste in JSON
            updatedJson = JsonSerializer.Serialize(folders, new JsonSerializerOptions { WriteIndented = true });

            Logging.Handler.Debug("/Policy_Settings (Add_Controlled_Folder_Access_Folders_Dialog) -> OK", "Update existing JSON (updatedJson)", updatedJson);

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings (Add_Controlled_Folder_Access_Folders_Dialog) -> OK", "Update existing JSON", ex.ToString());
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok(updatedJson));
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}