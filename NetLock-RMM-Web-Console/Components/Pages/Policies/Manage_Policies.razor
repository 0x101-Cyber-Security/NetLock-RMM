@page "/policies"
@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using System.Xml.Serialization;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.DataProtection;
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Policies.Manage_Policies> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .selected-row-light {
    background-color: lightgray;
    }

    .selected-row-dark {
    background-color: #141414;
    }

    .custom-expansion-panel {
    background-color: transparent;
    }

    .dialog-blurring {
    backdrop-filter: blur(10px);
    }

    .mud-table-cell-custom-group {
    font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
    padding-bottom: 50px;
    text-align: right;
    }

    @@media only screen and (max-width: 768px) {
    .desktop-icon {
    display: none;
    }
    }
</style>

<AuthorizeView>

    <Authorized>

        @if (permissions_policies_enabled)
        {
            <MudText Typo="Typo.h5">@Localizer["policy_management"]</MudText>

            @if (permissions_policies_add)
            {
                <MudButton Class="mt-5" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@Show_Add_Policy_Dialog">@Localizer["add"]</MudButton>
            }

            @if (permissions_policies_manage)
            {
                <MudButton Class="ml-2 mt-5" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Settings" @onclick="async () => { await Update_Selected_Policy(policies_selectedRowContent_id); }">@Localizer["manage"]</MudButton>
            }

            <MudTooltip Text="Export data">
                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Show_Export_Table_Dialog"></MudIconButton>
            </MudTooltip>

            <MudTable Class="mt-5" Height="65vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@policies_mysql_data" Filter="new Func<Policies_Entity, bool>(Policies_Table_Filter_Func)">
                <ToolBarContent>
                    <MudTextField @bind-Value="policies_table_search_string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<Policies_Entity, object>(x => x.policy_name)">@Localizer["name"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Policies_Entity, object>(x => x.date)">@Localizer["created"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Policies_Entity, object>(x => x.author)">@Localizer["author"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Policies_Entity, object>(x => x.description)">@Localizer["description"]</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate Context="policies_row">

                    <MudTd DataLabel="Name" @onclick="() => Policies_RowClickHandler(policies_row)" @ondblclick="() => Policies_RowDblClickHandler(policies_row)" class="@Policies_GetRowClass(policies_row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.LocalPolice" Size="Size.Small" />&nbsp;@policies_row.policy_name
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["created"]" @onclick="() => Policies_RowClickHandler(policies_row)" @ondblclick="() => Policies_RowDblClickHandler(policies_row)" class="@Policies_GetRowClass(policies_row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />&nbsp;@policies_row.date
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["author"]" @onclick="() => Policies_RowClickHandler(policies_row)" @ondblclick="() => Policies_RowDblClickHandler(policies_row)" class="@Policies_GetRowClass(policies_row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Small" />&nbsp;@policies_row.author
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["description"]" @onclick="() => Policies_RowClickHandler(policies_row)" @ondblclick="() => Policies_RowDblClickHandler(policies_row)" class="@Policies_GetRowClass(policies_row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" />&nbsp;@policies_row.description
                        </span>
                    </MudTd>

                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Entries per page" />
                </PagerContent>
            </MudTable>
        }

    </Authorized>
</AuthorizeView>

@code {

    #region Permissions System

    private string permissions_json = String.Empty;

    private bool permissions_policies_enabled = false;
    private bool permissions_policies_add = false;
    private bool permissions_policies_manage = false;

    private async Task<bool> Permissions()
    {
        try
        {
            bool logout = false;

            // Get the current user from the authentication state
            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

            // Check if user is authenticated
            if (user?.Identity is not { IsAuthenticated: true })
                logout = true;

            string netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;

            permissions_policies_enabled = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "policies_enabled");
            permissions_policies_add = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "policies_add");
			permissions_policies_manage = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "policies_manage");

            if (!permissions_policies_enabled)
                logout = true;

            if (logout) // Redirect to the login page
            {
                NavigationManager.NavigateTo("/logout", true);
                return false;
            }

            // All fine? Nice.
            return true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Permissions", "Error", ex.ToString());
            return false;
        }
    }

    #endregion

    private bool _isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        if (!await Permissions())
            return;

        _isDarkMode = await JSRuntime.InvokeAsync<bool>("isDarkMode");

        policies_mysql_data = await Get_Policy_Overview();

        StateHasChanged();
    }

    public List<Policies_Entity> policies_mysql_data;

    public class Policies_Entity
    {
        public string id { get; set; } = String.Empty;
        public string policy_name { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
    }

    private string policies_table_view_port = "70vh";
    private string policies_table_sorted_column;
    private string policies_table_search_string = "";

    private bool Policies_Table_Filter_Func(Policies_Entity row)
    {
        if (string.IsNullOrEmpty(policies_table_search_string))
            return true;

        //Search logic for each column
        return row.policy_name.Contains(policies_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.date.Contains(policies_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.author.Contains(policies_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.description.Contains(policies_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string policies_selectedRowContent = String.Empty;
    private string policies_selectedRowContent_id = String.Empty; 

    private void Policies_RowClickHandler(Policies_Entity row)
    {
        policies_selectedRowContent = row.policy_name;
        policies_selectedRowContent_id = row.id;
    }

    private async void Policies_RowDblClickHandler(Policies_Entity row)
    {
        await Update_Selected_Policy(row.id);
    }

    private string Policies_GetRowClass(Policies_Entity row)
    {
        return row.id == policies_selectedRowContent_id ? (_isDarkMode ? "selected-row-dark" : "selected-row-light") : String.Empty;
    }

    private async Task<List<Policies_Entity>> Get_Policy_Overview()
    {
        List<Policies_Entity> result = new List<Policies_Entity>();

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM policies;", conn);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Policies_Entity entity = new Policies_Entity
                        {
                            id = reader["id"].ToString() ?? "",
                            policy_name = reader["name"].ToString() ?? "",
                            date = reader["date"].ToString() ?? "",
                            author = reader["author"].ToString() ?? "",
                            description = await Base64.Handler.Decode(reader["description"].ToString() ?? ""),
                        };

                        result.Add(entity);
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Logging.Handler.Error("class", "Get_Policy_Overview", ex.ToString());
        }
        finally
        {
            conn.Close();
        }

        return result;
    }

    private bool add_policy_dialog_open = false;

    private async Task Show_Add_Policy_Dialog()
    {
        if (add_policy_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        add_policy_dialog_open = true;

        await this.DialogService.Show<Dialogs.Add_Policy_Dialog>(string.Empty, new DialogParameters(), options).Result;

        add_policy_dialog_open = false;

        policies_mysql_data = await Get_Policy_Overview();
    }

    private async Task Update_Selected_Policy(string id)
    {
        await localStorage.SetItemAsync("policy_id", id);

        NavigationManager.NavigateTo("/policy_settings");
    }

    #region Data_Export

    private bool export_table_dialog_open = false;

    private async Task Show_Export_Table_Dialog()
    {
        if (export_table_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        export_table_dialog_open = true;

        var result = await this.DialogService.Show<Policies.Dialogs.Export_Data_Dialog>(string.Empty, new DialogParameters(), options).Result;

        export_table_dialog_open = false;

        if (result != null && result.Data != null)
        {
            if (result.Data.ToString() == "JSON")
                await Export_Data_Json();
            else if (result.Data.ToString() == "XML")
                await Export_Data_XML();
            else if (result.Data.ToString() == "HTML")
                await Export_Data_HTML();
        }
    }

    private async Task Export_Data_Json()
    {
        try
        {
            // Erstellen eines JSON-Strings aus den MudTable-Einträgen
            string jsonContent = JsonSerializer.Serialize(policies_mysql_data, new JsonSerializerOptions { WriteIndented = true });

            // Aufruf der JavaScript-Funktion für den Export als .txt
            await JSRuntime.InvokeVoidAsync("exportToTxt", "policies.json", jsonContent);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("System_Logs", "Export_Data_Json", ex.Message);
        }
    }

    public async Task Export_Data_XML()
    {
        try
        {
            if (policies_mysql_data == null || policies_mysql_data.Count == 0)
            {
                // Keine Daten zum Exportieren
                return;
            }

            var serializer = new XmlSerializer(typeof(List<Policies_Entity>));

            using (var memoryStream = new MemoryStream())
            {
                // Konvertiere die Daten in das XML-Format
                serializer.Serialize(memoryStream, policies_mysql_data);

                // Setze die Position des MemoryStream auf den Anfang
                memoryStream.Position = 0;

                // Lese den Inhalt des MemoryStream in einen String
                using (var streamReader = new StreamReader(memoryStream))
                {
                    string xmlContent = await streamReader.ReadToEndAsync();

                    // Hier wird JavaScript-Interop verwendet, um den XML-Inhalt herunterzuladen
                    await JSRuntime.InvokeVoidAsync("exportToTxt", "policies.xml", xmlContent, "text/xml");
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("System_Logs", "Export_Data_XML", ex.Message);
        }
    }

    public async Task Export_Data_HTML()
    {
        try
        {
            if (policies_mysql_data == null || policies_mysql_data.Count == 0)
            {
                // Keine Daten zum Exportieren
                return;
            }

            StringBuilder htmlBuilder = new StringBuilder();
            htmlBuilder.Append("<table border='1'>");
            htmlBuilder.Append("<tr>");
            htmlBuilder.Append("<th>Name</th>");
            htmlBuilder.Append("<th>Erstellt</th>");
            htmlBuilder.Append("<th>Author</th>");
            htmlBuilder.Append("<th>Beschreibung</th>");
            htmlBuilder.Append("</tr>");

            foreach (var entry in policies_mysql_data)
            {
                htmlBuilder.Append("<tr>");
                htmlBuilder.Append($"<td>{entry.policy_name}</td>");
                htmlBuilder.Append($"<td>{entry.date}</td>");
                htmlBuilder.Append($"<td>{entry.author}</td>");
                htmlBuilder.Append($"<td>{entry.description}</td>");
                htmlBuilder.Append("</tr>");
            }

            htmlBuilder.Append("</table>");

            string htmlContent = htmlBuilder.ToString();

            // Hier wird JavaScript-Interop verwendet, um den HTML-Inhalt herunterzuladen
            await JSRuntime.InvokeVoidAsync("exportToTxt", "policies.html", htmlContent, "text/html");
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("System_Logs", "Export_Data_HTML", ex.Message);
        }
    }

    #endregion
}
