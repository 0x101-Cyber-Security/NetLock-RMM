@page "/policy_settings"
@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json.Nodes;
@using System.Text.Json;
@using System.Globalization;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.DataProtection;
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Policies.Policy_Settings> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .selected-row-light {
        background-color: lightgray;
    }

    .selected-row-dark {
        background-color: #141414;
    }

    .custom-expansion-panel {
        background-color: transparent;
    }

    .dialog-blurring {
        backdrop-filter: blur(10px);
    }

    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }

    @@media only screen and (max-width: 768px) {
        .desktop-icon {
            display: none;
        }
    }
</style>

<AuthorizeView>

    <Authorized>
        
        @if (permissions_policies_enabled)
        {
            <MudText Typo="Typo.h5">@policy_name</MudText>

            <MudButton Class="mt-5 mr-2" Size="Size.Small" Variant="Variant.Filled" Color="Color.Default" StartIcon="@Icons.Material.Filled.ArrowBack" Href="/policies">@Localizer["back"]</MudButton>

            @if (permissions_policies_edit)
            {
                <MudButton Class="mt-5 mr-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Save_Policy" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save">@Localizer["save"]</MudButton>                
            }

            @if (permissions_policies_delete)
            {
                <MudButton Class="mt-5" Size="Size.Small" Variant="Variant.Filled" OnClick="@Show_Delete_Policy_Dialog" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete">@Localizer["delete"]</MudButton>
            }
            
            <MudTabs Class="mt-5" KeepPanelsAlive=true Elevation="4" Rounded="false" Color="@Color.Default">

                <MudTabPanel Text="Windows">

                    <MudTabs>

                        <MudTabPanel Text="Antivirus">
                            <MudTabs Class="mt-0" KeepPanelsAlive=true Elevation="4" Rounded="false" Color="@Color.Default">
                                <MudTabPanel Text="@Localizer["configuration"]">

                                    <MudPaper>
                                        <MudSwitch Class="ml-2" T="bool" @bind-Value="@antivirus_enabled" Label="@Localizer["enabled"]" Color="Color.Primary" />

                                        <MudText Class="ml-2 mt-2" Typo="Typo.h6">@Localizer["general_settings"]</MudText>
                                        <MudText Class="ml-3" Typo="Typo.body1">@Localizer["user_interaction"]</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_security_center" Label="@Localizer["antivirus_security_center"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_security_center_tray" Label="@Localizer["antivirus_security_center_tray"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <MudText Class="ml-3 mt-3" Typo="Typo.body1">Updates</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_check_hourly_signatures" Label="@Localizer["antivirus_check_hourly_signatures"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_allow_metered_updates" Label="@Localizer["antivirus_allow_metered_updates"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <MudText Class="ml-3 mt-3" Typo="Typo.body1">@Localizer["other"]</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_delete_quarantine_six_months" Label="@Localizer["antivirus_delete_quarantine_six_months"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                    </MudPaper>

                                    <MudPaper Class="mt-5">

                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">@Localizer["scanner_settings"]</MudText>
                                        <MudSelect Class="ml-2 mr-2" T="string" @bind-Value="antivirus_scan_direction_display" Label="@Localizer["direction"]" AnchorOrigin="Origin.BottomCenter" style="max-width: 350px;" Disabled="@(!antivirus_enabled)">
                                            <MudSelectItem T="string" Value="@Localizer["inbound_outbound"]" />
                                            <MudSelectItem T="string" Value="@Localizer["inbound"]" />
                                            <MudSelectItem T="string" Value="@Localizer["outbound"]" />
                                        </MudSelect>

                                        <MudText Class="ml-3 mt-3" Typo="Typo.body1">@Localizer["file_system"]</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_file_hash_computing" Label="@Localizer["antivirus_file_hash_computing"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_block_at_first_seen" Label="@Localizer["antivirus_block_at_first_seen"]" Color="Color.Primary" Disabled="true" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_scan_archives" Label="@Localizer["antivirus_scan_archives"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_scan_mails" Label="@Localizer["antivirus_scan_mails"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <MudText Class="ml-3 mt-3" Typo="Typo.body1">@Localizer["network"]</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_net_scan_network_files" Label="@Localizer["antivirus_net_scan_network_files"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_net_filter_incoming_connections" Label="@Localizer["antivirus_net_filter_incoming_connections"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_net_datagram_processing" Label="@Localizer["antivirus_net_datagram_processing"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <MudText Class="ml-3 mt-3" Typo="Typo.body1">Parser</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_tls" Label="TLS" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_rdp" Label="RDP" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_ssh" Label="SSH" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_http" Label="HTTP" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_dns" Label="DNS" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_dnsovertcp" Label="@Localizer["antivirus_parser_dnsovertcp"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                    </MudPaper>

                                    <MudPaper Class="mt-5">

                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">@Localizer["exclusions"]</MudText>

                                        <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Antivirus_Exclusion_Add_Dialog" Color="Color.Default" StartIcon="@Icons.Material.Filled.Add" Disabled="@(!antivirus_enabled)">@Localizer["add"]</MudButton>

                                        <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => Antivirus_Exclusion_Edit_Exclusion_Dialog(antivirus_exclusions_selectedRowContent))" Disabled="@(!antivirus_enabled || String.IsNullOrEmpty(antivirus_exclusions_selectedRowContent))">@Localizer["edit"]</MudButton>

                                        <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Recycling" OnClick="@(() => Antivirus_Exclusion_Delete_Dialog(antivirus_exclusions_selectedRowContent))" Disabled="@(!antivirus_enabled || String.IsNullOrEmpty(antivirus_exclusions_selectedRowContent))">@Localizer["delete"]</MudButton>

                                        <MudTooltip Text="@Localizer["export_data"]">
                                            <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Antivirus_Exclusions_Export_Table_Dialog" Disabled="@(!antivirus_enabled)"></MudIconButton>
                                        </MudTooltip>

                                        <MudTable Class="mt-0" Height="20vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@antivirus_exclusions_mysql_data" Filter="new Func<Antivirus_Exclusions_Entity, bool>(Antivirus_Exclusions_Table_Filter_Func)">
                                            <ToolBarContent>
                                                <MudTextField @bind-Value="antivirus_exclusions_table_search_string" Placeholder="@Localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                            </ToolBarContent>
                                            <HeaderContent>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Exclusions_Entity, object>(x => x.exclusion)">@Localizer["exclusion"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Exclusions_Entity, object>(x => x.type)">@Localizer["type"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Exclusions_Entity, object>(x => x.description)">@Localizer["description"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Exclusions_Entity, object>(x => x.date)">@Localizer["date"]</MudTableSortLabel></MudTh>
                                            </HeaderContent>
                                            <RowTemplate Context="antivirus_exclusions_row">

                                                <MudTd DataLabel="ID" @onclick="() => Antivirus_Exclusions_RowClickHandler(antivirus_exclusions_row)" @ondblclick="() => Antivirus_Exclusions_RowDblClickHandler(antivirus_exclusions_row)" class="@Antivirus_Exclusions_GetRowClass(antivirus_exclusions_row)" style="display: none;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_exclusions_row.id
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["exclusion"]" @onclick="() => Antivirus_Exclusions_RowClickHandler(antivirus_exclusions_row)" @ondblclick="() => Antivirus_Exclusions_RowDblClickHandler(antivirus_exclusions_row)" class="@Antivirus_Exclusions_GetRowClass(antivirus_exclusions_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_exclusions_row.exclusion
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["type"]" @onclick="() => Antivirus_Exclusions_RowClickHandler(antivirus_exclusions_row)" @ondblclick="() => Antivirus_Exclusions_RowDblClickHandler(antivirus_exclusions_row)" class="@Antivirus_Exclusions_GetRowClass(antivirus_exclusions_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_exclusions_row.type
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["description"]" @onclick="() => Antivirus_Exclusions_RowClickHandler(antivirus_exclusions_row)" @ondblclick="() => Antivirus_Exclusions_RowDblClickHandler(antivirus_exclusions_row)" class="@Antivirus_Exclusions_GetRowClass(antivirus_exclusions_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_exclusions_row.description
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["date"]" @onclick="() => Antivirus_Exclusions_RowClickHandler(antivirus_exclusions_row)" @ondblclick="() => Antivirus_Exclusions_RowDblClickHandler(antivirus_exclusions_row)" class="@Antivirus_Exclusions_GetRowClass(antivirus_exclusions_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_exclusions_row.date
                                                    </span>
                                                </MudTd>

                                            </RowTemplate>
                                            <PagerContent>
                                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["rows_per_page"]" />
                                            </PagerContent>
                                        </MudTable>

                                    </MudPaper>

                                    <MudPaper Class="mt-5">
                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">@Localizer["scan_jobs"]</MudText>

                                        <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Antivirus_Scan_Job_Add_Dialog" Color="Color.Default" StartIcon="@Icons.Material.Filled.Add" Disabled="@(!antivirus_enabled)">@Localizer["add"]</MudButton>

                                        <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => Antivirus_Scan_Job_Edit_Dialog(antivirus_scan_jobs_selectedRowContent))" Disabled="@(!antivirus_enabled)">@Localizer["edit"]</MudButton>

                                        <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Recycling" OnClick="@(() => Antivirus_Scan_Job_Delete_Dialog(antivirus_scan_jobs_selectedRowContent))" Disabled="@(!antivirus_enabled)">@Localizer["delete"]</MudButton>

                                        <MudTooltip Text="@Localizer["export_data"]">
                                            <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Antivirus_Scan_Jobs_Export_Table_Dialog" Disabled="@(!antivirus_enabled)"></MudIconButton>
                                        </MudTooltip>

                                        <MudTable Class="mt-0" Height="20vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@antivirus_scan_jobs_mysql_data" Filter="new Func<Antivirus_Scan_Jobs_Entity, bool>(Antivirus_Scan_Jobs_Table_Filter_Func)">
                                            <ToolBarContent>
                                                <MudTextField @bind-Value="antivirus_scan_jobs_table_search_string" Placeholder="@Localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                            </ToolBarContent>
                                            <HeaderContent>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.enabled)" style="white-space: nowrap;">Status</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.name)" style="white-space: nowrap;">Name</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.date)" style="white-space: nowrap;">@Localizer["date"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.description)" style="white-space: nowrap;">@Localizer["description"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.time_scheduler_type)" style="white-space: nowrap;">@Localizer["time_scheduler"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.time_scheduler_time)" style="white-space: nowrap;">@Localizer["time"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.time_scheduler_monday)" style="white-space: nowrap;">@Localizer["monday"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.time_scheduler_tuesday)" style="white-space: nowrap;">@Localizer["tuesday"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.time_scheduler_wednesday)" style="white-space: nowrap;">@Localizer["wednesday"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.time_scheduler_thursday)" style="white-space: nowrap;">@Localizer["thursday"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.time_scheduler_friday)" style="white-space: nowrap;">@Localizer["friday"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.time_scheduler_saturday)" style="white-space: nowrap;">@Localizer["saturday"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.time_scheduler_sunday)" style="white-space: nowrap;">@Localizer["sunday"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.scan_type)" style="white-space: nowrap;">@Localizer["scan_mode"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.scan_settings_cpu_usage)" style="white-space: nowrap;">@Localizer["scan_settings_cpu_usage"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.scan_settings_scan_on_battery)" style="white-space: nowrap;">@Localizer["scan_settings_scan_on_battery"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.scan_settings_network_drives)" style="white-space: nowrap;">@Localizer["scan_settings_network_drives"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.scan_settings_removable_disks)" style="white-space: nowrap;">@Localizer["scan_settings_removable_disks"]</MudTableSortLabel></MudTh>
                                                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Scan_Jobs_Entity, object>(x => x.scan_settings_update_signatures)" style="white-space: nowrap;">@Localizer["scan_settings_update_signatures"]</MudTableSortLabel></MudTh>
                                            </HeaderContent>
                                            <RowTemplate Context="antivirus_scan_jobs_row">

                                                <MudTd DataLabel="Status" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.enabled
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Name" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.name
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["date"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.date
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["description"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.description
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["time_scheduler"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.time_scheduler_type
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["time"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.time_scheduler_time Uhr
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["monday"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.time_scheduler_monday
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["tuesday"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.time_scheduler_tuesday
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["wednesday"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.time_scheduler_wednesday
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["thursday"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.time_scheduler_thursday
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["friday"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.time_scheduler_friday
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["saturday"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.time_scheduler_saturday
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["sunday"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.time_scheduler_sunday
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["scan_mode"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.scan_type
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["scan_settings_cpu_usage"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.scan_settings_cpu_usage (%)
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["scan_settings_scan_on_battery"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.scan_settings_scan_on_battery
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["scan_settings_network_drives"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.scan_settings_network_drives
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["scan_settings_removable_disks"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.scan_settings_removable_disks
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["scan_settings_update_signatures"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.scan_settings_update_signatures
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="@Localizer["description"]" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" @ondblclick="() => Antivirus_Scan_Jobs_RowDblClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="display: none;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@antivirus_scan_jobs_row.scan_directories_json
                                                    </span>
                                                </MudTd>

                                            </RowTemplate>
                                            <PagerContent>
                                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["rows_per_page"]" />
                                            </PagerContent>
                                        </MudTable>

                                    </MudPaper>

                                    @*@<MudPaper Class="mt-5">

        <MudText Class="ml-2 mt-3" Typo="Typo.h6">@Localizer["controlled_folder_access"]</MudText>

        <MudSwitch Class="ml-2" T="bool" @bind-Value="@antivirus_controlled_folder_access_enabled" Label="@Localizer["enabled"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

        <MudSelect Class="ml-2" T="string" @bind-Value="antivirus_controlled_folder_access_ruleset" Label="@Localizer["ruleset"]" AnchorOrigin="Origin.BottomCenter" Style="max-width: 300px;" Disabled="@(!antivirus_enabled)">
            <MudSelectItem Value="@("-")" />
            @{
                foreach (string ruleset in antivirus_controlled_folder_access_rulesets)
                {
                    <MudSelectItem Value="@ruleset" />
                }
            }
        </MudSelect>

        <MudDatePicker Class="ml-2" PickerVariant="PickerVariant.Dialog" Label="Automatisches Whitelisting bis zum" @ref="antivirus_controlled_folder_access_folders_date_picker" @bind-Date="antivirus_controlled_folder_access_folders_whitelist_until_date" Required="true" Disabled="@(!antivirus_enabled)">
            <PickerActions Context="pickerActionsContext">
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => antivirus_controlled_folder_access_folders_date_picker.ClearAsync())">@Localizer["reset"]</MudButton>
                <MudButton OnClick="@(() => antivirus_controlled_folder_access_folders_date_picker.CloseAsync(false))">@Localizer["cancel"]</MudButton>
                <MudButton OnClick="@(() => antivirus_controlled_folder_access_folders_date_picker.CloseAsync(true))" Color="Color.Primary">@Localizer["edit"]</MudButton>
            </PickerActions>
        </MudDatePicker>

        <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Antivirus_Controlled_Folder_Access_Folders_Add_Dialog" Color="Color.Default" StartIcon="@Icons.Material.Filled.Add" Disabled="@(!antivirus_enabled)">@Localizer["add"]</MudButton>
        <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => Antivirus_Controlled_Folder_Access_Folders_Edit_Dialog(antivirus_controlled_folder_access_folders_selectedRowContent))" Disabled="@(!antivirus_enabled || String.IsNullOrEmpty(antivirus_controlled_folder_access_folders_selectedRowContent))">@Localizer["edit"]</MudButton>
        <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Recycling" OnClick="@(() => Antivirus_Controlled_Folder_Access_Folders_Delete_Dialog(antivirus_controlled_folder_access_folders_selectedRowContent))" Disabled="@(!antivirus_enabled || String.IsNullOrEmpty(antivirus_controlled_folder_access_folders_selectedRowContent))">@Localizer["delete"]</MudButton>

        <MudTooltip Text="@Localizer["export_data"]">
            <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Antivirus_Controlled_Folder_Access_Folders_Export_Table_Dialog" Disabled="@(!antivirus_enabled)"></MudIconButton>
        </MudTooltip>

        <MudTable Class="mt-0" Height="20vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@antivirus_controlled_folder_access_folders_mysql_data" Filter="new Func<Antivirus_Controlled_Folder_Access_Folders_Entity, bool>(Antivirus_Controlled_Folder_Access_Folders_Table_Filter_Func)">
            <ToolBarContent>
                <MudTextField @bind-Value="antivirus_controlled_folder_access_folders_table_search_string" Placeholder="@Localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Folders_Entity, object>(x => x.folder)" style="white-space: nowrap;">@Localizer["directory"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Folders_Entity, object>(x => x.description)" style="white-space: nowrap;">@Localizer["description"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Antivirus_Controlled_Folder_Access_Folders_Entity, object>(x => x.date)" style="white-space: nowrap;">@Localizer["date"]</MudTableSortLabel></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate Context="antivirus_controlled_folder_access_folders_row">

                <MudTd DataLabel="@Localizer["directory"]" @onclick="() => Antivirus_Controlled_Folder_Access_Folders_RowClickHandler(antivirus_controlled_folder_access_folders_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Folders_RowDblClickHandler(antivirus_controlled_folder_access_folders_row)" class="@Antivirus_Controlled_Folder_Access_Folders_GetRowClass(antivirus_controlled_folder_access_folders_row)" style="white-space: nowrap;">
                    <span style="display: flex; align-items: center;">
                        &nbsp;@antivirus_controlled_folder_access_folders_row.folder
                    </span>
                </MudTd>

                <MudTd DataLabel="@Localizer["description"]" @onclick="() => Antivirus_Controlled_Folder_Access_Folders_RowClickHandler(antivirus_controlled_folder_access_folders_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Folders_RowDblClickHandler(antivirus_controlled_folder_access_folders_row)" class="@Antivirus_Controlled_Folder_Access_Folders_GetRowClass(antivirus_controlled_folder_access_folders_row)" style="white-space: nowrap;">
                    <span style="display: flex; align-items: center;">
                        &nbsp;@antivirus_controlled_folder_access_folders_row.description
                    </span>
                </MudTd>

            <MudTd DataLabel="@Localizer["date"]" @onclick="() => Antivirus_Controlled_Folder_Access_Folders_RowClickHandler(antivirus_controlled_folder_access_folders_row)" @ondblclick="() => Antivirus_Controlled_Folder_Access_Folders_RowDblClickHandler(antivirus_controlled_folder_access_folders_row)" class=" @Antivirus_Controlled_Folder_Access_Folders_GetRowClass(antivirus_controlled_folder_access_folders_row)" style="white-space: nowrap;">
                    <span style="display: flex; align-items: center;">
                        &nbsp;@antivirus_controlled_folder_access_folders_row.date
                    </span>
                </MudTd>

            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["rows_per_page"]" />
            </PagerContent>
        </MudTable>

</MudPaper>*@

                                </MudTabPanel>

                                <MudTabPanel Text="@Localizer["notifications"]">

                                    <MudPaper Class="mt-0">
                                        <!-- Antivirus @Localizer["category"] -->
                                        <MudText Class="ml-2 mt-0" Typo="Typo.h6">Antivirus</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_antivirus_enabled" Label="@Localizer["antivirus_notifications_malwareprotection_antivirus_enabled"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_antivirus_disabled" Label="@Localizer["antivirus_notifications_malwareprotection_antivirus_disabled"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <!-- Antispyware @Localizer["category"] -->
                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">Antispyware</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_antispyware_disabled" Label="@Localizer["antivirus_notifications_malwareprotection_antispyware_disabled"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_antispyware_enabled" Label="@Localizer["antivirus_notifications_malwareprotection_antispyware_enabled"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <!-- @Localizer["behaviour"] @Localizer["category"] -->
                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">@Localizer["behaviour"]</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_behavior_detected" Label="@Localizer["antivirus_notifications_malwareprotection_behavior_detected"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <!-- @Localizer["configuration"] @Localizer["category"] -->
                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">@Localizer["configuration"]</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_config_changed" Label="@Localizer["antivirus_notifications_malwareprotection_config_changed"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <!-- @Localizer["platform"] @Localizer["category"] -->
                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">@Localizer["platform"]</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_disabled_expired_state" Label="@Localizer["antivirus_notifications_malwareprotection_disabled_expired_state"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_engine_failure" Label="@Localizer["antivirus_notifications_malwareprotection_engine_failure"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_engine_update_platformoutofdate" Label="@Localizer["antivirus_notifications_malwareprotection_engine_update_platformoutofdate"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_expiration_warning_state" Label="@Localizer["antivirus_notifications_malwareprotection_expiration_warning_state"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_platform_almostoutofdate" Label="@Localizer["antivirus_notifications_malwareprotection_platform_almostoutofdate"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_platform_update_failed" Label="@Localizer["antivirus_notifications_malwareprotection_platform_update_failed"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_protection_eol" Label="@Localizer["antivirus_notifications_malwareprotection_protection_eol"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <!-- @Localizer["quarantine"] @Localizer["category"] -->
                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">@Localizer["quarantine"]</MudText>
                                        <MudCheckBox Class="ml-2 " T="bool" @bind-Value="@antivirus_notifications_malwareprotection_quarantine_delete" Label="@Localizer["antivirus_notifications_malwareprotection_quarantine_delete"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_quarantine_restore" Label="@Localizer["antivirus_notifications_malwareprotection_quarantine_restore"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <!-- @Localizer["real_time_protection"] @Localizer["category"] -->
                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">@Localizer["real_time_protection"]</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_rtp_disabled" Label="@Localizer["antivirus_notifications_malwareprotection_rtp_disabled"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_rtp_enabled" Label="@Localizer["antivirus_notifications_malwareprotection_rtp_enabled"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_rtp_feature_configured" Label="@Localizer["antivirus_notifications_malwareprotection_rtp_feature_configured"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_rtp_feature_failure" Label="@Localizer["antivirus_notifications_malwareprotection_rtp_feature_failure"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_rtp_feature_recovered" Label="@Localizer["antivirus_notifications_malwareprotection_rtp_feature_recovered"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <!-- Scan @Localizer["category"] -->
                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">Scan</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_scan_cancelled" Label="@Localizer["antivirus_notifications_malwareprotection_scan_cancelled"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_scan_completed" Label="@Localizer["antivirus_notifications_malwareprotection_scan_completed"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_scan_failed" Label="@Localizer["antivirus_notifications_malwareprotection_scan_failed"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_scan_paused" Label="@Localizer["antivirus_notifications_malwareprotection_scan_paused"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <!-- @Localizer["signatures"] @Localizer["category"] -->
                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">@Localizer["signatures"]</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_signature_reversion" Label="@Localizer["antivirus_notifications_malwareprotection_signature_reversion"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_signature_update_failed" Label="@Localizer["antivirus_notifications_malwareprotection_signature_update_failed"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_signature_updated" Label="@Localizer["antivirus_notifications_malwareprotection_signature_updated"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                        <!-- NetLock @Localizer["category"] -->
                                        <MudText Class="ml-2 mt-3" Typo="Typo.h6">NetLock</MudText>
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_netlock_mail" Label="@Localizer["e_mail"]" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_netlock_microsoft_teams" Label="Microsoft Teams" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_netlock_telegram" Label="Telegram" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                        <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_netlock_ntfy_sh" Label="NTFY.SH" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                    </MudPaper>

                                </MudTabPanel>
                            </MudTabs>

                        </MudTabPanel>

                    </MudTabs>

                </MudTabPanel>


                <MudTabPanel Text="@Localizer["sensors"]">
                    <MudPaper>

                        <MudTooltip Text="@Localizer["export_data"]">
                            <!--<MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Table_Dialog"></MudIconButton>-->
                        </MudTooltip>

                        <MudTable Class="mt-0" Height="70vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@sensors_mysql_data" Filter="new Func<Sensors_Entity, bool>(Sensors_Table_Filter_Func)">
                            <ToolBarContent>
                                <MudTextField @bind-Value="sensors_table_search_string" Placeholder="@Localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="new Func<Sensors_Entity, object>(x => x.enabled)" style="white-space: nowrap;">@Localizer["enabled"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Sensors_Entity, object>(x => x.name)" style="white-space: nowrap;">Name</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Sensors_Entity, object>(x => x.platform)" style="white-space: nowrap;">@Localizer["platform"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Sensors_Entity, object>(x => x.category)" style="white-space: nowrap;">@Localizer["category"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Sensors_Entity, object>(x => x.sub_category)" style="white-space: nowrap;">@Localizer["sub_category"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Sensors_Entity, object>(x => x.severity)" style="white-space: nowrap;">@Localizer["severity"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Sensors_Entity, object>(x => x.description)" style="white-space: nowrap;">@Localizer["description"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Sensors_Entity, object>(x => x.author)" style="white-space: nowrap;">@Localizer["author"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Sensors_Entity, object>(x => x.date)" style="white-space: nowrap;">@Localizer["date"]</MudTableSortLabel></MudTh>
                            </HeaderContent>
                            <RowTemplate Context="sensors_row">

                                <MudTd DataLabel="@Localizer["enabled"]" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        <MudCheckBox T="bool" @bind-Value="sensors_row.enabled" Color="Color.Primary" />
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Name" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.name
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="@Localizer["platform"]" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.platform
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="@Localizer["category"]" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.category
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="@Localizer["sub_category"]" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.sub_category
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="@Localizer["severity"]" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.severity
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="@Localizer["description"]" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.description
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="@Localizer["author"]" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.author
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="@Localizer["date"]" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.date
                                    </span>
                                </MudTd>

                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["rows_per_page"]" />
                            </PagerContent>
                        </MudTable>

                    </MudPaper>
                </MudTabPanel>

                <MudTabPanel Text="Jobs">
                    <MudPaper>

                        <MudTooltip Text="@Localizer["export_data"]">
                            <!--<MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Table_Dialog"></MudIconButton>-->
                        </MudTooltip>

                        <MudTable Class="mt-0" Height="70vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@jobs_mysql_data" Filter="new Func<Jobs_Entity, bool>(Jobs_Table_Filter_Func)">
                            <ToolBarContent>
                                <MudTextField @bind-Value="jobs_table_search_string" Placeholder="@Localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="new Func<Jobs_Entity, object>(x => x.enabled)" style="white-space: nowrap;">@Localizer["enabled"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Jobs_Entity, object>(x => x.name)" style="white-space: nowrap;">Name</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Jobs_Entity, object>(x => x.platform)" style="white-space: nowrap;">@Localizer["platform"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Jobs_Entity, object>(x => x.type)" style="white-space: nowrap;">@Localizer["type"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Jobs_Entity, object>(x => x.description)" style="white-space: nowrap;">@Localizer["description"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Jobs_Entity, object>(x => x.author)" style="white-space: nowrap;">@Localizer["author"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Jobs_Entity, object>(x => x.date)" style="white-space: nowrap;">@Localizer["date"]</MudTableSortLabel></MudTh>
                            </HeaderContent>
                            <RowTemplate Context="jobs_row">

                                <MudTd DataLabel="@Localizer["enabled"]" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        <MudCheckBox T="bool" @bind-Value="jobs_row.enabled" Color="Color.Primary" />
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Name" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@jobs_row.name
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="@Localizer["platform"]" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@jobs_row.platform
                                    </span>
                                </MudTd>
                                
                                <MudTd DataLabel="@Localizer["type"]" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@jobs_row.type
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="@Localizer["description"]" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@jobs_row.description
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="@Localizer["author"]" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@jobs_row.author
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="@Localizer["date"]" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@jobs_row.date
                                    </span>
                                </MudTd>

                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["rows_per_page"]" />
                            </PagerContent>
                        </MudTable>

                    </MudPaper>
                </MudTabPanel>
            </MudTabs>
        }

    </Authorized>
 </AuthorizeView>

@code {

    #region Permissions System

    private string permissions_json = String.Empty;

    private bool permissions_policies_enabled = false;
    private bool permissions_policies_add = false;
    private bool permissions_policies_manage = false;
    private bool permissions_policies_edit = false;
    private bool permissions_policies_delete = false;

    private async Task<bool> Permissions()
    {
        try
        {
            bool logout = false;

            // Get the current user from the authentication state
            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

            // Check if user is authenticated
            if (user?.Identity is not { IsAuthenticated: true })
                logout = true;

            string netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;

            permissions_policies_enabled = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "policies_enabled");
            permissions_policies_add = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "policies_add");
            permissions_policies_manage = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "policies_manage");
            permissions_policies_edit = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "policies_edit");
			permissions_policies_delete = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "policies_delete");

            if (!permissions_policies_enabled)
                logout = true;

            if (logout) // Redirect to the login page
            {
                NavigationManager.NavigateTo("/logout", true);
                return false;
            }

            // All fine? Nice.
            return true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Permissions", "Error", ex.ToString());
            return false;
        }
    }

    #endregion

    private bool _isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        if (!await Permissions())
            return;

        _isDarkMode = await JSRuntime.InvokeAsync<bool>("isDarkMode");

        string policy_id = await localStorage.GetItemAsync<string>("policy_id");

        await Load_Policy(policy_id);
        await Antivirus_Settings_Load();
        await Antivirus_Exclusions_Load();
        await Antivirus_Scan_Jobs_Load();
        await Antivirus_Controlled_Folder_Access_Folders_Load();
        await Get_Sensors_Overview();
        await Get_Jobs_Overview();
        await Get_Antivirus_Controlled_Folder_Access_Rulesets();

        StateHasChanged();
    }

    string policy_name = "";

    #region Antivirus
    string antivirus_settings_json = "[]";
    string antivirus_exclusions_json = "[]";
    string antivirus_scan_jobs_json = "[]";

    public bool antivirus_enabled = false;
    public bool antivirus_security_center = false;
    public bool antivirus_security_center_tray = false;
    public bool antivirus_check_hourly_signatures = false;
    public bool antivirus_allow_metered_updates = false;
    public bool antivirus_delete_quarantine_six_months = false;
    public int antivirus_scan_direction = 0;
    public string antivirus_scan_direction_display = String.Empty;
    public bool antivirus_file_hash_computing = false;
    public bool antivirus_block_at_first_seen = false;
    public bool antivirus_scan_archives = false;
    public bool antivirus_scan_mails = false;
    public bool antivirus_net_scan_network_files = false;
    public bool antivirus_net_filter_incoming_connections = false;
    public bool antivirus_net_datagram_processing = false;
    public bool antivirus_parser_tls = false;
    public bool antivirus_parser_rdp = false;
    public bool antivirus_parser_ssh = false;
    public bool antivirus_parser_http = false;
    public bool antivirus_parser_dns = false;
    public bool antivirus_parser_dnsovertcp = false;

    //Controlled Folder Access
    public bool antivirus_controlled_folder_access_enabled = false;
    public string antivirus_controlled_folder_access_ruleset = "-";
    private DateTime? antivirus_controlled_folder_access_folders_whitelist_until_date = DateTime.Now.Date.AddDays(14);

    //Notifications
    public bool antivirus_notifications_controlled_folder_actions_blocked_action = true;
    public bool antivirus_notifications_malwareprotection_antivirus_disabled = true;
    public bool antivirus_notifications_malwareprotection_antivirus_enabled = true;
    public bool antivirus_notifications_malwareprotection_antispyware_disabled = true;
    public bool antivirus_notifications_malwareprotection_antispyware_enabled = true;
    public bool antivirus_notifications_malwareprotection_behavior_detected = true;
    public bool antivirus_notifications_malwareprotection_config_changed = false;
    public bool antivirus_notifications_malwareprotection_disabled_expired_state = true;
    public bool antivirus_notifications_malwareprotection_engine_failure = true;
    public bool antivirus_notifications_malwareprotection_engine_update_platformoutofdate = true;
    public bool antivirus_notifications_malwareprotection_expiration_warning_state = true;
    public bool antivirus_notifications_malwareprotection_folder_guard_sector_block = true;
    public bool antivirus_notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed = true;
    public bool antivirus_notifications_malwareprotection_malware_action_taken = true;
    public bool antivirus_notifications_malwareprotection_malware_detected = true;
    public bool antivirus_notifications_malwareprotection_os_eol = true;
    public bool antivirus_notifications_malwareprotection_os_expiring = true;
    public bool antivirus_notifications_malwareprotection_platform_almostoutofdate = true;
    public bool antivirus_notifications_malwareprotection_platform_update_failed = true;
    public bool antivirus_notifications_malwareprotection_protection_eol = true;
    public bool antivirus_notifications_malwareprotection_quarantine_delete = true;
    public bool antivirus_notifications_malwareprotection_quarantine_restore = true;
    public bool antivirus_notifications_malwareprotection_rtp_disabled = true;
    public bool antivirus_notifications_malwareprotection_rtp_enabled = true;
    public bool antivirus_notifications_malwareprotection_rtp_feature_configured = false;
    public bool antivirus_notifications_malwareprotection_rtp_feature_failure = true;
    public bool antivirus_notifications_malwareprotection_rtp_feature_recovered = true;
    public bool antivirus_notifications_malwareprotection_scan_cancelled = true;
    public bool antivirus_notifications_malwareprotection_scan_completed = true;
    public bool antivirus_notifications_malwareprotection_scan_failed = true;
    public bool antivirus_notifications_malwareprotection_scan_paused = true;
    public bool antivirus_notifications_malwareprotection_signature_reversion = true;
    public bool antivirus_notifications_malwareprotection_signature_update_failed = true;
    public bool antivirus_notifications_malwareprotection_signature_updated = true;
    public bool antivirus_notifications_malwareprotection_state_malware_action_critically_failed = true;
    public bool antivirus_notifications_malwareprotection_state_malware_detected = true;
    public bool antivirus_notifications_malwareprotection_state_malware_action_taken = true;
    public bool antivirus_notifications_tamper_protection_blocked_changes = true;

    // NetLock Notifications
    public bool antivirus_notifications_netlock_mail = true;
    public bool antivirus_notifications_netlock_microsoft_teams = true;
    public bool antivirus_notifications_netlock_telegram = true;
    public bool antivirus_notifications_netlock_ntfy_sh = true;

    public class Antivirus_Settings
    {
        public bool enabled { get; set; }
        public bool security_center { get; set; }
        public bool security_center_tray { get; set; }
        public bool check_hourly_signatures { get; set; }
        public bool allow_metered_updates { get; set; }
        public bool delete_quarantine_six_months { get; set; }
        public int scan_direction { get; set; }
        public bool file_hash_computing { get; set; }
        public bool block_at_first_seen { get; set; }
        public bool scan_archives { get; set; }
        public bool scan_mails { get; set; }
        public bool net_scan_network_files { get; set; }
        public bool net_filter_incoming_connections { get; set; }
        public bool net_datagram_processing { get; set; }
        public bool parser_tls { get; set; }
        public bool parser_rdp { get; set; }
        public bool parser_ssh { get; set; }
        public bool parser_http { get; set; }
        public bool parser_dns { get; set; }
        public bool parser_dnsovertcp { get; set; }

        //Controlled Folder Access
        public bool controlled_folder_access_enabled { get; set; }
        public string controlled_folder_access_ruleset { get; set; }
        public string controlled_folder_access_folders_whitelist_until_date { get; set; }

        // Notifications
        public bool notifications_controlled_folder_actions_blocked_action { get; set; }
        public bool notifications_malwareprotection_antivirus_disabled { get; set; }
        public bool notifications_malwareprotection_antivirus_enabled { get; set; }
        public bool notifications_malwareprotection_antispyware_disabled { get; set; }
        public bool notifications_malwareprotection_antispyware_enabled { get; set; }
        public bool notifications_malwareprotection_behavior_detected { get; set; }
        public bool notifications_malwareprotection_config_changed { get; set; }
        public bool notifications_malwareprotection_disabled_expired_state { get; set; }
        public bool notifications_malwareprotection_engine_failure { get; set; }
        public bool notifications_malwareprotection_engine_update_platformoutofdate { get; set; }
        public bool notifications_malwareprotection_expiration_warning_state { get; set; }
        public bool notifications_malwareprotection_folder_guard_sector_block { get; set; }
        public bool notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed { get; set; }
        public bool notifications_malwareprotection_malware_action_taken { get; set; }
        public bool notifications_malwareprotection_malware_detected { get; set; }
        public bool notifications_malwareprotection_os_eol { get; set; }
        public bool notifications_malwareprotection_os_expiring { get; set; }
        public bool notifications_malwareprotection_platform_almostoutofdate { get; set; }
        public bool notifications_malwareprotection_platform_update_failed { get; set; }
        public bool notifications_malwareprotection_protection_eol { get; set; }
        public bool notifications_malwareprotection_quarantine_delete { get; set; }
        public bool notifications_malwareprotection_quarantine_restore { get; set; }
        public bool notifications_malwareprotection_rtp_disabled { get; set; }
        public bool notifications_malwareprotection_rtp_enabled { get; set; }
        public bool notifications_malwareprotection_rtp_feature_configured { get; set; }
        public bool notifications_malwareprotection_rtp_feature_failure { get; set; }
        public bool notifications_malwareprotection_rtp_feature_recovered { get; set; }
        public bool notifications_malwareprotection_scan_cancelled { get; set; }
        public bool notifications_malwareprotection_scan_completed { get; set; }
        public bool notifications_malwareprotection_scan_failed { get; set; }
        public bool notifications_malwareprotection_scan_paused { get; set; }
        public bool notifications_malwareprotection_signature_reversion { get; set; }
        public bool notifications_malwareprotection_signature_update_failed { get; set; }
        public bool notifications_malwareprotection_signature_updated { get; set; }
        public bool notifications_malwareprotection_state_malware_action_critically_failed { get; set; }
        public bool notifications_malwareprotection_state_malware_detected { get; set; }
        public bool notifications_malwareprotection_state_malware_action_taken { get; set; }
        public bool notifications_tamper_protection_blocked_changes { get; set; }

        public bool notifications_netlock_mail { get; set; }
        public bool notifications_netlock_microsoft_teams { get; set; }
        public bool notifications_netlock_telegram { get; set; }
        public bool notifications_netlock_ntfy_sh { get; set; }
    }

    public class Antivirus_Exclusions
    {
        public string date { get; set; }
        public string type { get; set; }
        public string exclusion { get; set; }
        public string description { get; set; }
    }

    public class Antivirus_Scan_Jobs
    {
        public string date { get; set; }
        public string name { get; set; }
        public string description { get; set; }
        public string time_scheduler_type { get; set; }
        public bool time_scheduler_monday { get; set; }
        public bool time_scheduler_tuesday { get; set; }
        public bool time_scheduler_wednesday { get; set; }
        public bool time_scheduler_thursday { get; set; }
        public bool time_scheduler_friday { get; set; }
        public bool time_scheduler_saturday { get; set; }
        public bool time_scheduler_sunday { get; set; }
        public string scan_type { get; set; }
        public int scan_settings_cpu_usage { get; set; }
        public bool scan_settings_scan_on_battery { get; set; }
        public bool scan_settings_network_drives { get; set; }
        public bool scan_settings_removable_disks { get; set; }
        public bool scan_settings_update_signatures { get; set; }
        public List<Antivirus_Exclusions> scan_directories { get; set; }
    }

    #endregion

    private async Task Load_Policy(string id)
    {
        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            string query = "SELECT * FROM policies WHERE id = @id;";

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@id", id);

            Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "MySQL_Prepared_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        policy_name = reader["name"].ToString() ?? String.Empty;
                        antivirus_settings_json = String.IsNullOrEmpty(reader["antivirus_settings"].ToString()) ? "[]" : reader["antivirus_settings"].ToString() ?? "[]";
                        antivirus_exclusions_json = String.IsNullOrEmpty(reader["antivirus_exclusions"].ToString()) ? "[]" : reader["antivirus_exclusions"].ToString() ?? "[]";
                        antivirus_scan_jobs_json = String.IsNullOrEmpty(reader["antivirus_scan_jobs"].ToString()) ? "[]" : reader["antivirus_scan_jobs"].ToString() ?? "[]";
                        antivirus_controlled_folder_access_folders_json = String.IsNullOrEmpty(reader["antivirus_controlled_folder_access_folders"].ToString()) ? "[]" : reader["antivirus_controlled_folder_access_folders"].ToString() ?? "[]";
                        sensors_json = String.IsNullOrEmpty(reader["sensors"].ToString()) ? "[]" : reader["sensors"].ToString() ?? "[]";
                        jobs_json = String.IsNullOrEmpty(reader["jobs"].ToString()) ? "[]" : reader["jobs"].ToString() ?? "[]";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Load_Policy (DB)", "MySQL_Query", ex.ToString());
        }
        finally
        {
            conn.Close();
        }

        Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "JSON (antivirus_settings_json)", antivirus_settings_json);
        Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "JSON (antivirus_exclusions_json)", antivirus_exclusions_json);
        Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "JSON (antivirus_scan_jobs_json)", antivirus_scan_jobs_json);
        Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "JSON (sensors)", sensors_json);
        Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "JSON (jobs)", jobs_json);
    }

    private async Task Save_Policy()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        #region Antivirus

        string antivirus_settings_json_string = String.Empty;

        //Convert displayed direction to computable
        if (antivirus_scan_direction_display == Localizer["inbound_outbound"])
            antivirus_scan_direction = 0;
        else if (antivirus_scan_direction_display == Localizer["inbound"])
            antivirus_scan_direction = 1;
        else if (antivirus_scan_direction_display == Localizer["outbound"])
            antivirus_scan_direction = 2;

        try
        {       
            string date = antivirus_controlled_folder_access_folders_whitelist_until_date.Value.ToString("yyyy-MM-ddTHH:mm:ss");

            Antivirus_Settings antivirus_settings = new Antivirus_Settings
                {
                    enabled = antivirus_enabled,
                    security_center = antivirus_security_center,
                    security_center_tray = antivirus_security_center_tray,
                    check_hourly_signatures = antivirus_check_hourly_signatures,
                    allow_metered_updates = antivirus_allow_metered_updates,
                    delete_quarantine_six_months = antivirus_delete_quarantine_six_months,
                    scan_direction = Convert.ToInt32(antivirus_scan_direction),
                    file_hash_computing = antivirus_file_hash_computing,
                    block_at_first_seen = antivirus_block_at_first_seen,
                    scan_archives = antivirus_scan_archives,
                    scan_mails = antivirus_scan_mails,
                    net_scan_network_files = antivirus_net_scan_network_files,
                    net_filter_incoming_connections = antivirus_net_filter_incoming_connections,
                    net_datagram_processing = antivirus_net_datagram_processing,
                    parser_tls = antivirus_parser_tls,
                    parser_rdp = antivirus_parser_rdp,
                    parser_ssh = antivirus_parser_ssh,
                    parser_http = antivirus_parser_http,
                    parser_dns = antivirus_parser_dns,
                    parser_dnsovertcp = antivirus_parser_dnsovertcp,

                    //Controlled Folder Access
                    controlled_folder_access_enabled = antivirus_controlled_folder_access_enabled,
                    controlled_folder_access_ruleset = antivirus_controlled_folder_access_ruleset,
                    controlled_folder_access_folders_whitelist_until_date = date,

                    //Notifications
                    notifications_controlled_folder_actions_blocked_action = antivirus_notifications_controlled_folder_actions_blocked_action,
                    notifications_malwareprotection_antivirus_enabled = antivirus_notifications_malwareprotection_antivirus_enabled,
                    notifications_malwareprotection_antivirus_disabled = antivirus_notifications_malwareprotection_antivirus_disabled,
                    notifications_malwareprotection_antispyware_disabled = antivirus_notifications_malwareprotection_antispyware_disabled,
                    notifications_malwareprotection_antispyware_enabled = antivirus_notifications_malwareprotection_antispyware_enabled,
                    notifications_malwareprotection_behavior_detected = antivirus_notifications_malwareprotection_behavior_detected,
                    notifications_malwareprotection_config_changed = antivirus_notifications_malwareprotection_config_changed,
                    notifications_malwareprotection_disabled_expired_state = antivirus_notifications_malwareprotection_disabled_expired_state,
                    notifications_malwareprotection_engine_failure = antivirus_notifications_malwareprotection_engine_failure,
                    notifications_malwareprotection_engine_update_platformoutofdate = antivirus_notifications_malwareprotection_engine_update_platformoutofdate,
                    notifications_malwareprotection_expiration_warning_state = antivirus_notifications_malwareprotection_expiration_warning_state,
                    notifications_malwareprotection_folder_guard_sector_block = antivirus_notifications_malwareprotection_folder_guard_sector_block,
                    notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed = antivirus_notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed,
                    notifications_malwareprotection_malware_action_taken = antivirus_notifications_malwareprotection_malware_action_taken,
                    notifications_malwareprotection_malware_detected = antivirus_notifications_malwareprotection_malware_detected,
                    notifications_malwareprotection_os_eol = antivirus_notifications_malwareprotection_os_eol,
                    notifications_malwareprotection_os_expiring = antivirus_notifications_malwareprotection_os_expiring,
                    notifications_malwareprotection_platform_almostoutofdate = antivirus_notifications_malwareprotection_platform_almostoutofdate,
                    notifications_malwareprotection_platform_update_failed = antivirus_notifications_malwareprotection_platform_update_failed,
                    notifications_malwareprotection_protection_eol = antivirus_notifications_malwareprotection_protection_eol,
                    notifications_malwareprotection_quarantine_delete = antivirus_notifications_malwareprotection_quarantine_delete,
                    notifications_malwareprotection_quarantine_restore = antivirus_notifications_malwareprotection_quarantine_restore,
                    notifications_malwareprotection_rtp_disabled = antivirus_notifications_malwareprotection_rtp_disabled,
                    notifications_malwareprotection_rtp_enabled = antivirus_notifications_malwareprotection_rtp_enabled,
                    notifications_malwareprotection_rtp_feature_configured = antivirus_notifications_malwareprotection_rtp_feature_configured,
                    notifications_malwareprotection_rtp_feature_failure = antivirus_notifications_malwareprotection_rtp_feature_failure,
                    notifications_malwareprotection_rtp_feature_recovered = antivirus_notifications_malwareprotection_rtp_feature_recovered,
                    notifications_malwareprotection_scan_cancelled = antivirus_notifications_malwareprotection_scan_cancelled,
                    notifications_malwareprotection_scan_completed = antivirus_notifications_malwareprotection_scan_completed,
                    notifications_malwareprotection_scan_failed = antivirus_notifications_malwareprotection_scan_failed,
                    notifications_malwareprotection_scan_paused = antivirus_notifications_malwareprotection_scan_paused,
                    notifications_malwareprotection_signature_reversion = antivirus_notifications_malwareprotection_signature_reversion,
                    notifications_malwareprotection_signature_update_failed = antivirus_notifications_malwareprotection_signature_update_failed,
                    notifications_malwareprotection_signature_updated = antivirus_notifications_malwareprotection_signature_updated,
                    notifications_malwareprotection_state_malware_action_critically_failed = antivirus_notifications_malwareprotection_state_malware_action_critically_failed,
                    notifications_malwareprotection_state_malware_detected = antivirus_notifications_malwareprotection_state_malware_detected,
                    notifications_malwareprotection_state_malware_action_taken = antivirus_notifications_malwareprotection_state_malware_action_taken,
                    notifications_tamper_protection_blocked_changes = antivirus_notifications_tamper_protection_blocked_changes,

                    notifications_netlock_mail = antivirus_notifications_netlock_mail,
                    notifications_netlock_microsoft_teams = antivirus_notifications_netlock_microsoft_teams,
                    notifications_netlock_telegram = antivirus_notifications_netlock_telegram,
                    notifications_netlock_ntfy_sh = antivirus_notifications_netlock_ntfy_sh,
                };

            // Konvertiere das AntivirusPolicy-Objekt in ein JSON-String.
            antivirus_settings_json_string = JsonSerializer.Serialize(antivirus_settings);

            Logging.Handler.Debug("/Policy_Settings -> Save_Policy (Create antivirus_settings_json)", "Result", antivirus_settings_json_string);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Save_Policy (Create antivirus_settings_json)", "Result", ex.ToString());
        }

        #endregion

        #region Sensors

        foreach (var sensor in sensors_mysql_data)
        {
            Logging.Handler.Debug("/Policy_Settings -> Save_Policy (Create sensor_json)", "tesssst", sensor.name + " " + sensor.enabled.ToString());
        }

        //Create enabled sensor jsons
        try
        {
            List<Sensors_Activation_State> sensor_data_list = sensors_mysql_data
                .Where(sensor => sensor.enabled)
                .Select(sensor => new Sensors_Activation_State { id = sensor.id })
                .ToList();

            sensors_json = JsonSerializer.Serialize(sensor_data_list, new JsonSerializerOptions { WriteIndented = true });

            Logging.Handler.Debug("/Policy_Settings -> Save_Policy (Create new sensor_json)", "Result", sensors_json);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Save_Policy (Create new sensor_json)", "Result", ex.ToString());
        }

        #endregion

        #region Jobs

        //Create enabled job jsons
        try
        {
            List<Jobs_Activation_State> job_data_list = jobs_mysql_data
                .Where(job => job.enabled)
                .Select(job => new Jobs_Activation_State { id = job.id })
                .ToList();

            jobs_json = JsonSerializer.Serialize(job_data_list, new JsonSerializerOptions { WriteIndented = true });

            Logging.Handler.Debug("/Policy_Settings -> Save_Policy (Create new job_json)", "Result", jobs_json);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Save_Policy (Create new job_json)", "Result", ex.ToString());
        }

        #endregion

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        bool success = false;

        try
        {
            await conn.OpenAsync();

            string execute_query = "UPDATE policies SET antivirus_settings = @antivirus_settings, antivirus_exclusions = @antivirus_exclusions, antivirus_scan_jobs = @antivirus_scan_jobs, antivirus_controlled_folder_access_folders = @antivirus_controlled_folder_access_folders, sensors = @sensors, jobs = @jobs WHERE name = @policy_name;";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@policy_name", policy_name);
            cmd.Parameters.AddWithValue("@antivirus_settings", antivirus_settings_json_string);
            cmd.Parameters.AddWithValue("@antivirus_exclusions", antivirus_exclusions_json);
            cmd.Parameters.AddWithValue("@antivirus_scan_jobs", antivirus_scan_jobs_json);
            cmd.Parameters.AddWithValue("@antivirus_controlled_folder_access_folders", antivirus_controlled_folder_access_folders_json);
            cmd.Parameters.AddWithValue("@sensors", sensors_json);
            cmd.Parameters.AddWithValue("@jobs", jobs_json);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Save_Policy (To DB)", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            await Classes.MySQL.Handler.Reset_Device_Sync(true, String.Empty);
            this.Snackbar.Add(Localizer["saved"], Severity.Success);
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
        }
    }

    #region Antivirus Settings

    private async Task Antivirus_Settings_Load()
    {
        //Extract antivirus_settings_json
        try
        {
            Logging.Handler.Debug("/Policy_Settings -> Antivirus_Settings_Load (Extract)", "antivirus_settings_json", antivirus_settings_json);

            JsonDocument jsonDocument = JsonDocument.Parse(antivirus_settings_json);
            antivirus_enabled = jsonDocument.RootElement.GetProperty("enabled").GetBoolean();
            antivirus_security_center = jsonDocument.RootElement.GetProperty("security_center").GetBoolean();
            antivirus_security_center_tray = jsonDocument.RootElement.GetProperty("security_center_tray").GetBoolean();
            antivirus_check_hourly_signatures = jsonDocument.RootElement.GetProperty("check_hourly_signatures").GetBoolean();
            antivirus_allow_metered_updates = jsonDocument.RootElement.GetProperty("allow_metered_updates").GetBoolean();
            antivirus_delete_quarantine_six_months = jsonDocument.RootElement.GetProperty("delete_quarantine_six_months").GetBoolean();
            antivirus_scan_direction = jsonDocument.RootElement.GetProperty("scan_direction").GetInt32();
            antivirus_file_hash_computing = jsonDocument.RootElement.GetProperty("file_hash_computing").GetBoolean();
            antivirus_block_at_first_seen = jsonDocument.RootElement.GetProperty("block_at_first_seen").GetBoolean();
            antivirus_scan_archives = jsonDocument.RootElement.GetProperty("scan_archives").GetBoolean();
            antivirus_scan_mails = jsonDocument.RootElement.GetProperty("scan_mails").GetBoolean();
            antivirus_net_scan_network_files = jsonDocument.RootElement.GetProperty("net_scan_network_files").GetBoolean();
            antivirus_net_filter_incoming_connections = jsonDocument.RootElement.GetProperty("net_filter_incoming_connections").GetBoolean();
            antivirus_net_datagram_processing = jsonDocument.RootElement.GetProperty("net_datagram_processing").GetBoolean();
            antivirus_parser_tls = jsonDocument.RootElement.GetProperty("parser_tls").GetBoolean();
            antivirus_parser_rdp = jsonDocument.RootElement.GetProperty("parser_rdp").GetBoolean();
            antivirus_parser_ssh = jsonDocument.RootElement.GetProperty("parser_ssh").GetBoolean();
            antivirus_parser_http = jsonDocument.RootElement.GetProperty("parser_http").GetBoolean();
            antivirus_parser_dns = jsonDocument.RootElement.GetProperty("parser_dns").GetBoolean();
            antivirus_parser_dnsovertcp = jsonDocument.RootElement.GetProperty("parser_dnsovertcp").GetBoolean();

            //Controlled Folder Access
            antivirus_controlled_folder_access_enabled = jsonDocument.RootElement.GetProperty("controlled_folder_access_enabled").GetBoolean();
            antivirus_controlled_folder_access_ruleset = jsonDocument.RootElement.GetProperty("controlled_folder_access_ruleset").GetString();
            antivirus_controlled_folder_access_folders_whitelist_until_date = jsonDocument.RootElement.GetProperty("controlled_folder_access_folders_whitelist_until_date").GetDateTime();

            //Notifications
            antivirus_notifications_controlled_folder_actions_blocked_action = jsonDocument.RootElement.GetProperty("notifications_controlled_folder_actions_blocked_action").GetBoolean();
            antivirus_notifications_malwareprotection_antivirus_enabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_antivirus_enabled").GetBoolean();
            antivirus_notifications_malwareprotection_antivirus_disabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_antivirus_disabled").GetBoolean();
            antivirus_notifications_malwareprotection_antispyware_disabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_antispyware_disabled").GetBoolean();
            antivirus_notifications_malwareprotection_antispyware_enabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_antispyware_enabled").GetBoolean();
            antivirus_notifications_malwareprotection_behavior_detected = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_behavior_detected").GetBoolean();
            antivirus_notifications_malwareprotection_config_changed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_config_changed").GetBoolean();
            antivirus_notifications_malwareprotection_disabled_expired_state = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_disabled_expired_state").GetBoolean();
            antivirus_notifications_malwareprotection_engine_failure = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_engine_failure").GetBoolean();
            antivirus_notifications_malwareprotection_engine_update_platformoutofdate = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_engine_update_platformoutofdate").GetBoolean();
            antivirus_notifications_malwareprotection_expiration_warning_state = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_expiration_warning_state").GetBoolean();
            antivirus_notifications_malwareprotection_folder_guard_sector_block = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_folder_guard_sector_block").GetBoolean();
            antivirus_notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed").GetBoolean();
            antivirus_notifications_malwareprotection_malware_action_taken = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_malware_action_taken").GetBoolean();
            antivirus_notifications_malwareprotection_malware_detected = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_malware_detected").GetBoolean();
            antivirus_notifications_malwareprotection_os_eol = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_os_eol").GetBoolean();
            antivirus_notifications_malwareprotection_os_expiring = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_os_expiring").GetBoolean();
            antivirus_notifications_malwareprotection_platform_almostoutofdate = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_platform_almostoutofdate").GetBoolean();
            antivirus_notifications_malwareprotection_platform_update_failed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_platform_update_failed").GetBoolean();
            antivirus_notifications_malwareprotection_protection_eol = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_protection_eol").GetBoolean();
            antivirus_notifications_malwareprotection_quarantine_delete = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_quarantine_delete").GetBoolean();
            antivirus_notifications_malwareprotection_quarantine_restore = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_quarantine_restore").GetBoolean();
            antivirus_notifications_malwareprotection_rtp_disabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_rtp_disabled").GetBoolean();
            antivirus_notifications_malwareprotection_rtp_enabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_rtp_enabled").GetBoolean();
            antivirus_notifications_malwareprotection_rtp_feature_configured = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_rtp_feature_configured").GetBoolean();
            antivirus_notifications_malwareprotection_rtp_feature_failure = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_rtp_feature_failure").GetBoolean();
            antivirus_notifications_malwareprotection_rtp_feature_recovered = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_rtp_feature_recovered").GetBoolean();
            antivirus_notifications_malwareprotection_scan_cancelled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_scan_cancelled").GetBoolean();
            antivirus_notifications_malwareprotection_scan_completed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_scan_completed").GetBoolean();
            antivirus_notifications_malwareprotection_scan_failed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_scan_failed").GetBoolean();
            antivirus_notifications_malwareprotection_scan_paused = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_scan_paused").GetBoolean();
            antivirus_notifications_malwareprotection_signature_reversion = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_signature_reversion").GetBoolean();
            antivirus_notifications_malwareprotection_signature_update_failed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_signature_update_failed").GetBoolean();
            antivirus_notifications_malwareprotection_signature_updated = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_signature_updated").GetBoolean();
            antivirus_notifications_malwareprotection_state_malware_action_critically_failed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_state_malware_action_critically_failed").GetBoolean();
            antivirus_notifications_malwareprotection_state_malware_detected = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_state_malware_detected").GetBoolean();
            antivirus_notifications_malwareprotection_state_malware_action_taken = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_state_malware_action_taken").GetBoolean();
            antivirus_notifications_tamper_protection_blocked_changes = jsonDocument.RootElement.GetProperty("notifications_tamper_protection_blocked_changes").GetBoolean();

            antivirus_notifications_netlock_mail = jsonDocument.RootElement.GetProperty("notifications_netlock_mail").GetBoolean();
            antivirus_notifications_netlock_microsoft_teams = jsonDocument.RootElement.GetProperty("notifications_netlock_microsoft_teams").GetBoolean();
            antivirus_notifications_netlock_telegram = jsonDocument.RootElement.GetProperty("notifications_netlock_telegram").GetBoolean();
            antivirus_notifications_netlock_ntfy_sh = jsonDocument.RootElement.GetProperty("notifications_netlock_ntfy_sh").GetBoolean();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Antivirus_Settings_Load (Extract)", "antivirus_settings_json", ex.ToString());
        }

        //Convert to display
        if (antivirus_scan_direction == 0)
            antivirus_scan_direction_display = @Localizer["inbound_outbound"];
        else if (antivirus_scan_direction == 1)
            antivirus_scan_direction_display = @Localizer["inbound"];
        else if (antivirus_scan_direction == 2)
            antivirus_scan_direction_display = @Localizer["outbound"];
    }

    #endregion

    #region Antivirus Exclusions Table

    public List<Antivirus_Exclusions_Entity> antivirus_exclusions_mysql_data;

    public class Antivirus_Exclusions_Entity
    {
        public string id { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string type { get; set; } = String.Empty;
        public string exclusion { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
    }

    private string antivirus_exclusions_table_view_port = "70vh";
    private string antivirus_exclusions_table_sorted_column;
    private string antivirus_exclusions_table_search_string = "";

    private bool Antivirus_Exclusions_Table_Filter_Func(Antivirus_Exclusions_Entity row)
    {
        if (string.IsNullOrEmpty(antivirus_exclusions_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(antivirus_exclusions_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.type.Contains(antivirus_exclusions_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.exclusion.Contains(antivirus_exclusions_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(antivirus_exclusions_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string antivirus_exclusions_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Antivirus_Exclusions_RowClickHandler(Antivirus_Exclusions_Entity row)
    {
        antivirus_exclusions_selectedRowContent = row.id;
    }

    private async void Antivirus_Exclusions_RowDblClickHandler(Antivirus_Exclusions_Entity row)
    {
        await Antivirus_Exclusion_Edit_Exclusion_Dialog(row.id);
    }

    private string Antivirus_Exclusions_GetRowClass(Antivirus_Exclusions_Entity row)
    {
        return row.id == antivirus_exclusions_selectedRowContent ? (_isDarkMode ? "selected-row-dark" : "selected-row-light") : String.Empty;
    }

    private async Task Antivirus_Exclusions_Load()
    {
        try
        {
            antivirus_exclusions_mysql_data = new List<Antivirus_Exclusions_Entity>();

            JsonArray antivirus_exclusions_array = JsonNode.Parse(antivirus_exclusions_json).AsArray();

            foreach (var _object in antivirus_exclusions_array)
            {
                string type = _object["type"].ToString();

                if (type == "file")
                    type = Localizer["file"];
                else if (type == "directory")
                    type = Localizer["directory"];
                else if (type == "extension")
                    type = Localizer["file_type"];
                else if (type == "process")
                    type = Localizer["process"];

                Antivirus_Exclusions_Entity antivirus_exclusions_entity = new Antivirus_Exclusions_Entity
                    {
                        id = _object["id"].ToString(),
                        date = _object["date"].ToString(),
                        type = type,
                        exclusion = _object["exclusion"].ToString(),
                        description = _object["description"].ToString(),
                    };

                antivirus_exclusions_mysql_data.Add(antivirus_exclusions_entity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Antivirus_Exclusions_Load", "Result", ex.ToString());
        }
    }

    private async Task Antivirus_Exclusions_Export_Table_Dialog()
    {
        //await Show_Export_Table_Dialog("applications_installed");
    }

    private bool antivirus_exclusion_add_dialog_open = false;

    private async Task Antivirus_Exclusion_Add_Dialog()
    {
        if (antivirus_exclusion_add_dialog_open)
            return;

        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            BackgroundClass = "dialog-blurring",
        };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("antivirus_exclusions_json", antivirus_exclusions_json);

        antivirus_exclusion_add_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Policies.Antivirus.Exclusions.Add_Exclusion_Dialog>(string.Empty, parameters, options).Result;

        antivirus_exclusion_add_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/policy_settings -> Add_Exclusion_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_exclusions_json = result.Data.ToString();

            await Antivirus_Exclusions_Load();
        }
    }

    private bool antivirus_exclusion_edit_dialog_open = false;

    private async Task Antivirus_Exclusion_Edit_Exclusion_Dialog(string id)
    { 
        if (antivirus_exclusion_edit_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("id", id);
        parameters.Add("antivirus_exclusions_json", antivirus_exclusions_json);

        antivirus_exclusion_edit_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Policies.Antivirus.Exclusions.Edit_Exclusion_Dialog>(string.Empty, parameters, options).Result;

        antivirus_exclusion_edit_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/policy_settings -> Edit_Exclusion_Dialog", "Result", result.Data.ToString() ?? String.Empty);

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_exclusions_json = result.Data.ToString();

            await Antivirus_Exclusions_Load();
        }
    }

    private async Task Antivirus_Exclusion_Delete_Dialog(string id)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            BackgroundClass = "dialog-blurring",
        };

        bool? dialog_result = await DialogService.ShowMessageBox(Localizer["warning"], Localizer["Are you sure you want to delete the directory?"], yesText: Localizer["confirm"], cancelText: Localizer["cancel"], options: options);

        bool state = Convert.ToBoolean(dialog_result == null ? "false" : "true");

        if (state)
        {
            //Get exclusion
            List<Antivirus_Exclusions_Entity> exclusions = JsonSerializer.Deserialize<List<Antivirus_Exclusions_Entity>>(antivirus_exclusions_json);

            //Remove it
            exclusions.RemoveAll(exclusion => exclusion.id == antivirus_exclusions_selectedRowContent);

            antivirus_exclusions_json = JsonSerializer.Serialize(exclusions, new JsonSerializerOptions { WriteIndented = true });

            Logging.Handler.Debug("/Policy_Settings (Delete_Exclusion_Dialog) -> OK", "antivirus_exclusions_json", antivirus_exclusions_json);

            await Antivirus_Exclusions_Load();
        }
    }

    #endregion

    #region Antivirus Scan Jobs Table

    public List<Antivirus_Scan_Jobs_Entity> antivirus_scan_jobs_mysql_data;

    public class Antivirus_Scan_Jobs_Entity
    {
        public string id { get; set; } = String.Empty;
        public string enabled { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string time_scheduler_type { get; set; } = String.Empty;
        public string time_scheduler_time { get; set; } = String.Empty;
        public string time_scheduler_monday { get; set; } = String.Empty;
        public string time_scheduler_tuesday { get; set; } = String.Empty;
        public string time_scheduler_wednesday { get; set; } = String.Empty;
        public string time_scheduler_thursday { get; set; } = String.Empty;
        public string time_scheduler_friday { get; set; } = String.Empty;
        public string time_scheduler_saturday { get; set; } = String.Empty;
        public string time_scheduler_sunday { get; set; } = String.Empty;
        public string scan_type { get; set; } = String.Empty;
        public string scan_settings_cpu_usage { get; set; } = String.Empty;
        public string scan_settings_scan_on_battery { get; set; } = String.Empty;
        public string scan_settings_network_drives { get; set; } = String.Empty;
        public string scan_settings_removable_disks { get; set; } = String.Empty;
        public string scan_settings_update_signatures { get; set; } = String.Empty;
        public string scan_directories_json { get; set; } = String.Empty;
    }

    private string antivirus_scan_jobs_table_view_port = "70vh";
    private string antivirus_scan_jobs_table_sorted_column;
    private string antivirus_scan_jobs_table_search_string = "";

    private bool Antivirus_Scan_Jobs_Table_Filter_Func(Antivirus_Scan_Jobs_Entity row)
    {
        if (string.IsNullOrEmpty(antivirus_scan_jobs_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.enabled.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_type.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_time.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_monday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_tuesday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_wednesday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_thursday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_friday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_saturday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_sunday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_type.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_settings_cpu_usage.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_settings_scan_on_battery.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_settings_network_drives.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_settings_removable_disks.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_settings_update_signatures.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string antivirus_scan_jobs_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    private void Antivirus_Scan_Jobs_RowClickHandler(Antivirus_Scan_Jobs_Entity row)
    {
        antivirus_scan_jobs_selectedRowContent = row.id;
    }

    private async void Antivirus_Scan_Jobs_RowDblClickHandler(Antivirus_Scan_Jobs_Entity row)
    {
        await Antivirus_Scan_Job_Edit_Dialog(row.id);
    }

    private string Antivirus_Scan_Jobs_GetRowClass(Antivirus_Scan_Jobs_Entity row)
    {
        return row.id == antivirus_scan_jobs_selectedRowContent ? (_isDarkMode ? "selected-row-dark" : "selected-row-light") : String.Empty;
    }

    private async Task Antivirus_Scan_Jobs_Load()
    {
        try
        {
            antivirus_scan_jobs_mysql_data = new List<Antivirus_Scan_Jobs_Entity>();

            Logging.Handler.Debug("/policy_settings -> Antivirus_Scan_Jobs_Load", "antivirus_scan_jobs_json", antivirus_scan_jobs_json);

            JsonArray antivirus_scan_jobs_array = JsonNode.Parse(antivirus_scan_jobs_json).AsArray();

            foreach (var _object in antivirus_scan_jobs_array)
            {
                string id = _object["id"].ToString();
                string enabled = _object["enabled"].ToString();
                string time_scheduler_type = _object["time_scheduler_type"].ToString();
                string time_scheduler_monday = _object["time_scheduler_monday"].ToString();
                string time_scheduler_tuesday = _object["time_scheduler_tuesday"].ToString();
                string time_scheduler_wednesday = _object["time_scheduler_wednesday"].ToString();
                string time_scheduler_thursday = _object["time_scheduler_thursday"].ToString();
                string time_scheduler_friday = _object["time_scheduler_friday"].ToString();
                string time_scheduler_saturday = _object["time_scheduler_saturday"].ToString();
                string time_scheduler_sunday = _object["time_scheduler_sunday"].ToString();
                string scan_type = _object["scan_type"].ToString();
                string scan_settings_cpu_usage = _object["scan_settings_cpu_usage"].ToString();
                string scan_settings_scan_on_battery = _object["scan_settings_scan_on_battery"].ToString();
                string scan_settings_network_drives = _object["scan_settings_network_drives"].ToString();
                string scan_settings_removable_disks = _object["scan_settings_removable_disks"].ToString();
                string scan_settings_update_signatures = _object["scan_settings_update_signatures"].ToString();

                if (enabled == "true")
                    enabled = Localizer["enabled"];
                else if (enabled == "false")
                    enabled = Localizer["disabled"];

                if (time_scheduler_type == "0")
                    time_scheduler_type= Localizer["schedule_system_boot"];
                else if (time_scheduler_type == "1")
                    time_scheduler_type = Localizer["schedule_date_time"];
                else if (time_scheduler_type == "2")
                    time_scheduler_type = Localizer["schedule_x_seconds"];
                else if (time_scheduler_type == "3")
                    time_scheduler_type = Localizer["schedule_x_minutes"];
                else if (time_scheduler_type == "4")
                    time_scheduler_type = Localizer["schedule_x_hours"];
                else if (time_scheduler_type == "5")
                    time_scheduler_type = Localizer["schedule_date_x_seconds"];
                else if (time_scheduler_type == "6")
                    time_scheduler_type = Localizer["schedule_date_x_minutes"];
                else if (time_scheduler_type == "7")
                    time_scheduler_type = Localizer["schedule_date_x_hours"];
                else if (time_scheduler_type == "8")
                    time_scheduler_type = Localizer["schedule_days_x_time"];
                else if (time_scheduler_type == "9")
                    time_scheduler_type = Localizer["schedule_days_x_seconds"];
                else if (time_scheduler_type == "10")
                    time_scheduler_type = Localizer["schedule_days_x_minutes"];
                else if (time_scheduler_type == "11")
                    time_scheduler_type = Localizer["schedule_days_x_hours"];

                if (time_scheduler_monday == "true")
                    time_scheduler_monday = Localizer["yes"];
                else if (time_scheduler_monday == "false")
                    time_scheduler_monday = Localizer["no"];

                if (time_scheduler_tuesday == "true")
                    time_scheduler_tuesday = Localizer["yes"];
                else if (time_scheduler_tuesday == "false")
                    time_scheduler_tuesday = Localizer["no"];

                if (time_scheduler_wednesday == "true")
                    time_scheduler_wednesday = Localizer["yes"];
                else if (time_scheduler_wednesday == "false")
                    time_scheduler_wednesday = Localizer["no"];

                if (time_scheduler_thursday == "true")
                    time_scheduler_thursday = Localizer["yes"];
                else if (time_scheduler_thursday == "false")
                    time_scheduler_thursday = Localizer["no"];

                if (time_scheduler_friday == "true")
                    time_scheduler_friday = Localizer["yes"];
                else if (time_scheduler_friday == "false")
                    time_scheduler_friday = Localizer["no"];

                if (time_scheduler_saturday == "true")
                    time_scheduler_saturday = Localizer["yes"];
                else if (time_scheduler_saturday == "false")
                    time_scheduler_saturday = Localizer["no"];

                if (time_scheduler_sunday == "true")
                    time_scheduler_sunday = Localizer["yes"];
                else if (time_scheduler_sunday == "false")
                    time_scheduler_sunday = Localizer["no"];

                if (scan_type == "0")
                    scan_type = Localizer["quick_scan"];
                else if (scan_type == "1")
                    scan_type = Localizer["full_scan"];
                else if (scan_type == "2")
                    scan_type = Localizer["custom"];

                if (scan_settings_scan_on_battery == "true")
                    scan_settings_scan_on_battery = Localizer["yes"];
                else if (scan_settings_scan_on_battery == "false")
                    scan_settings_scan_on_battery = Localizer["no"];

                if (scan_settings_network_drives == "true")
                    scan_settings_network_drives = Localizer["yes"];
                else if (scan_settings_network_drives == "false")
                    scan_settings_network_drives = Localizer["no"];

                if (scan_settings_removable_disks == "true")
                    scan_settings_removable_disks = Localizer["yes"];
                else if (scan_settings_removable_disks == "false")
                    scan_settings_removable_disks = Localizer["no"];

                if (scan_settings_update_signatures == "true")
                    scan_settings_update_signatures = Localizer["yes"];
                else if (scan_settings_update_signatures == "false")
                    scan_settings_update_signatures = Localizer["no"];

                Antivirus_Scan_Jobs_Entity antivirus_scan_jobs_entity = new Antivirus_Scan_Jobs_Entity
                    {
                        id = id,
                        enabled = enabled,
                        name = _object["name"].ToString(),
                        date = _object["date"].ToString(),
                        description = _object["description"].ToString(),
                        time_scheduler_type = time_scheduler_type,
                        time_scheduler_time = _object["time_scheduler_time"].ToString(),
                        time_scheduler_monday = time_scheduler_monday,
                        time_scheduler_tuesday = time_scheduler_tuesday,
                        time_scheduler_wednesday = time_scheduler_wednesday,
                        time_scheduler_thursday = time_scheduler_thursday,
                        time_scheduler_friday = time_scheduler_friday,
                        time_scheduler_saturday = time_scheduler_saturday,
                        time_scheduler_sunday = time_scheduler_sunday,
                        scan_type = scan_type,
                        scan_settings_cpu_usage = scan_settings_cpu_usage,
                        scan_settings_scan_on_battery = scan_settings_scan_on_battery,
                        scan_settings_network_drives = scan_settings_network_drives,
                        scan_settings_removable_disks = scan_settings_removable_disks,
                        scan_settings_update_signatures = scan_settings_update_signatures,
                        scan_directories_json = _object["scan_directories_json"].ToString(),
                    };

                antivirus_scan_jobs_mysql_data.Add(antivirus_scan_jobs_entity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Antivirus_Scan_Jobs_Load", "Result", ex.ToString());
        }
    }

    private async Task Antivirus_Scan_Jobs_Export_Table_Dialog()
    {
        //await Show_Export_Table_Dialog("applications_installed");
    }

    private bool antivirus_scan_job_add_dialog_open = false;

    private async Task Antivirus_Scan_Job_Add_Dialog()
    {
        if (antivirus_scan_job_add_dialog_open)
            return;

        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            BackgroundClass = "dialog-blurring",
        };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("antivirus_scan_jobs_json", antivirus_scan_jobs_json);

        antivirus_scan_job_add_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Policies.Antivirus.Scan_Jobs.Add_Scan_Job_Dialog>(string.Empty, parameters, options).Result;

        antivirus_scan_job_add_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/policy_settings -> Add_Scan_Job_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_scan_jobs_json = result.Data.ToString();

            await Antivirus_Scan_Jobs_Load();
        }
    }

    private bool antivirus_scan_job_edit_dialog_open = false;

    private async Task Antivirus_Scan_Job_Edit_Dialog(string id)
    {
        if (antivirus_scan_job_edit_dialog_open)
            return;

        var options = new DialogOptions
        {
             CloseButton = true,
             FullWidth = true,
             MaxWidth = MaxWidth.Medium,
             BackgroundClass = "dialog-blurring",
        };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("id", id);
        parameters.Add("antivirus_scan_jobs_json", antivirus_scan_jobs_json);

        antivirus_scan_job_edit_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Policies.Antivirus.Scan_Jobs.Edit_Scan_Job_Dialog>(string.Empty, parameters, options).Result;

        antivirus_scan_job_edit_dialog_open = false; 

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/policy_settings -> Edit_Exclusion_Dialog", "Result", result.Data.ToString() ?? String.Empty);

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_scan_jobs_json = result.Data.ToString();

            await Antivirus_Scan_Jobs_Load();
        }
    }

    private async Task Antivirus_Scan_Job_Delete_Dialog(string id)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            BackgroundClass = "dialog-blurring",
        };

        bool? dialog_result = await DialogService.ShowMessageBox(Localizer["warning"], Localizer["Are you sure you want to delete the scan job?"], yesText: Localizer["confirm"], cancelText: Localizer["cancel"], options: options);

        bool state = Convert.ToBoolean(dialog_result == null ? "false" : "true");

        if (state)
        {
            //Get exclusion
            List<Antivirus_Scan_Jobs_Entity> scan_jobs = JsonSerializer.Deserialize<List<Antivirus_Scan_Jobs_Entity>>(antivirus_scan_jobs_json);

            //Remove it
            scan_jobs.RemoveAll(scan_job => scan_job.id == id);

            antivirus_scan_jobs_json = JsonSerializer.Serialize(scan_jobs, new JsonSerializerOptions { WriteIndented = true });

            Logging.Handler.Debug("/Policy_Settings (Delete_Exclusion_Dialog) -> OK", "antivirus_scan_jobs_json", antivirus_scan_jobs_json);

            await Antivirus_Scan_Jobs_Load();
        }
    }

    #endregion

    #region Antivirus Controlled Folder Access Table

    #region Antivirus Controlled Folder Access Folders
    private string antivirus_controlled_folder_access_folders_json = String.Empty;

    public List<Antivirus_Controlled_Folder_Access_Folders_Entity> antivirus_controlled_folder_access_folders_mysql_data;

    public class Antivirus_Controlled_Folder_Access_Folders_Entity
    {
        public string id { get; set; } = String.Empty;
        public string folder { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
    }

    private string antivirus_controlled_folder_access_folders_table_view_port = "70vh";
    private string antivirus_controlled_folder_access_folders_table_sorted_column;
    private string antivirus_controlled_folder_access_folders_table_search_string = "";

    private MudDatePicker antivirus_controlled_folder_access_folders_date_picker;

    private bool Antivirus_Controlled_Folder_Access_Folders_Table_Filter_Func(Antivirus_Controlled_Folder_Access_Folders_Entity row)
    {
        if (string.IsNullOrEmpty(antivirus_controlled_folder_access_folders_table_search_string))
            return true;

        //Search logic for each column
        return row.folder.Contains(antivirus_controlled_folder_access_folders_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(antivirus_controlled_folder_access_folders_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(antivirus_controlled_folder_access_folders_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string antivirus_controlled_folder_access_folders_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    private void Antivirus_Controlled_Folder_Access_Folders_RowClickHandler(Antivirus_Controlled_Folder_Access_Folders_Entity row)
    {
        antivirus_controlled_folder_access_folders_selectedRowContent = row.id;
    }

    private async void Antivirus_Controlled_Folder_Access_Folders_RowDblClickHandler(Antivirus_Controlled_Folder_Access_Folders_Entity row)
    {
        antivirus_controlled_folder_access_folders_selectedRowContent = row.id;

        await Antivirus_Controlled_Folder_Access_Folders_Edit_Dialog(row.id);
    }

    private string Antivirus_Controlled_Folder_Access_Folders_GetRowClass(Antivirus_Controlled_Folder_Access_Folders_Entity row)
    {
        return row.id == antivirus_controlled_folder_access_folders_selectedRowContent ? (_isDarkMode ? "selected-row-dark" : "selected-row-light") : String.Empty;
    }

    private async Task Antivirus_Controlled_Folder_Access_Folders_Load()
    {
        try
        {
            antivirus_controlled_folder_access_folders_mysql_data = new List<Antivirus_Controlled_Folder_Access_Folders_Entity>();

            JsonArray antivirus_controlled_folder_access_folders_array = JsonNode.Parse(antivirus_controlled_folder_access_folders_json).AsArray();

            foreach (var _object in antivirus_controlled_folder_access_folders_array)
            {
                Antivirus_Controlled_Folder_Access_Folders_Entity antivirus_controlled_folder_access_folders_entity = new Antivirus_Controlled_Folder_Access_Folders_Entity
                    {
                        id = _object["id"].ToString(),
                        folder = _object["folder"].ToString(),
                        date = _object["date"].ToString(),
                        description = _object["description"].ToString(),
                    };

                antivirus_controlled_folder_access_folders_mysql_data.Add(antivirus_controlled_folder_access_folders_entity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Antivirus_Controlled_Folder_Access_Folders_Load", "Result", ex.ToString());
        }
    }

    public List<string> antivirus_controlled_folder_access_rulesets = new List<string> { };

    private async Task Get_Antivirus_Controlled_Folder_Access_Rulesets()
    {
        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM antivirus_controlled_folder_access_rulesets;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        antivirus_controlled_folder_access_rulesets.Add(reader["name"].ToString());
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Get_Antivirus_Controlled_Folder_Access_Rulesets", "Result", ex.ToString());
        }
        finally
        {
            conn.Close();
        }
    }

    private async Task Antivirus_Controlled_Folder_Access_Folders_Export_Table_Dialog()
    {
        //await Show_Export_Table_Dialog("applications_installed");
    }

    private bool antivirus_controlled_folder_access_folders_add_dialog_open = false;

    private async Task Antivirus_Controlled_Folder_Access_Folders_Add_Dialog()
    {
        if (antivirus_controlled_folder_access_folders_add_dialog_open)
            return;

        var options = new DialogOptions
                {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("antivirus_controlled_folder_access_folders_json", antivirus_controlled_folder_access_folders_json);

        antivirus_controlled_folder_access_folders_add_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Policies.Antivirus.Controlled_Folder_Access_Folders.Add_Controlled_Folder_Access_Folders_Dialog>(string.Empty, parameters, options).Result;

        antivirus_controlled_folder_access_folders_add_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/policy_settings -> Add_Controlled_Folder_Access_Folders_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_controlled_folder_access_folders_json = result.Data.ToString();

            await Antivirus_Controlled_Folder_Access_Folders_Load();
        }
    }

    private bool antivirus_controlled_folder_access_folders_edit_dialog_open = false;

    private async Task Antivirus_Controlled_Folder_Access_Folders_Edit_Dialog(string id)
    {
        if (antivirus_controlled_folder_access_folders_edit_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("id", id);
        parameters.Add("antivirus_controlled_folder_access_folders_json", antivirus_controlled_folder_access_folders_json);

        antivirus_controlled_folder_access_folders_edit_dialog_open = false;

        var result = await this.DialogService.Show<Pages.Policies.Antivirus.Controlled_Folder_Access_Folders.Edit_Controlled_Folder_Access_Folders_Dialog>(string.Empty, parameters , options).Result;

        antivirus_controlled_folder_access_folders_edit_dialog_open = true;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/policy_settings -> Edit_Controlled_Folder_Access_Folders_Dialog", "Result", result.Data.ToString() ?? String.Empty);

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_controlled_folder_access_folders_json = result.Data.ToString();

            await Antivirus_Controlled_Folder_Access_Folders_Load();
        }
    }

    private async Task Antivirus_Controlled_Folder_Access_Folders_Delete_Dialog(string id)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            BackgroundClass = "dialog-blurring",
        };

        bool? dialog_result = await DialogService.ShowMessageBox(Localizer["warning"], Localizer["Are you sure you want to remove the folder?"], yesText: Localizer["confirm"], cancelText: Localizer["cancel"], options: options);

        bool state = Convert.ToBoolean(dialog_result == null ? "false" : "true");

        if (state)
        {   
            //Get folder
            List<Antivirus_Controlled_Folder_Access_Folders_Entity> folders = JsonSerializer.Deserialize<List<Antivirus_Controlled_Folder_Access_Folders_Entity>>(antivirus_controlled_folder_access_folders_json);

            //Remove it
            folders.RemoveAll(folder => folder.id == id);

            antivirus_controlled_folder_access_folders_json = JsonSerializer.Serialize(folders, new JsonSerializerOptions { WriteIndented = true });

            Logging.Handler.Debug("/Policy_Settings (Delete_Controlled_Folder_Access_Folders_Dialog) -> OK", "antivirus_controlled_folder_access_folders_json", antivirus_controlled_folder_access_folders_json);

            await Antivirus_Controlled_Folder_Access_Folders_Load();

            antivirus_controlled_folder_access_folders_selectedRowContent = String.Empty;
        }
    }

    #endregion

    #endregion

    #region Sensors
    private string sensors_json = "[ ]";

    public List<Sensors_Entity> sensors_mysql_data; //Datasource for table

    public class Sensors_Entity
    {
        public string id { get; set; } = String.Empty;
        public bool enabled { get; set; } = false;
        public string name { get; set; } = String.Empty;
        public string platform { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string category { get; set; } = String.Empty;
        public string sub_category { get; set; } = String.Empty;
        public string severity { get; set; } = String.Empty;
    }

    public class Sensors_Activation_State
    {
        public string id { get; set; } = String.Empty;
    }

    public class Sensors_Activation_State_List
    {
        public List<Sensors_Activation_State> names { get; set; }
    }

    private string sensors_table_sorted_column;
    private string sensors_table_search_string = String.Empty;

    private bool Sensors_Table_Filter_Func(Sensors_Entity row)
    {
        if (string.IsNullOrEmpty(sensors_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.author.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.category.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.sub_category.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.severity.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string sensors_selectedRowContent = ""; // Saving content of selected row

    // Executes on row click
    private void Sensors_RowClickHandler(Sensors_Entity row)
    {
        sensors_selectedRowContent = row.name;
    }

    private string Sensors_GetRowClass(Sensors_Entity row)
    {
        return row.name == sensors_selectedRowContent ? "selected-row" : "";
    }

    private async Task Get_Sensors_Overview()
    {
        sensors_mysql_data = new List<Sensors_Entity>();

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM sensors;", conn);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        //convert computable to human readable
                        string severity_converted = String.Empty;
                        string category_converted = String.Empty;
                        string sub_category_converted = String.Empty;

                        //severity
                        if (reader["severity"].ToString() == "0")
                            severity_converted = Localizer["low"];
                        else if (reader["severity"].ToString() == "1")
                            severity_converted = Localizer["moderate"];
                        else if (reader["severity"].ToString() == "2")
                            severity_converted = Localizer["high"];
                        else if (reader["severity"].ToString() == "3")
                            severity_converted = Localizer["critical"];

                        //category
                        if (reader["category"].ToString() == "0")
                            category_converted = Localizer["utilization"];
                        else if (reader["category"].ToString() == "1")
                            category_converted = "Windows Eventlog";    
                        else if (reader["category"].ToString() == "2")
                            category_converted = "PowerShell";
                        else if (reader["category"].ToString() == "3")
                            category_converted = Localizer["service"];
                        else if (reader["category"].ToString() == "4")
                            category_converted = "Ping";
                        else if (reader["category"].ToString() == "5")
                            category_converted = "Bash";
                        else if (reader["category"].ToString() == "6")
                            category_converted = "Zsh";

                        //sub_category
                        if (reader["sub_category"].ToString() == "0")
                            sub_category_converted = Localizer["processor"];
                        else if (reader["sub_category"].ToString() == "1")
                            sub_category_converted = Localizer["ram"];
                        else if (reader["sub_category"].ToString() == "2")
                            sub_category_converted = Localizer["drive"];
                        else if (reader["sub_category"].ToString() == "3")
                            sub_category_converted = Localizer["process_cpu_usage_%"];
                        else if (reader["sub_category"].ToString() == "4")
                            sub_category_converted = Localizer["process_ram_usage_%"];
                        else if (reader["sub_category"].ToString() == "5")
                            sub_category_converted = Localizer["process_ram_usage_mb"];

                        //clean categories for view
                        if (category_converted == "Windows Eventlog" || category_converted == "PowerShell" || category_converted == Localizer["service"] || category_converted == "Ping" || category_converted == "Bash" || category_converted == "Zsh")
                            sub_category_converted = "-";

                        Sensors_Entity entity = new Sensors_Entity
                        {
                            id = reader["id"].ToString() ?? String.Empty,
                            name = reader["name"].ToString() ?? String.Empty,
                            platform = reader["platform"].ToString() ?? String.Empty,
                            description = reader["description"].ToString() ?? String.Empty,
                            author = reader["author"].ToString() ?? String.Empty,
                            date = reader["date"].ToString() ?? String.Empty,
                            category = category_converted,
                            sub_category = sub_category_converted,
                            severity = severity_converted,
                        };

                        sensors_mysql_data.Add(entity);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Get_Sensors_Overview", "Result", ex.ToString());
        }
        finally
        {
            conn.Close();
        }

        //Set the activation state for the sensors
        List<Sensors_Activation_State> policy_sensors_list = JsonSerializer.Deserialize<List<Sensors_Activation_State>>(sensors_json);

        foreach (var sensor in sensors_mysql_data)
        {
            Logging.Handler.Debug("/policy_settings -> Get_Sensors_Overview", "sensor_activation_state (sensors)", sensor.id);

            foreach (var policy_sensor in policy_sensors_list)
            {
                Logging.Handler.Debug("/policy_settings -> Get_Sensors_Overview", "sensor_activation_state (policy)", policy_sensor.id);

                if (policy_sensor.id == sensor.id)
                {
                    Logging.Handler.Debug("/policy_settings -> Get_Sensors_Overview", "sensor_activation_state (enable)", policy_sensor.id);

                    sensor.enabled = true;
                }
            }
        }
    }

    private async Task Export_Sensors_Table_Dialog()
    {
        //await Show_Export_Table_Dialog("sensors");
    }

    #endregion

    #region Jobs

    private string jobs_json = "[ ]";

    public List<Jobs_Entity> jobs_mysql_data; //Datasource for table

    public class Jobs_Entity
    {
        public string id { get; set; } = String.Empty;
        public bool enabled { get; set; } = false;
        public string name { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string platform { get; set; } = String.Empty;
        public string type { get; set; } = String.Empty;
    }

    public class Jobs_Activation_State
    {
        public string id { get; set; } = String.Empty;
    }

    public class Jobs_Activation_State_List
    {
        public List<Jobs_Activation_State> names { get; set; }
    }

    private string jobs_table_sorted_column;
    private string jobs_table_search_string = String.Empty;

    private bool Jobs_Table_Filter_Func(Jobs_Entity row)
    {
        if (string.IsNullOrEmpty(jobs_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.author.Contains(jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.type.Contains(jobs_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string jobs_selectedRowContent = ""; // Saving content of selected row

    // Executes on row click
    private void Jobs_RowClickHandler(Jobs_Entity row)
    {
        jobs_selectedRowContent = row.name;
    }

    private string Jobs_GetRowClass(Jobs_Entity row)
    {
        return row.name == jobs_selectedRowContent ? "selected-row" : "";
    }

    private async Task Get_Jobs_Overview()
    {
        jobs_mysql_data = new List<Jobs_Entity>();

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM jobs;", conn);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Jobs_Entity entity = new Jobs_Entity
                            {
                                id = reader["id"].ToString() ?? String.Empty,
                                name = reader["name"].ToString() ?? String.Empty,
                                description = reader["description"].ToString() ?? String.Empty,
                                author = reader["author"].ToString() ?? String.Empty,
                                date = reader["date"].ToString() ?? String.Empty,
                                platform = reader["platform"].ToString() ?? String.Empty,
                                type = reader["type"].ToString() ?? String.Empty,
                            };

                        jobs_mysql_data.Add(entity);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Get_Jobs_Overview", "Result", ex.ToString());
        }
        finally
        {
            conn.Close();
        }

        //Set the activation state for the jobs
        List<Jobs_Activation_State> policy_jobs_list = JsonSerializer.Deserialize<List<Jobs_Activation_State>>(jobs_json);

        foreach (var job in jobs_mysql_data)
        {
            Logging.Handler.Debug("/policy_settings -> Get_Jobs_Overview", "job_activation_state (jobs)", job.id);

            foreach (var policy_job in policy_jobs_list)
            {
                Logging.Handler.Debug("/policy_settings -> Get_Jobs_Overview", "job_activation_state (policy)", policy_job.id);

                if (policy_job.id == job.id)
                {
                    Logging.Handler.Debug("/policy_settings -> Get_Jobs_Overview", "job_activation_state (enable)", policy_job.id);

                    job.enabled = true;
                }
            }
        }
    }

    private async Task Export_Jobs_Table_Dialog()
    {
        //await Show_Export_Table_Dialog("jobs");
    }

    #endregion


    private bool show_delete_policy_dialog_open = false;

    private async Task Show_Delete_Policy_Dialog()
    {
        if (show_delete_policy_dialog_open)
            return;
                
         var options = new DialogOptions
         {
             CloseButton = true,
             FullWidth = true,
             MaxWidth = MaxWidth.Medium,
             BackgroundClass = "dialog-blurring",
         };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("name", policy_name);

         show_delete_policy_dialog_open = true;

        await this.DialogService.Show<Dialogs.Delete_Policy_Dialog>(string.Empty, parameters, options).Result;

        show_delete_policy_dialog_open = false;
    }
}