@page "/tenants"
@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using System.Xml.Serialization;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Tenants.Manage_Tenants> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .selected-row-light {
        background-color: lightgray;
    }

    .selected-row-dark {
        background-color: #141414;
    }

    .custom-expansion-panel {
        background-color: transparent;
    }

    .dialog-blurring {
        backdrop-filter: blur(10px);
    }

    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }

    @@media only screen and (max-width: 768px) {
        .desktop-icon {
            display: none;
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    .animated-text {
        animation: pulse 2s infinite ease-in-out;
    }

    @@keyframes pulse {
        0%, 100% {
            opacity: 1;
        }

        50% {
            opacity: 0.6;
        }
    }

    .wave-emoji {
        display: inline-block;
        animation: wave 2s infinite;
        transform-origin: 70% 70%;
    }

    @@keyframes wave {
        0% {
            transform: rotate(0deg);
        }

        15% {
            transform: rotate(15deg);
        }

        30% {
            transform: rotate(-10deg);
        }

        45% {
            transform: rotate(15deg);
        }

        60% {
            transform: rotate(-10deg);
        }

        75% {
            transform: rotate(15deg);
        }

        100% {
            transform: rotate(0deg);
        }
    }
</style>

<MudOverlay Visible="@loading_overlay" DarkBackground="false" Absolute="false">
    <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; gap: 1rem; animation: fadeIn 0.5s ease-in-out;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Thickness="6" />
        <MudText Typo="Typo.h5" Class="animated-text">
            Please wait... <span class="wave-emoji">🐧</span>
        </MudText>
    </div>
</MudOverlay>

<AuthorizeView>
    <Authorized>

        @{
            if (permissions_tenants_enabled)
            {
                <MudText Typo="Typo.h5">@Localizer["title"]</MudText>

                if (permissions_tenants_add)
                {
                    <MudButton Class="mt-5" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddBusiness" OnClick="@Show_Add_Tenant_Dialog">@Localizer["add"]</MudButton>
                }

                if (permissions_tenants_manage)
                {
                    <MudButton Class="ml-2 mt-5" Size=Size.Small Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Settings" Disabled="@(String.IsNullOrEmpty(tenants_selectedRowContent))" @onclick="@(() => UpdateSelectedTenant(tenants_selectedRowContent))">@Localizer["manage"]</MudButton>
                }

                <MudTooltip Text="@Localizer["export_data"]">
                    <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Show_Export_Table_Dialog"></MudIconButton>
                </MudTooltip>

                <MudTable Class="mt-5" Height="65vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@tenants_mysql_data" Filter="new Func<Tenants_Entity, bool>(Tenants_Notifications_Table_Filter_Func)">
                    <ToolBarContent>
                        <MudTextField @bind-Value="tenants_table_search_string" Placeholder="@Localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<Tenants_Entity, object>(x => x.tenant_name)" style="white-space: nowrap;">Name</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Tenants_Entity, object>(x => x.company)" style="white-space: nowrap;">@Localizer["company"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Tenants_Entity, object>(x => x.date)" style="white-space: nowrap;">@Localizer["created"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Tenants_Entity, object>(x => x.author)" style="white-space: nowrap;">@Localizer["author"]</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Tenants_Entity, object>(x => x.description)" style="white-space: nowrap;">@Localizer["description"]</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="tenants_row">

                        <MudTd DataLabel="Name" @onclick="() => Tenants_Notifications_RowClickHandler(tenants_row)" @ondblclick="() => Tenants_Notifications_RowDblClickHandler(tenants_row)" class="@Tenants_Notifications_GetRowClass(tenants_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.AddBusiness" Size="Size.Small" />&nbsp;@tenants_row.tenant_name
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["company"]" @onclick="() => Tenants_Notifications_RowClickHandler(tenants_row)" @ondblclick="() => Tenants_Notifications_RowDblClickHandler(tenants_row)" class="@Tenants_Notifications_GetRowClass(tenants_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Small" />&nbsp;@tenants_row.company
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["created"]" @onclick="() => Tenants_Notifications_RowClickHandler(tenants_row)" @ondblclick="() => Tenants_Notifications_RowDblClickHandler(tenants_row)" class="@Tenants_Notifications_GetRowClass(tenants_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />&nbsp;@tenants_row.date
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["author"]" @onclick="() => Tenants_Notifications_RowClickHandler(tenants_row)" @ondblclick="() => Tenants_Notifications_RowDblClickHandler(tenants_row)" class="@Tenants_Notifications_GetRowClass(tenants_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Small" />&nbsp;@tenants_row.author
                            </span>
                        </MudTd>

                        <MudTd DataLabel="@Localizer["description"]" @onclick="() => Tenants_Notifications_RowClickHandler(tenants_row)" @ondblclick="() => Tenants_Notifications_RowDblClickHandler(tenants_row)" class="@Tenants_Notifications_GetRowClass(tenants_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" />&nbsp;@tenants_row.description
                            </span>
                        </MudTd>

                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["rows_per_page"]" />
                    </PagerContent>
                </MudTable>
            }
        }

    </Authorized>
</AuthorizeView>

@code {

    #region Permissions System

    private string permissions_tenants_json = String.Empty;
    public static List<string> permissions_tenants_list = new List<string> { };

    private bool permissions_tenants_enabled = false;
    private bool permissions_tenants_add = false;
    private bool permissions_tenants_manage = false;

    public class Permissions_Tenants_Activation_State
    {
        public string id { get; set; } = String.Empty;
    }

    private async Task<bool> Permissions()
    {
        try
        {
            bool logout = false;

            // Get the current user from the authentication state
            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

            // Check if user is authenticated
            if (user?.Identity is not { IsAuthenticated: true })
                logout = true;

            string netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;

            permissions_tenants_enabled = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "tenants_enabled");
            permissions_tenants_add = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "tenants_add");
			permissions_tenants_manage = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "tenants_manage");
			permissions_tenants_list = await Classes.Authentication.Permissions.Get_Tenants(netlock_username, false);

            if (!permissions_tenants_enabled)
                logout = true;

            if (logout) // Redirect to the login page
            {
                NavigationManager.NavigateTo("/logout", true);
                return false;
            }

            // All fine? Nice.
            return true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Permissions", "Error", ex.ToString());
            return false;
        }
    }

    #endregion

    private bool _isDarkMode = false;
    private bool loading_overlay = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        if (!await Permissions())
            return;

        loading_overlay = true;
        StateHasChanged();

        await Get_Tenants_Overview();

        _isDarkMode = await JSRuntime.InvokeAsync<bool>("isDarkMode");

		loading_overlay = false;
        StateHasChanged();
    }

    public List<Tenants_Entity> tenants_mysql_data;

    public class Tenants_Entity
    {
        public string id { get; set; } = String.Empty;
        public string tenant_name { get; set; } = String.Empty;
        public string guid { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string company { get; set; } = String.Empty;
    }

    private string tenants_table_view_port = "70vh";
    private string tenants_table_sorted_column;
    private string tenants_table_search_string = "";

    private bool Tenants_Notifications_Table_Filter_Func(Tenants_Entity row)
    {
        if (string.IsNullOrEmpty(tenants_table_search_string))
            return true;

        //Search logic for each column
        return row.tenant_name.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.company.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.date.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.author.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.description.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string tenants_selectedRowContent = String.Empty;

    private void Tenants_Notifications_RowClickHandler(Tenants_Entity row)
    {
        tenants_selectedRowContent = row.guid;
    }

    private async void Tenants_Notifications_RowDblClickHandler(Tenants_Entity row)
    {
        tenants_selectedRowContent = row.guid;

        await UpdateSelectedTenant(row.guid);
    }

    private string Tenants_Notifications_GetRowClass(Tenants_Entity row)
    {
        return row.guid == tenants_selectedRowContent ? (_isDarkMode ? "selected-row-dark" : "selected-row-light") : String.Empty;
    }

    private async Task Get_Tenants_Overview()
    {
        tenants_mysql_data = new List<Tenants_Entity>();

        string tenant_name = await localStorage.GetItemAsync<string>("tenant_name");

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM tenants;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        if (permissions_tenants_list.Contains(reader["id"].ToString()))
                        {
                            Tenants_Entity entity = new Tenants_Entity
                                {
                                    id = reader["id"].ToString() ?? String.Empty,
                                    tenant_name = reader["name"].ToString() ?? String.Empty,
                                    guid = reader["guid"].ToString() ?? String.Empty,
                                    date = reader["date"].ToString() ?? "",
                                    author = reader["author"].ToString() ?? String.Empty,
                                    description = reader["description"].ToString() ?? String.Empty,
                                    company = reader["company"].ToString() ?? String.Empty,
                                };

                            tenants_mysql_data.Add(entity);
                        }
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_jobs -> Get_Tenants_Overview", "result", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }

    private async Task UpdateSelectedTenant(string guid)
    {
        await localStorage.SetItemAsync("tenant_guid", guid);

        NavigationManager.NavigateTo("/tenant_settings");
    }

    private bool add_tenant_dialog_open = false;

    private async Task Show_Add_Tenant_Dialog()
    {
        if (add_tenant_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        add_tenant_dialog_open = true;

        var result = await DialogService.Show<Tenants.Dialogs.Tenant_Management.Add_Tenant_Dialog>(string.Empty, new DialogParameters(), options).Result;

        add_tenant_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/manage_jobs -> Add_Job_Dialog", "Result", result.Data.ToString() ?? String.Empty);

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            await Get_Tenants_Overview();
        }
    }

    #region Export_Data

    private bool show_export_table_dialog_open = false;

    private async Task Show_Export_Table_Dialog()
    {
        if (show_export_table_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        show_export_table_dialog_open = true;

        var result = await this.DialogService.Show<Shared.Export_Data_Dialog>(string.Empty, new DialogParameters(), options).Result;

        show_export_table_dialog_open = false;

        if (result != null && result.Data != null)
        {
            if (result.Data.ToString() == "JSON")
                await Export_Data_Json();
            else if (result.Data.ToString() == "XML")
                await Export_Data_XML();
            else if (result.Data.ToString() == "HTML")
                await Export_Data_HTML();
        }
    }

    private async Task Export_Data_Json()
    {
        try
        {
            // Erstellen eines JSON-Strings aus den MudTable-Einträgen
            string jsonContent = JsonSerializer.Serialize(tenants_mysql_data, new JsonSerializerOptions { WriteIndented = true });

            // Aufruf der JavaScript-Funktion für den Export als .txt
            await JSRuntime.InvokeVoidAsync("exportToTxt", "tenants.json", jsonContent);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Tenant_Management.Manage_Tenants", "Export_Data_Json", ex.Message);
        }
    }

    public async Task Export_Data_XML()
    {
        try
        {
            if (tenants_mysql_data == null || tenants_mysql_data.Count == 0)
            {
                // Keine Daten zum Exportieren
                return;
            }

            var serializer = new XmlSerializer(typeof(List<Tenants_Entity>));

            using (var memoryStream = new MemoryStream())
            {
                // Konvertiere die Daten in das XML-Format
                serializer.Serialize(memoryStream, tenants_mysql_data);

                // Setze die Position des MemoryStream auf den Anfang
                memoryStream.Position = 0;

                // Lese den Inhalt des MemoryStream in einen String
                using (var streamReader = new StreamReader(memoryStream))
                {
                    string xmlContent = await streamReader.ReadToEndAsync();

                    // Hier wird JavaScript-Interop verwendet, um den XML-Inhalt herunterzuladen
                    await JSRuntime.InvokeVoidAsync("exportToTxt", "tenants.xml", xmlContent, "text/xml");
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Tenant_Management.Manage_Tenants", "Export_Data_XML", ex.Message);
        }
    }

    public async Task Export_Data_HTML()
    {
        try
        {
            if (tenants_mysql_data == null || tenants_mysql_data.Count == 0)
            {
                // Keine Daten zum Exportieren
                return;
            }

            StringBuilder htmlBuilder = new StringBuilder();
            htmlBuilder.Append("<table border='1'>");
            htmlBuilder.Append("<tr>");
            htmlBuilder.Append("<th>Name</th>");
            htmlBuilder.Append("<th>company</th>");
            htmlBuilder.Append("<th>created</th>");
            htmlBuilder.Append("<th>author</th>");
            htmlBuilder.Append("<th>description</th>");
            htmlBuilder.Append("</tr>");

            foreach (var entry in tenants_mysql_data)
            {
                htmlBuilder.Append("<tr>");
                htmlBuilder.Append($"<td>{entry.tenant_name}</td>");
                htmlBuilder.Append($"<td>{entry.company}</td>");
                htmlBuilder.Append($"<td>{entry.date}</td>");
                htmlBuilder.Append($"<td>{entry.author}</td>");
                htmlBuilder.Append($"<td>{entry.description}</td>");
                htmlBuilder.Append("</tr>");
            }

            htmlBuilder.Append("</table>");

            string htmlContent = htmlBuilder.ToString();

            // Hier wird JavaScript-Interop verwendet, um den HTML-Inhalt herunterzuladen
            await JSRuntime.InvokeVoidAsync("exportToTxt", "tenants.html", htmlContent, "text/html");
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Tenant_Management.Manage_Tenants", "Export_Data_HTML", ex.Message);
        }
    }

    #endregion
}
