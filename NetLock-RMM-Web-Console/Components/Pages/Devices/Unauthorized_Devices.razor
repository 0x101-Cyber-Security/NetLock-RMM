@page "/unauthorized_devices"
@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using System.Xml.Serialization;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Devices.Unauthorized_Devices> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .selected-row-light {
    background-color: lightgray;
    }

    .selected-row-dark {
    background-color: #141414;
    }

    .custom-expansion-panel {
    background-color: transparent;
    }

    .dialog-blurring {
    backdrop-filter: blur(10px);
    }

    .mud-table-cell-custom-group {
    font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
    padding-bottom: 50px;
    text-align: right;
    }

    @@media only screen and (max-width: 768px) {
    .desktop-icon {
    display: none;
    }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    .animated-text {
        animation: pulse 2s infinite ease-in-out;
    }

    @@keyframes pulse {
        0%, 100% {
            opacity: 1;
        }

        50% {
            opacity: 0.6;
        }
    }

    .wave-emoji {
        display: inline-block;
        animation: wave 2s infinite;
        transform-origin: 70% 70%;
    }

    @@keyframes wave {
        0% {
            transform: rotate(0deg);
        }

        15% {
            transform: rotate(15deg);
        }

        30% {
            transform: rotate(-10deg);
        }

        45% {
            transform: rotate(15deg);
        }

        60% {
            transform: rotate(-10deg);
        }

        75% {
            transform: rotate(15deg);
        }

        100% {
            transform: rotate(0deg);
        }
    }
</style>

<MudOverlay Visible="@loading_overlay" DarkBackground="false" Absolute="false">
    <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; gap: 1rem; animation: fadeIn 0.5s ease-in-out;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Thickness="6" />
        <MudText Typo="Typo.h5" Class="animated-text">
            Please wait... <span class="wave-emoji">🐧</span>
        </MudText>
    </div>
</MudOverlay>

<AuthorizeView>

    <Authorized>

        @if(permissions_devices_unauthorized_enabled)
        {
            <MudText Typo="Typo.h5">@Localizer["unauthorized_devices"]</MudText>
            <MudText Typo="Typo.h6">@group_name_displayed</MudText>

            <MudTooltip Text="@Localizer["refresh"]">
                <MudIconButton Class="mt-2" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="async () => { await Get_Clients_OverviewAsync(); }"></MudIconButton>
            </MudTooltip>

            <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="Variant.Filled" Color="Color.Default" Disabled="@(Configuration.Members_Portal.api_enabled && members_portal_license_limit_reached)" @onclick="async () => { await Authorize_Devices(); }">@Localizer["authorize_device"]</MudButton>
            <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="Variant.Filled" Color="Color.Error" @onclick="async () => { await Delete_Device(); }">@Localizer["delete_device"]</MudButton>

            <MudTooltip Text="@Localizer["export_data"]">
                <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Device_Table_Dialog"></MudIconButton>
            </MudTooltip>

            @if (Configuration.Members_Portal.api_enabled && members_portal_license_limit_reached)
            {
                <MudAlert Class="mt-3" Severity="Severity.Error" Icon="@Icons.Material.Filled.Error">@Localizer["membership_hard_limit_reached"] @Localizer["your configured limit is"] @members_portal_license_limit @Localizer["and_you_currently_have"] @members_portal_license_count @Localizer["active_devices"] @Localizer["please_remove_or_increase_memberships_limit"]</MudAlert>
            }

            <MudTable Class="mt-5" Height="70vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@mysql_data" Filter="new Func<MySQL_Entity, bool>(Device_Table_Filter_Func)">
                <ToolBarContent>
                    <MudTextField @bind-Value="device_table_search_string" Placeholder="@Localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <div style="display: flex; align-items: center; gap: 8px; white-space: nowrap;">
                            <MudCheckBox T="bool" @bind-Value="all_devices_checked" @bind-Value:after="Toggle_Check_All_Devices"
                                         Color="Color.Primary" />
                            <MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x._checked)">
                            </MudTableSortLabel>
                        </div>
                    </MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.device_name)">Name</MudTableSortLabel></MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.tenant_name)">@Localizer["tenant"]</MudTableSortLabel></MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.location_name)">@Localizer["location"]</MudTableSortLabel></MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.group_name)">@Localizer["group"]</MudTableSortLabel></MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.agent_version)">@Localizer["agent_version"]</MudTableSortLabel></MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.last_access)">@Localizer["last_access"]</MudTableSortLabel></MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.ip_address)">@Localizer["ip_address"]</MudTableSortLabel></MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.operating_system)">@Localizer["os"]</MudTableSortLabel></MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.domain)">@Localizer["domain"]</MudTableSortLabel></MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.last_active_user)">Last active user</MudTableSortLabel></MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.firewall_status)">@Localizer["firewall"]</MudTableSortLabel></MudTh>
                    <MudTh style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<MySQL_Entity, object>(x => x.antivirus_solution)">@Localizer["antivirus_solution"]</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate Context="row">

                    @{
                        DateTime lastAccess;
                        var isValidDate = DateTime.TryParse(row.last_access, out lastAccess);
                        var isOlderThan10Minutes = isValidDate && (DateTime.UtcNow - lastAccess).TotalMinutes > 10;
                        var iconColor = isValidDate && (DateTime.UtcNow - lastAccess).TotalMinutes > 10 ? "color: grey;" : "color: orange;";
                    }

                    <MudTd DataLabel="" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudCheckBox T="bool" @bind-Value="row._checked" Color="Color.Primary" />
                        </span>
                    </MudTd>

                    @if (row.platform == "Windows")
                    {
                        <MudTd DataLabel="Name" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Custom.Brands.MicrosoftWindows" Size="Size.Small" class="desktop-icon" Style="@iconColor" />&nbsp;@row.device_name
                            </span>
                        </MudTd>
                    }
                    else if (row.platform == "Linux")
                    {
                        <MudTd DataLabel="Name" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Custom.Brands.Linux" Size="Size.Small" class="desktop-icon" Style="@iconColor" />&nbsp;@row.device_name
                            </span>
                        </MudTd>
                    }
                    else if (row.platform == "MacOS")
                    {
                        <MudTd DataLabel="Name" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Custom.Brands.Apple" Size="Size.Small" class="desktop-icon" Style="@iconColor" />&nbsp;@row.device_name
                            </span>
                        </MudTd>
                    }

                    <MudTd DataLabel="@Localizer["tenant"]" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" class="desktop-icon" />&nbsp;@row.tenant_name
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["location"]" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.LocationCity" Size="Size.Small" class="desktop-icon" />&nbsp;@row.location_name
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["group"]" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Group" Size="Size.Small" class="desktop-icon" />&nbsp;@row.group_name
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["agent_version"]" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Update" Size="Size.Small" class="desktop-icon" />&nbsp;@row.agent_version
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["last_access"]" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" class="desktop-icon" />&nbsp;@row.last_access
                        </span>
                    </MudTd>

                    <MudTd DataLabel="IP address" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.NetworkWifi1Bar" Size="Size.Small" class="desktop-icon" />&nbsp;@row.ip_address
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["os"]" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.DeveloperBoard" Size="Size.Small" class="desktop-icon" />&nbsp;@row.operating_system
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["domain"]" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Domain" Size="Size.Small" class="desktop-icon" />&nbsp;@row.domain
                        </span>
                    </MudTd>

                    <MudTd DataLabel="Last active user" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Small" class="desktop-icon" />&nbsp;@row.last_active_user
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["firewall"]" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            @if (row.firewall_status == "True")
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Fireplace" Size="Size.Small" class="desktop-icon" />

                                <span>&nbsp;</span>

                                @Localizer["firewall_enabled"]
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Fireplace" Size="Size.Small" class="desktop-icon" />

                                <span>&nbsp;</span>

                                @Localizer["firewall_disabled"]
                            }
                        </span>
                    </MudTd>

                    <MudTd DataLabel="@Localizer["antivirus_solution"]" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                        <span style="display: flex; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Coronavirus" Size="Size.Small" class="desktop-icon" />&nbsp;@row.antivirus_solution
                        </span>
                    </MudTd>

                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Geräte pro Seite" />
                </PagerContent>
            </MudTable>
        }

    </Authorized>
</AuthorizeView>

@code {

    #region Permissions System

    private string permissions_json = String.Empty;

    private bool permissions_devices_unauthorized_enabled = false;
    private bool permissions_devices_unauthorized_authorize = false;

    private async Task<bool> Permissions()
    {
        try
        {
            bool logout = false;

            // Get the current user from the authentication state
            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

            // Check if user is authenticated
            if (user?.Identity is not { IsAuthenticated: true })
                logout = true;

            string netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;

            permissions_devices_unauthorized_enabled = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "devices_unauthorized_enabled");
			permissions_devices_unauthorized_authorize = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "devices_unauthorized_authorize");

            if (!permissions_devices_unauthorized_enabled)
                logout = true;

            if (logout) // Redirect to the login page
            {
                NavigationManager.NavigateTo("/logout", true);
                return false;
            }

            // All fine? Nice.
            return true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Permissions", "Error", ex.ToString());
            return false;
        }
    }

    #endregion

    private bool _isDarkMode = false;
    private bool loading_overlay = false;
    private bool all_devices_checked = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        if (!await Permissions())
            return;

        _isDarkMode = await JSRuntime.InvokeAsync<bool>("isDarkMode");

        await Get_Clients_OverviewAsync();

        if (Configuration.Members_Portal.api_enabled)
            await Get_Members_Portal_License_Limit();

        StateHasChanged();
    }

    private string view_port = "70vh";
    private string sorted_column;
    private string device_table_search_string = "";

    private bool Device_Table_Filter_Func(MySQL_Entity row)
    {
        if (string.IsNullOrEmpty(device_table_search_string))
            return true;

        //Search logic for each column
        return row.device_name.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.tenant_name.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.location_name.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.group_name.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.agent_version.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.last_access.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.ip_address.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.operating_system.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.domain.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.antivirus_solution.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string selectedRowContent = String.Empty; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void RowClickHandler(MySQL_Entity row)
    {
        selectedRowContent = row.id;
    }

    private string GetRowClass(MySQL_Entity row)
    {
        return row.id == selectedRowContent ? (_isDarkMode ? "selected-row-dark" : "selected-row-light") : String.Empty;
    }

    public class MySQL_Entity
    {
        public bool _checked { get; set; } = false;
        public string id { get; set; } = "Empty";
        public string device_name { get; set; } = "Empty";
        public string tenant_name { get; set; } = "Empty";
        public string location_name { get; set; } = "Empty";
        public string group_name { get; set; } = "Empty";
        public string agent_version { get; set; } = "Empty";
        public string last_access { get; set; } = "Empty";
        public string ip_address { get; set; } = "Empty";
        public string operating_system { get; set; } = "Empty";
        public string domain { get; set; } = "Empty";
        public string antivirus_solution { get; set; } = "Empty";
        public string firewall_status { get; set; } = "Empty";
        public string architecture { get; set; } = "Empty";
        public string last_boot { get; set; } = "Empty";
        public string cpu { get; set; } = "Empty";
        public string mainboard { get; set; } = "Empty";
        public string gpu { get; set; } = "Empty";
        public string ram { get; set; } = "Empty";
        public string environment_variables { get; set; } = "Empty";
        public string network_adapters { get; set; } = "Empty";
        public string drives { get; set; } = "Empty";
        public string applications_installed { get; set; } = "Empty";
        public string applications_logon { get; set; } = "Empty";
        public string applications_scheduled_tasks { get; set; } = "Empty";
        public string applications_drivers { get; set; } = "Empty";
        public string platform { get; set; } = "Empty";
        public string last_active_user { get; set; } = "Empty";

    }

    public List<MySQL_Entity> mysql_data = [];

    private async Task<string> GetTenantNameAsync()
    {
        return await localStorage.GetItemAsync<string>("tenantName");
    }

    private string group_name_displayed = String.Empty;

    private async Task Get_Clients_OverviewAsync()
    {
        loading_overlay = true;

        string tenant_name = await localStorage.GetItemAsync<string>("tenant_name");
        string group_name = await localStorage.GetItemAsync<string>("group_name");
        string location_name = await localStorage.GetItemAsync<string>("location_name");

        mysql_data = new List<MySQL_Entity>();
        
        string query = "SELECT * FROM devices WHERE authorized = '0';";

        Logging.Handler.Debug("/unauthorized_devices  -> Get_Clients_OverviewAsync", "MySQL_Query", query);

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            
            if (tenant_name == "all")
            {
                this.group_name_displayed = Localizer["all_devices"];
                query = "SELECT * FROM devices WHERE authorized = '0';";
                command = new MySqlCommand(query, conn);
            }
            else if (location_name == "all")
            {
                this.group_name_displayed = tenant_name;
                query = "SELECT * FROM devices WHERE authorized = '0' AND tenant_name = @tenant_name;";
                command = new MySqlCommand(query, conn);
                command.Parameters.AddWithValue("@tenant_name", tenant_name);
            }
            else if (group_name == "all")
            {
                this.group_name_displayed = tenant_name + "/" + location_name;
                query = "SELECT * FROM devices WHERE authorized = '0' AND location_name = @location_name AND tenant_name = @tenant_name;";
                command = new MySqlCommand(query, conn);
                command.Parameters.AddWithValue("@location_name", location_name);
                command.Parameters.AddWithValue("@tenant_name", tenant_name);
            }
            else
            {
                this.group_name_displayed = tenant_name + "/" + location_name + "/" + group_name;
                query = "SELECT * FROM devices WHERE authorized = '0' AND group_name = @group_name AND location_name = @location_name AND tenant_name = @tenant_name;";
                command = new MySqlCommand(query, conn);
                command.Parameters.AddWithValue("@group_name", group_name);
                command.Parameters.AddWithValue("@location_name", location_name);
                command.Parameters.AddWithValue("@tenant_name", tenant_name);
            }

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        MySQL_Entity entity = new MySQL_Entity
                        {
                            id = reader["id"].ToString() ?? "",
                            device_name = reader["device_name"].ToString() ?? "",
                            tenant_name = reader["tenant_name"].ToString() ?? "",
                            location_name = reader["location_name"].ToString() ?? "",
                            group_name = reader["group_name"].ToString() ?? "",
                            agent_version = reader["agent_version"].ToString() ?? "",
                            last_access = reader["last_access"].ToString() ?? "",
                            ip_address = reader["ip_address_internal"].ToString() + " & " + reader["ip_address_external"].ToString(),
                            operating_system = reader["operating_system"].ToString() ?? "",
                            domain = reader["domain"].ToString() ?? "",
                            antivirus_solution = reader["antivirus_solution"].ToString() ?? "",
                            firewall_status = reader["firewall_status"].ToString() ?? "",
                            platform = reader["platform"].ToString() ?? "",
                            last_active_user = reader["last_active_user"].ToString() ?? "",
                        };

                        mysql_data.Add(entity);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/unauthorized_devices -> Get_Clients_OverviewAsync", "MySQL_Query", ex.ToString());
        }
        finally
        {
            conn.Close();
            loading_overlay = false;
        }
    }

    private async Task Authorize_Devices()
    {
        loading_overlay = true;

        bool authorized = false;

        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        // Go through the list of devices and authorize the selected (_checked) devices
        foreach (var device in mysql_data)
        {
            if (device._checked)
            {
                try
                {
                    await conn.OpenAsync();

                    string execute_query = "UPDATE devices SET authorized = '1' WHERE id = @id;";

                    MySqlCommand cmd = new MySqlCommand(execute_query, conn);
                    cmd.Parameters.AddWithValue("@id", device.id);

                    cmd.ExecuteNonQuery();
                    await conn.CloseAsync();

                    await Classes.MySQL.Handler.Reset_Device_Sync(false, device.id);

                    authorized = true;
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/unauthorized_devices -> Authorize_Device", "Result", ex.ToString());
                    this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
                }
            }
        }

        await Get_Clients_OverviewAsync();

        loading_overlay = false;

        if (authorized)
            this.Snackbar.Add(Localizer["device_authorized"].ToString(), Severity.Success);
    }

    // Delete device
    private async Task Delete_Device()
    {
        loading_overlay = true;
        bool deleted = false;
        
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        // Go through the list of devices and delete the selected (_checked) devices
        foreach (var device in mysql_data)
        {
            if (device._checked)
            {
                try
                {
                    await conn.OpenAsync();

                    string execute_query = "DELETE FROM devices WHERE id = @id;";

                    MySqlCommand cmd = new MySqlCommand(execute_query, conn);
                    cmd.Parameters.AddWithValue("@id", device.id);

                    cmd.ExecuteNonQuery();
                    await conn.CloseAsync();

                    await Classes.MySQL.Handler.Reset_Device_Sync(false, device.id);
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/unauthorized_devices -> Delete_Device", "Result", ex.ToString());
                    this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
                }
            }
        }

        await Get_Clients_OverviewAsync();

        loading_overlay = false;

        if (deleted)
            this.Snackbar.Add(Localizer["device_deleted"].ToString(), Severity.Success);
    }

    private async Task Toggle_Check_All_Devices()
    {
        // Check or uncheck all devices based on the state of the "all_devices_checked" variable

        foreach (var device in mysql_data)
        {
            device._checked = all_devices_checked;
        }
    }

    private void Redirect(string path)
    {        
        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo(path);
    }

    private bool members_portal_license_limit_reached = false;
    private bool members_portal_licenses_hard_limit = false;
    private int members_portal_license_count = 0;
    private int members_portal_license_limit = 0;

    private async Task Get_Members_Portal_License_Limit()
    {
        try
        {
            members_portal_license_limit_reached = await Classes.Members_Portal.Handler.Check_License_Limit_Reached();

            var licenseInfo = await Classes.Members_Portal.Handler.Get_License_Info();

            members_portal_license_count = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) FROM devices WHERE authorized = '1';", "COUNT(*)"));
			members_portal_license_limit = licenseInfo.licensesMax;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("System_Logs", "Get_Members_Portal_License_Limit", ex.Message);
        }
    }

    #region Data_Export
    private async Task Trigger_Export_Device_Table_Dialog()
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        var result = await this.DialogService.Show<Shared.Export_Data_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result != null && result.Data != null)
        {
            if (result.Data.ToString() == "JSON")
                await Export_Data_Json();
            else if (result.Data.ToString() == "XML")
                await Export_Data_XML();
            else if (result.Data.ToString() == "HTML")
                await Export_Data_HTML();
        }
    }

    private async Task Export_Data_Json()
    {
        try
        {
            // Erstellen eines JSON-Strings aus den MudTable-Einträgen
            string jsonContent = JsonSerializer.Serialize(mysql_data, new JsonSerializerOptions { WriteIndented = true });

            // Aufruf der JavaScript-Funktion für den Export als .txt
            await JSRuntime.InvokeVoidAsync("exportToTxt", "devices.json", jsonContent);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("System_Logs", "Export_Data_Json", ex.Message);
        }
    }

    public async Task Export_Data_XML()
    {
        try
        {
            if (mysql_data == null || mysql_data.Count == 0)
            {
                // Keine Daten zum Exportieren
                return;
            }

            var serializer = new XmlSerializer(typeof(List<MySQL_Entity>));

            using (var memoryStream = new MemoryStream())
            {
                // Konvertiere die Daten in das XML-Format
                serializer.Serialize(memoryStream, mysql_data);

                // Setze die Position des MemoryStream auf den Anfang
                memoryStream.Position = 0;

                // Lese den Inhalt des MemoryStream in einen String
                using (var streamReader = new StreamReader(memoryStream))
                {
                    string xmlContent = await streamReader.ReadToEndAsync();

                    // Hier wird JavaScript-Interop verwendet, um den XML-Inhalt herunterzuladen
                    await JSRuntime.InvokeVoidAsync("exportToTxt", "devices.xml", xmlContent, "text/xml");
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("System_Logs", "Export_Data_XML", ex.Message);
        }
    }

    public async Task Export_Data_HTML()
    {
        try
        {
            if (mysql_data == null || mysql_data.Count == 0)
            {
                // Keine Daten zum Exportieren
                return;
            }

            StringBuilder htmlBuilder = new StringBuilder();
            htmlBuilder.Append("<table border='1'>");
            htmlBuilder.Append("<tr>");
            htmlBuilder.Append("<th>Gerät</th>");
            htmlBuilder.Append("<th>Mandant</th>");
            htmlBuilder.Append("<th>Standort</th>");
            htmlBuilder.Append("<th>Gruppe</th>");
            htmlBuilder.Append("<th>Agenten Version</th>");
            htmlBuilder.Append("<th>Letzter Kontakt</th>");
            htmlBuilder.Append("<th>IP-Addresse</th>");
            htmlBuilder.Append("<th>Betriebssystem</th>");
            htmlBuilder.Append("<th>Domäne</th>");
            htmlBuilder.Append("<th>Antivirus Lösung</th>");
            htmlBuilder.Append("</tr>");

            foreach (var entry in mysql_data)
            {
                htmlBuilder.Append("<tr>");
                htmlBuilder.Append($"<td>{entry.device_name}</td>");
                htmlBuilder.Append($"<td>{entry.tenant_name}</td>");
                htmlBuilder.Append($"<td>{entry.location_name}</td>");
                htmlBuilder.Append($"<td>{entry.group_name}</td>");
                htmlBuilder.Append($"<td>{entry.agent_version}</td>");
                htmlBuilder.Append($"<td>{entry.last_access}</td>");
                htmlBuilder.Append($"<td>{entry.ip_address}</td>");
                htmlBuilder.Append($"<td>{entry.operating_system}</td>");
                htmlBuilder.Append($"<td>{entry.domain}</td>");
                htmlBuilder.Append($"<td>{entry.antivirus_solution}</td>");
                htmlBuilder.Append("</tr>");
            }

            htmlBuilder.Append("</table>");

            string htmlContent = htmlBuilder.ToString();

            // Hier wird JavaScript-Interop verwendet, um den HTML-Inhalt herunterzuladen
            await JSRuntime.InvokeVoidAsync("exportToTxt", "devices.html", htmlContent, "text/html");
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("System_Logs", "Export_Data_HTML", ex.Message);
        }
    }

    #endregion
}
