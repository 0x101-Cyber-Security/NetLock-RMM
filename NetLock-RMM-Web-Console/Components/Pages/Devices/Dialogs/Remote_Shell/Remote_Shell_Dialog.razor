@using MySqlConnector
@using System.Data.Common
@using System.Text.Json
@using OfficeOpenXml
@using System.Xml.Serialization
@using System.Text
@using System.Text.RegularExpressions
@using System.Text.Json.Nodes
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Globalization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Devices.Dialogs.Remote_Shell.Remote_Shell_Dialog> Localizer

<style>

    .monaco-editor {
        flex-grow: 1;
        height: 25vh;
        width: 100%; /* Each editor takes half of the screen width */
    }

</style>

<MudDialog>

    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["title"] (@device_name)</MudText>
    </TitleContent>
    <DialogContent>

        @{
            if (remote_server_client_setup)
            {
                <MudAlert Class="mb-2" Severity="Severity.Success" Icon="@Icons.Material.Filled.CheckCircle">@Localizer["authorized"]</MudAlert>
            }
            else
            {
                <MudAlert Class="mb-2" Severity="Severity.Error" Icon="@Icons.Material.Filled.Error">@Localizer["not_authorized"]</MudAlert>

                <MudButton Class="mb-2" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ConnectWithoutContact" FullWidth="true" OnClick="Remote_Authentificate_Dialog">@Localizer["connect"]</MudButton>
            }
        }

        <MudText Typo="Typo.h6">@Localizer["output"]</MudText>

        <StandaloneCodeEditor Id="remote_shell_output-editor" CssClass="monaco-editor" @ref="remote_shell_command_output_editor" ConstructionOptions="Editor_Construction_Options" />

        <MudText Class="mt-3" Typo="Typo.h6">@Localizer["input"]</MudText>

        <MudSelect Class="mb-3" T="string" @bind-Value="collection_script_name" @bind-Value:after="async () => await Get_Script(collection_script_name)" Label="Templates" AnchorOrigin="Origin.BottomCenter" Disabled="@(!remote_server_client_setup || loading_overlay)">
            @foreach (var s in scripts)
            {
                <MudSelectItem Value="@s" />
            }
        </MudSelect>

        <StandaloneCodeEditor Id="remote_shell-editor" CssClass="monaco-editor" @ref="remote_shell_command_editor" ConstructionOptions="Remote_Shell_Editor_Construction_Options" OnDidChangeModelContent="Remote_Shell_Editor_Handle_Input" OnKeyDown="Remote_Keyboard_Enter" />

        @{
            if (loading_overlay)
            {
                <MudProgressLinear Size="Size.Medium" Class="mt-2" Color="Color.Info" Indeterminate="true">
                    <MudText Typo="Typo.body1">@Localizer["execution_in_progress"]</MudText>
                </MudProgressLinear>
            }
        }

    </DialogContent>
    <DialogActions>
        <div style="display: flex; align-items: center;">
            <MudTooltip Text="@Localizer["execute_tooltip"]">
                <MudIconButton Class="mr-2" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
            </MudTooltip>

            <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Success" FullWidth="true" StartIcon="@Icons.Material.Filled.Code" OnClick="async () => { await Remote_Shell_Send_Command(remote_shell_powershell_code, remote_shell_wait_response); }" Disabled="@(!remote_server_client_setup || loading_overlay)">@Localizer["execute"]</MudButton>
        </div>

        <MudButton OnClick="@Cancel" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Default">@Localizer["close"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string device_id { get; set; }
    [Parameter] public string device_name { get; set; }
    [Parameter] public string tenant_guid { get; set; }
    [Parameter] public string location_guid { get; set; }

    private bool loading_overlay = false;

    protected override async Task OnInitializedAsync()
    {
        await Remote_Authentificate_Dialog();
        await Get_Scripts();
    }

    #region Editors

    private StandaloneCodeEditor remote_shell_command_output_editor = null!;

    private StandaloneEditorConstructionOptions Editor_Construction_Options(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Theme = "vs-dark",
                Language = "powershell",
                ReadOnly = true,
                //Value = @"New-Item -ItemType File -Path 'C:\Test.txt\' | Set-Content -Value 'Dies ist ein Test'"
            };
    }

    private StandaloneCodeEditor remote_shell_command_editor = null!;

    private StandaloneEditorConstructionOptions Remote_Shell_Editor_Construction_Options(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Theme = "vs-dark",
                Language = "powershell",
                ReadOnly = false,
                //Value = @"New-Item -ItemType File -Path 'C:\Test.txt\' | Set-Content -Value 'Dies ist ein Test'"
            };
    }

    private async Task Remote_Shell_Editor_Handle_Input(ModelContentChangedEvent e)
    {
        remote_shell_powershell_code = await remote_shell_command_editor.GetValue();
    }

    #endregion

    #region Scripts

    private List<string> scripts = new List<string>();

    private string collection_script_name = String.Empty;
    private string collection_script = String.Empty;

    private async Task Get_Scripts()
    {
        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            string query = "SELECT * FROM scripts;";
            MySqlCommand cmd = new MySqlCommand(query, conn);

            using (DbDataReader reader = await cmd.ExecuteReaderAsync())
            {
                while (await reader.ReadAsync())
                {
                    scripts.Add(reader["name"].ToString() ?? String.Empty);
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Add_Script_Dialog) -> Get_Scripts", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }
    }

    private async Task Get_Script(string name)
    {
        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            string query = "SELECT * FROM scripts WHERE platform = 'Windows' AND shell = 'PowerShell' AND name = @name;";
            MySqlCommand cmd = new MySqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@name", name);

            using (DbDataReader reader = await cmd.ExecuteReaderAsync())
            {
                while (await reader.ReadAsync())
                {
                    await remote_shell_command_editor.SetValue(reader["script"].ToString() ?? String.Empty);
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Add_Script_Dialog) -> Get_Script", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }
    }

    #endregion

    #region Remote

    private async Task Remote_Keyboard_Enter(BlazorMonaco.KeyboardEvent e)
    {
        if (remote_server_client_setup)
        {
            if (e.CtrlKey && e.Code == "Enter" && !String.IsNullOrEmpty(remote_shell_powershell_code))
                await Remote_Shell_Send_Command(remote_shell_powershell_code, remote_shell_wait_response);
        }
    }

    public class Remote_Admin_Identity
    {
        public string admin_username { get; set; }
        public string admin_password { get; set; } // encrypted
        public string session_guid { get; set; }
    }

    public class Remote_Target_Device
    {
        public string device_id { get; set; }
        public string device_name { get; set; }
        public string location_guid { get; set; }
        public string tenant_guid { get; set; }
    }

    public class Remote_Command
    {
        public int type { get; set; }
        public bool wait_response { get; set; }
        public string powershell_code { get; set; }
        public int file_browser_command { get; set; }
        public string file_browser_path { get; set; }
        public string file_browser_path_move { get; set; }
        public string file_browser_file_content { get; set; }
    }

    public class Remote_Root_Object
    {
        public Remote_Admin_Identity admin_identity { get; set; }
        public Remote_Target_Device target_device { get; set; }
        public Remote_Command command { get; set; }
    }

    // Remote Server
    private HubConnection remote_server_client;
    private System.Threading.Timer remote_server_clientCheckTimer;
    private bool remote_server_client_setup = false;
    private string remote_admin_identity = String.Empty;


    // Remote Shell
    private string remote_shell_command_output = String.Empty;
    private string remote_shell_powershell_code = String.Empty;
    private bool remote_shell_wait_response = true;

    // Remote File Browser
    private string remote_file_browser_io_content_output_json = String.Empty;

    public async Task Remote_Setup_SignalR()
    {
        try
        {
            // Get session info
            var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
            var session_username_result = await sessionStorage.GetAsync<string>("username");
            var session_password_result = await sessionStorage.GetAsync<string>("password");
            var session_guid_result = await sessionStorage.GetAsync<string>("session_guid");

            string username = session_username_result.Value;
            string password = session_password_result.Value;
            string password_hashed = Encryption.String_Encryption.Encrypt(password, Application_Settings.Local_Encryption_Key);
            string session_guid = session_guid_result.Value;

            Remote_Admin_Identity identity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            // Create the object that contains the device_identity object
            var jsonObject = new { admin_identity = identity };

            // Serialize the object to a JSON string
            string json = JsonSerializer.Serialize(jsonObject, new JsonSerializerOptions { WriteIndented = true });

            remote_admin_identity = json;

            remote_server_client = new HubConnectionBuilder()
                .WithUrl(Configuration.Remote_Server.Connection_String + "/commandHub", options =>
                {
                    options.Headers.Add("Admin-Identity", Uri.EscapeDataString(remote_admin_identity));
                })
                .Build();

            // Remote Shell
            remote_server_client.On<string>("ReceiveClientResponseRemoteShell", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteShell", command);

                // Use InvokeAsync to reflect changes on UI immediately
                await InvokeAsync(() =>
                {
                    remote_shell_command_output = DateTime.Now.ToString("dd.MM.yyyy hh:mm:ss") + System.Environment.NewLine + command + System.Environment.NewLine + "--------------END--------------" + System.Environment.NewLine + remote_shell_command_output;
                    remote_shell_command_output_editor.SetValue(remote_shell_command_output);

                    loading_overlay = false;

                    StateHasChanged();
                });
            });

            // Start the connection
            await remote_server_client.StartAsync();

            remote_server_client_setup = true;

            Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "Connected to the remote server.", remote_server_client_setup.ToString());

            this.Snackbar.Add(Localizer["connected_with_netlock_remote_server"].ToString(), Severity.Info);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_Setup_SignalR", "General error", ex.ToString());
        }
    }

    private bool remote_authentification_dialog_open = false;

    private async Task Remote_Authentificate_Dialog()
    {
        if (remote_authentification_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        remote_authentification_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Devices.Dialogs.Remote_Authentificate_Dialog>(string.Empty, options).Result;

        remote_authentification_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/devices -> Event_Details_Dialog", "Result", result.Data.ToString());

        // Check if the user is authentificated
        if (result.Data.ToString() == "authentificated")
        {
            await Remote_Setup_SignalR();
        }
    }

    #endregion

    #region Remote Shell
    private async Task Remote_Shell_Send_Command(string powershell_code, bool wait_repsonse)
    {
        try
        {
            // Get session info
            var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
            var session_username_result = await sessionStorage.GetAsync<string>("username");
            var session_password_result = await sessionStorage.GetAsync<string>("password");
            var session_guid_result = await sessionStorage.GetAsync<string>("session_guid");

            string username = session_username_result.Value;
            string password = session_password_result.Value;
            string password_hashed = BCrypt.HashPassword(password);
            string session_guid = session_guid_result.Value;

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid
                };

            var command = new Remote_Command
                {
                    type = 0,
                    wait_response = wait_repsonse,
                    powershell_code = await Base64.Handler.Encode(powershell_code)
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_Shell_Send_Command", "Message", json);

                try
                {
                    loading_overlay = true;
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "General error", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "General error", ex.Message);
        }
    }

    #endregion

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = true;

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private async Task Cancel()
    {
        // Stop the remote server client
        if (remote_server_client_setup)
        {
            await remote_server_client.StopAsync();
            remote_server_client_setup = false;
        };

        this.MudDialog.Cancel();
    }
}