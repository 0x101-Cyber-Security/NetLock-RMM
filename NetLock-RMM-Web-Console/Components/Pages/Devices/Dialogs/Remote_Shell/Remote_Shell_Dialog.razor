@using MySqlConnector
@using System.Data.Common
@using System.Text.Json
@using System.Xml.Serialization
@using System.Text
@using System.Text.RegularExpressions
@using System.Text.Json.Nodes
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Globalization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Devices.Dialogs.Remote_Shell.Remote_Shell_Dialog> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>

    .monaco-editor {
    flex-grow: 1;
    height: 25vh;
    width: 100%; /* Each editor takes half of the screen width */
    }

</style>

<MudDialog>

    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["title"] (@device_name)</MudText>
    </TitleContent>
    <DialogContent>

        @{
            if (!remote_server_client_setup)
            {
                <MudAlert Class="mb-2" Severity="Severity.Error" Icon="@Icons.Material.Filled.Error">Not connected to the NetLock RMM server backend.</MudAlert>

                <MudButton Class="mb-2" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ConnectWithoutContact" FullWidth="true" OnClick="Remote_Setup_SignalR">Reconnect.</MudButton>
            }
        }

        <MudText Typo="Typo.h6">@Localizer["output"]</MudText>

        <StandaloneCodeEditor Id="remote_shell_output-editor" CssClass="monaco-editor" @ref="remote_shell_command_output_editor" ConstructionOptions="Editor_Construction_Options" />

        <MudText Class="mt-3" Typo="Typo.h6">@Localizer["input"]</MudText>

        @if (!expanded)
        {
            <MudTextField Class="mt-3" T="string" @bind-Value="@remote_shell_powershell_code" Label="" Lines="1" Required="true" Immediate="@true" @onkeydown="Enter" />
        }

        <MudSelect Class="mt-3" T="string" @bind-Value="collection_script_name" @bind-Value:after="async () => await Get_Script(collection_script_name)" Label="Templates" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Disabled="@(!remote_server_client_setup || loading_overlay)">
            @foreach (var s in scripts)
            {
                <MudSelectItem Value="@s" />
            }
        </MudSelect>

        <MudExpansionPanel Class="mt-3 custom-expansion-panel" @bind-Expanded="@expanded" Text="Expand">
            <TitleContent>
                <div class="d-flex">

                    @if (expanded)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.ArrowCircleUp" class="mr-3"></MudIcon>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.ArrowCircleDown" class="mr-3"></MudIcon>
                    }

                    <MudText>Expand</MudText>
                </div>
            </TitleContent>

            <ChildContent>
                <StandaloneCodeEditor Id="remote_shell-editor" CssClass="monaco-editor" @ref="remote_shell_command_editor" ConstructionOptions="Remote_Shell_Editor_Construction_Options" OnDidChangeModelContent="Remote_Shell_Editor_Handle_Input" OnKeyDown="Remote_Keyboard_Enter" />
            </ChildContent>
        </MudExpansionPanel>

        @{
            if (loading_overlay)
            {
                <MudProgressLinear Size="Size.Medium" Class="mt-2 mb-2" Color="Color.Info" Indeterminate="true">
                    <MudText Typo="Typo.body1">@Localizer["execution_in_progress"]</MudText>
                </MudProgressLinear>
            }
        }

    </DialogContent>
    <DialogActions>
        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Default" StartIcon="@Icons.Material.Filled.Code" OnClick="@Community_Scripts_Dialog">Community Scripts</MudButton>

        <div style="display: flex; align-items: center;">
            <MudTooltip Text="@Localizer["execute_tooltip"]">
                <MudIconButton Class="mr-2" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
            </MudTooltip>

            <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Success" FullWidth="true" StartIcon="@Icons.Material.Filled.Code" OnClick="async () => { await Remote_Shell_Send_Command(remote_shell_powershell_code, remote_shell_wait_response); }" Disabled="@(!remote_server_client_setup || loading_overlay)">@Localizer["execute"]</MudButton>
        </div>

        <MudButton OnClick="@Cancel" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Default">@Localizer["close"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public string device_id { get; set; }
    [Parameter] public string device_name { get; set; }
    [Parameter] public string tenant_guid { get; set; }
    [Parameter] public string location_guid { get; set; }

    private string netlock_username = String.Empty;
    private string token = String.Empty;
    private bool loading_overlay = false;
    private bool expanded = false;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user from the authentication state
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        // Check if user is authenticated
        if (user?.Identity is not { IsAuthenticated: true })
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        // Retrieve username from claims
        netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;

        token = await Classes.Authentication.User.Get_Remote_Session_Token(netlock_username);

        await Remote_Setup_SignalR();

        //await Remote_Authentificate_Dialog();
        await Get_Scripts();
    }

    #region Editors

    private StandaloneCodeEditor remote_shell_command_output_editor = null!;

    private StandaloneEditorConstructionOptions Editor_Construction_Options(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Theme = "vs-dark",
                Language = "powershell",
                ReadOnly = true,
            //Value = @"New-Item -ItemType File -Path 'C:\Test.txt\' | Set-Content -Value 'Dies ist ein Test'"
            };
    }

    private StandaloneCodeEditor remote_shell_command_editor = null!;

    private StandaloneEditorConstructionOptions Remote_Shell_Editor_Construction_Options(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Theme = "vs-dark",
                Language = "powershell",
                ReadOnly = false,
            //Value = @"New-Item -ItemType File -Path 'C:\Test.txt\' | Set-Content -Value 'Dies ist ein Test'"
            };
    }

    private async Task Remote_Shell_Editor_Handle_Input(ModelContentChangedEvent e)
    {
        remote_shell_powershell_code = await remote_shell_command_editor.GetValue();
    }

    #endregion

    #region Scripts

    private List<string> scripts = new List<string>();

    private string collection_script_name = String.Empty;
    private string collection_script = String.Empty;

    private async Task Get_Scripts()
    {
        string platform = await Classes.MySQL.Handler.Get_Device_Platform(device_id);

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            string query = "SELECT * FROM scripts WHERE platform = @platform;";

            MySqlCommand cmd = new MySqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@platform", platform);

            using (DbDataReader reader = await cmd.ExecuteReaderAsync())
            {
                while (await reader.ReadAsync())
                {
                    scripts.Add(reader["name"].ToString() ?? String.Empty);
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Add_Script_Dialog) -> Get_Scripts", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }
    }

    private async Task Get_Script(string name)
    {
        string platform = await Classes.MySQL.Handler.Get_Device_Platform(device_id);

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            string query = "SELECT * FROM scripts WHERE platform = @platform AND name = @name;";
            
            MySqlCommand cmd = new MySqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@name", name);
			cmd.Parameters.AddWithValue("@platform", platform);

            using (DbDataReader reader = await cmd.ExecuteReaderAsync())
            {
                while (await reader.ReadAsync())
                {
                    await remote_shell_command_editor.SetValue(reader["script"].ToString() ?? String.Empty);
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Add_Script_Dialog) -> Get_Script", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }
    }

    #endregion

    #region Remote

    private async Task Remote_Keyboard_Enter(BlazorMonaco.KeyboardEvent e)
    {
        if (remote_server_client_setup)
        {
            if (e.CtrlKey && e.Code == "Enter" && !String.IsNullOrEmpty(remote_shell_powershell_code) && !Regex.IsMatch(remote_shell_powershell_code, @"^\s*$"))
                await Remote_Shell_Send_Command(remote_shell_powershell_code, remote_shell_wait_response);
        }
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (remote_server_client_setup)
        {
            if (e.Code == "Enter" && !String.IsNullOrEmpty(remote_shell_powershell_code) && !Regex.IsMatch(remote_shell_powershell_code, @"^\s*$"))
                await Remote_Shell_Send_Command(remote_shell_powershell_code, remote_shell_wait_response);
        }
    }

    public class Remote_Admin_Identity
    {
        public string token { get; set; }
    }

    public class Remote_Target_Device
    {
        public string device_id { get; set; }
        public string device_name { get; set; }
        public string location_guid { get; set; }
        public string tenant_guid { get; set; }
    }

    public class Remote_Command
    {
        public int type { get; set; }
        public bool wait_response { get; set; }
        public string powershell_code { get; set; }
        public int file_browser_command { get; set; }
        public string file_browser_path { get; set; }
        public string file_browser_path_move { get; set; }
        public string file_browser_file_content { get; set; }
    }

    public class Remote_Root_Object
    {
        public Remote_Admin_Identity admin_identity { get; set; }
        public Remote_Target_Device target_device { get; set; }
        public Remote_Command command { get; set; }
    }

    // Remote Server
    private HubConnection remote_server_client;
    private System.Threading.Timer remote_server_clientCheckTimer;
    private bool remote_server_client_setup = false;
    private string remote_admin_identity = String.Empty;


    // Remote Shell
    private string remote_shell_command_output = String.Empty;
    private string remote_shell_powershell_code = String.Empty;
    private bool remote_shell_wait_response = true;

    // Remote File Browser
    private string remote_file_browser_io_content_output_json = String.Empty;

    public async Task Remote_Setup_SignalR()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
		this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        try
        {
            Remote_Admin_Identity identity = new Remote_Admin_Identity
                {
                    token = token
                };

            // Create the object that contains the device_identity object
            var jsonObject = new { admin_identity = identity };

            // Serialize the object to a JSON string
            string json = JsonSerializer.Serialize(jsonObject, new JsonSerializerOptions { WriteIndented = true });

            remote_admin_identity = json;

            remote_server_client = new HubConnectionBuilder()
                .WithUrl(Configuration.Remote_Server.Connection_String + "/commandHub", options =>
                {
                    options.Headers.Add("Admin-Identity", Uri.EscapeDataString(remote_admin_identity));
                })
                .Build();

            // Remote Shell
            remote_server_client.On<string>("ReceiveClientResponseRemoteShell", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteShell", command);

                // Use InvokeAsync to reflect changes on UI immediately
                await InvokeAsync(() =>
                {
                    remote_shell_command_output = DateTime.Now.ToString("dd.MM.yyyy hh:mm:ss") + System.Environment.NewLine + command + System.Environment.NewLine + "--------------END--------------" + System.Environment.NewLine + remote_shell_command_output;
                    remote_shell_command_output_editor.SetValue(remote_shell_command_output);

                    loading_overlay = false;

                    StateHasChanged();
                });
            });

            // Start the connection
            await remote_server_client.StartAsync();

            remote_server_client_setup = true;

            Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "Connected to the remote server.", remote_server_client_setup.ToString());

            //this.Snackbar.Add(Localizer["connected_with_netlock_remote_server"].ToString(), Severity.Info);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_Setup_SignalR", "General error", ex.ToString());
        }
    }

    #endregion

    #region Remote Shell
    private async Task Remote_Shell_Send_Command(string powershell_code, bool wait_repsonse)
    {
        try
        {
            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    token = token
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid
                };

            var command = new Remote_Command
                {
                    type = 0,
                    wait_response = wait_repsonse,
                    powershell_code = await Base64.Handler.Encode(powershell_code)
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_Shell_Send_Command", "Message", json);

                try
                {
                    loading_overlay = true;
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "General error", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "Remote server not setup.", "");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "General error", ex.Message);
        }
    }

    #endregion

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = true;

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private async Task Cancel()
    {
        // Stop the remote server client
        if (remote_server_client_setup)
        {
            await remote_server_client.StopAsync();
            remote_server_client_setup = false;
        };

        this.MudDialog.Cancel();
    }

    private bool community_scripts_dialog_open = false;

    private async Task Community_Scripts_Dialog()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        try
        {
            if (community_scripts_dialog_open)
                return;

            var options = new DialogOptions
                {
                    CloseButton = true,
                    FullWidth = true,
                    MaxWidth = MaxWidth.ExtraLarge,
                    BackgroundClass = "dialog-blurring",
                };

            DialogParameters parameters = new DialogParameters();
            parameters.Add("editor", "true");

            community_scripts_dialog_open = true;

            var result = await this.DialogService.Show<Pages.Collections.Scripts.Community_Scripts.Community_Scripts_Dialog>(string.Empty, parameters, options).Result;

            // Handle the result if needed
            if (!result.Canceled)
            {
                var resultData = result.Data;

                if (resultData != null)
                {
                    string script = await remote_shell_command_editor.GetValue();
                    script += await Base64.Handler.Decode(resultData.ToString());

                    await remote_shell_command_editor.SetValue(script);
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts -> Community_Scripts_Dialog", "Community_Scripts_Dialog", ex.ToString());
        }
        finally
        {
            community_scripts_dialog_open = false;
        }
    }
}