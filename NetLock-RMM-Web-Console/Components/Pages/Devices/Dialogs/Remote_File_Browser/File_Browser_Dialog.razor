@using MySqlConnector
@using System.Data.Common
@using System.Text.Json
@using OfficeOpenXml
@using System.Xml.Serialization
@using System.Text
@using System.Text.RegularExpressions
@using System.Text.Json.Nodes
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Globalization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http
@using System.Net.Http.Headers;
@using NetLock_RMM_Web_Console.Configuration;
@using System.Net;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Devices.Dialogs.Remote_File_Browser.File_Browser_Dialog> Localizer

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["title"] (@device_name)</MudText>
    </TitleContent>
    <DialogContent>

        <MudPaper>

            @{
                if (remote_server_client_setup)
                {
                    <MudAlert Severity="Severity.Success" Icon="@Icons.Material.Filled.CheckCircle">@Localizer["authorized"]</MudAlert>

                    <div style="display: flex; align-items: flex-start;">
                        <MudSelect Class="mt-2" T="string" @bind-Value="remote_file_browser_drive_string" @bind-Value:after="async () => { await Remote_File_Browser_Get_Index(remote_file_browser_drive_string, false); }" Label="@Localizer["drives"]" AnchorOrigin="Origin.BottomCenter" Disabled="@(!remote_server_client_setup)">
                            @{
                                foreach (var drive in remote_file_browser_drives_list)
                                {
                                    <MudSelectItem Value="@drive" />
                                }
                            }
                        </MudSelect>

                        <MudTooltip Text="@Localizer["refresh"]">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Remote_File_Browser_Get_Drives"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <div class="d-flex flex-column flex-md-row align-items-stretch align-items-md-center">
                        <MudButton Class="mt-2 ml-2" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack" @onclick="async () => { await Remote_File_Browser_Get_Index(String.Empty, true); }" Disabled="@(!remote_server_client_setup)">@Localizer["back"]</MudButton>
                        <MudButton Class="mt-2 ml-2" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" @onclick="async () => { await Remote_File_Browser_Get_Index(remote_file_browser_path, false); }" Disabled="@(!remote_server_client_setup)">@Localizer["refresh"]</MudButton>
                        <MudButton Class="mt-2 ml-2" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CreateNewFolder" @onclick="async () => { await Remote_File_Browser_Create_Directory_Dialog(remote_file_browser_path); }" Disabled="@(!remote_server_client_setup)">@Localizer["create_directory"]</MudButton>
                        <MudButton Class="mt-2 ml-2" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Create" @onclick="async () => { await Remote_File_Browser_Create_File_Dialog(remote_file_browser_path); }" Disabled="@(!remote_server_client_setup)">@Localizer["new_file"]</MudButton>
                        <MudFileUpload T="IBrowserFile" FilesChanged="Upload_File">
                            <ActivatorContent>
                                <MudButton Class="mt-2 ml-2" Size="Size.Small" Variant="Variant.Filled" Color="Color.Default" StartIcon="@Icons.Material.Filled.UploadFile" Disabled="@uploading_linear">@Localizer["upload_file"]</MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </div>

                    <MudTable Class="mt-2" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@remote_file_browser_mysql_data" Filter="new Func<Remote_File_Browser_Entity, bool>(Remote_File_Browser_Table_Filter_Func)">
                        <ToolBarContent>
                            <MudTextField Placeholder="-" Adornment="Adornment.Start" IconSize="Size.Medium" AdornmentIcon="@Icons.Material.Filled.Link" @bind-Value="remote_file_browser_path" OnKeyDown="Remote_File_Browser_Path_Keyboard_Enter" Immediate="true"></MudTextField>
                            <MudTextField Class="ml-2" @bind-Value="remote_file_browser_table_search_string" Placeholder="@Localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh><MudTableSortLabel SortBy="new Func<Remote_File_Browser_Entity, object>(x => x.name)">Name</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<Remote_File_Browser_Entity, object>(x => x.last_modified)">@Localizer["modification_date"]</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<Remote_File_Browser_Entity, object>(x => x.type)">@Localizer["type"]</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<Remote_File_Browser_Entity, object>(x => x.size)">@Localizer["size"]</MudTableSortLabel></MudTh>
                        </HeaderContent>
                        <RowTemplate Context="remote_file_browser_row">

                            <MudTd DataLabel="Name" @onclick="() => Remote_File_Browser_RowClickHandler(remote_file_browser_row)" class="@Remote_File_Browser_GetRowClass(remote_file_browser_row)" style="white-space: nowrap;">
                                <MudMenu ActivationEvent="@MudBlazor.MouseEvent.RightClick" Dense="true">
                                    <ActivatorContent>
                                        <span style="display: flex; align-items: center;">
                                            &nbsp;@remote_file_browser_row.name
                                        </span>
                                    </ActivatorContent>
                                    <ChildContent>
                                        @{
                                            if (remote_file_browser_row.type == "Directory")
                                            {
                                                <MudMenuItem @onclick="async () => { await Remote_File_Browser_Delete_Directory(remote_file_browser_row.path); }">@Localizer["delete"]</MudMenuItem>
                                                <MudMenuItem @onclick="async () => { await Remote_File_Browser_Move_Directory_Dialog(remote_file_browser_row.path); }">@Localizer["move"]</MudMenuItem>
                                                <MudMenuItem @onclick="async () => { await Remote_File_Browser_Rename_Directory_Dialog(remote_file_browser_row.path); }">@Localizer["rename"]</MudMenuItem>
                                            }
                                            else
                                            {
                                                <MudMenuItem @onclick="async () => { await Remote_File_Browser_Downlaod_File_From_Device(remote_file_browser_row.path); }">@Localizer["download"]</MudMenuItem>
                                                <MudMenuItem @onclick="async () => { await Remote_File_Browser_Delete_File(remote_file_browser_row.path); }">@Localizer["delete"]</MudMenuItem>
                                                <MudMenuItem @onclick="async () => { await Remote_File_Browser_Move_File_Dialog(remote_file_browser_row.path); }">@Localizer["move"]</MudMenuItem>
                                                <MudMenuItem @onclick="async () => { await Remote_File_Browser_Rename_File_Dialog(remote_file_browser_row.path); }">@Localizer["rename"]</MudMenuItem>
                                            }
                                        }

                                    </ChildContent>
                                </MudMenu>

                            </MudTd>

                            <MudTd DataLabel="@Localizer["modification_date"]" @onclick="() => Remote_File_Browser_RowClickHandler(remote_file_browser_row)" class="@Remote_File_Browser_GetRowClass(remote_file_browser_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@remote_file_browser_row.last_modified
                                </span>
                            </MudTd>

                            <MudTd DataLabel="@Localizer["type"]" @onclick="() => Remote_File_Browser_RowClickHandler(remote_file_browser_row)" class="@Remote_File_Browser_GetRowClass(remote_file_browser_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@remote_file_browser_row.type
                                </span>
                            </MudTd>

                            <MudTd DataLabel="@Localizer["size"]" @onclick="() => Remote_File_Browser_RowClickHandler(remote_file_browser_row)" class="@Remote_File_Browser_GetRowClass(remote_file_browser_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@remote_file_browser_row.size
                                </span>
                            </MudTd>

                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["rows_per_page"]" />
                        </PagerContent>
                    </MudTable>

                    if (uploading_linear)
                    {
                        <MudProgressLinear @bind-Value="_uploadProgress" Size="Size.Medium" Class="mt-2" Color="Color.Info">
                            <MudText Typo="Typo.body1">@_uploadProgressDisplayString</MudText>
                        </MudProgressLinear>
                    }
                    
                    if (uploading_indeterminate)
                    {
                        <MudProgressLinear Size="Size.Medium" Class="mt-2" Color="Color.Info" Indeterminate="true">
                            <MudText Typo="Typo.body1">@_uploadProgressDisplayString</MudText>
                        </MudProgressLinear>
                    }

                    if (error_occurred)
                    {
                        <MudAlert Class="mt-2" Severity="Severity.Error" Icon="@Icons.Material.Filled.Error" ShowCloseIcon="true" CloseIconClicked="() => error_occurred = false">@error_occurred_display</MudAlert>
                    }
                }
                else
                {
                    <MudAlert Class="mb-2" Severity="Severity.Error" Icon="@Icons.Material.Filled.Error">@Localizer["not_authorized"]</MudAlert>

                    <MudButton Class="mb-2" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ConnectWithoutContact" FullWidth="true" OnClick="Remote_Authentificate_Dialog">@Localizer["authorize"]</MudButton>
                }
            }

        </MudPaper>
       
    </DialogContent>
    <DialogActions>

        <MudButton OnClick="@OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">@Localizer["close"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string device_id { get; set; }
    [Parameter] public string device_name { get; set; }
    [Parameter] public string tenant_guid { get; set; }
    [Parameter] public string location_guid { get; set; }

    private bool loading_overlay = false;
    private bool error_occurred = false;
    private string error_occurred_display = String.Empty;

    private string username = String.Empty;
    private string password = String.Empty;
    private string password_hashed = String.Empty;
    private string session_guid = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        await Remote_Authentificate_Dialog();

        // Get session info
        var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
        var session_username_result = await sessionStorage.GetAsync<string>("username");
        var session_password_result = await sessionStorage.GetAsync<string>("password");
        var session_guid_result = await sessionStorage.GetAsync<string>("session_guid");

        username = session_username_result.Value;
        password = session_password_result.Value;
        password_hashed = BCrypt.HashPassword(password);
        session_guid = session_guid_result.Value;
    }

    #region Remote

    public class Remote_Admin_Identity
    {
        public string admin_username { get; set; }
        public string admin_password { get; set; } // encrypted
        public string session_guid { get; set; }
    }

    public class Remote_Target_Device
    {
        public string device_id { get; set; }
        public string device_name { get; set; }
        public string location_guid { get; set; }
        public string tenant_guid { get; set; }
    }

    public class Remote_Command
    {
        public int type { get; set; }
        public bool wait_response { get; set; }
        public string powershell_code { get; set; }
        public int file_browser_command { get; set; }
        public string file_browser_path { get; set; }
        public string file_browser_path_move { get; set; }
        public string file_browser_file_content { get; set; }
        public string file_browser_file_guid { get; set; }
    }

    public class Remote_Root_Object
    {
        public Remote_Admin_Identity admin_identity { get; set; }
        public Remote_Target_Device target_device { get; set; }
        public Remote_Command command { get; set; }
    }

    // Remote Server
    private HubConnection remote_server_client;
    private System.Threading.Timer remote_server_clientCheckTimer;
    private bool remote_server_client_setup = false;
    private string remote_admin_identity = String.Empty;

    // Remote File Browser
    private string remote_file_browser_io_content_output_json = String.Empty;

    public async Task Remote_Setup_SignalR()
    {
        try
        {
            // Get session info
            var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
            var session_username_result = await sessionStorage.GetAsync<string>("username");
            var session_password_result = await sessionStorage.GetAsync<string>("password");
            var session_guid_result = await sessionStorage.GetAsync<string>("session_guid");

            string username = session_username_result.Value;
            string password = session_password_result.Value;
            string password_hashed = Encryption.String_Encryption.Encrypt(password, Application_Settings.Local_Encryption_Key);
            string session_guid = session_guid_result.Value;

            Remote_Admin_Identity identity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            // Create the object that contains the device_identity object
            var jsonObject = new { admin_identity = identity };

            // Serialize the object to a JSON string
            string json = JsonSerializer.Serialize(jsonObject, new JsonSerializerOptions { WriteIndented = true });

            remote_admin_identity = json;

            remote_server_client = new HubConnectionBuilder()
                .WithUrl(Configuration.Remote_Server.Connection_String + "/commandHub", options =>
                {
                    options.Headers.Add("Admin-Identity", Uri.EscapeDataString(remote_admin_identity));
                })
                .Build();

            // Remote File Browser - Drives
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserDrives", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserDrives", command);

                // Use InvokeAsync to reflect changes on UI immediately
                await InvokeAsync(() =>
                {
                    remote_file_browser_drives_list = command.Split(',').ToList();
                    remote_file_browser_drive_string = remote_file_browser_drives_list[0];

                    // Load the first drive
                    Remote_File_Browser_Get_Index(remote_file_browser_drive_string, false);

                    StateHasChanged();
                });
            });

            // Remote File Browser - Index
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserIndex", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserIndex", command);

                remote_file_browser_io_content_output_json = command;

                // Use InvokeAsync to reflect changes on UI immediately
                await InvokeAsync(() =>
                {
                    JsonArray example_array = JsonNode.Parse(command).AsArray();

                    remote_file_browser_mysql_data = new List<Remote_File_Browser_Entity>();

                    foreach (var _object in example_array)
                    {
                        string last_modified = String.Empty;

                        // Convert last modified date to a readable format
                        if (DateTime.TryParse(_object["last_modified"].ToString(), out DateTime lastModifiedDateTime))
                        {
                            last_modified = lastModifiedDateTime.ToString("yyyy-MM-dd HH:mm:ss");
                        }
                        else
                        {
                            last_modified = "Invalid date";
                        }

                        Remote_File_Browser_Entity entity = new Remote_File_Browser_Entity
                        {
                            name = _object["name"].ToString(),
                            path = _object["path"].ToString(),
                            type = _object["type"].ToString(),
                            size = _object["size"].ToString(),
                            last_modified = last_modified,
                        };

                        // Check if type is directory
                        if (entity.type == "0")
                            entity.type = "Directory";

                        remote_file_browser_mysql_data.Add(entity);
                    }

                    StateHasChanged();
                });
            });

            // Remote File Browser - Upload file
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserUploadFile", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserUploadFile", command);

                // Use InvokeAsync to reflect changes on UI immediately
                loading_overlay = false;

                await InvokeAsync(async () =>
                {
                    await Remote_File_Browser_Get_Index(remote_file_browser_path, false);
                    _uploadProgressDisplayString = Localizer["file_uploaded_to_device"].ToString();
                    uploading_linear = false;
                    StateHasChanged();
                });
            });

            // Remote File Browser - Download file
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserDownloadFile", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserDownloadFile", command);

                // Use InvokeAsync to reflect changes on UI immediately
                loading_overlay = false;

                await InvokeAsync(async () =>
                {
                    string file_guid = String.Empty;

                    try
                    {
                        // Extract guid from json, using json document
                        using (JsonDocument document = JsonDocument.Parse(command))
                        {
                            JsonElement root = document.RootElement;
                            file_guid = root.GetProperty("guid").GetString();
                        }

                        string password = await NetLock_RMM_Web_Console.Classes.File_Server.Handler.Get_File_Password_By_Guid(file_guid);

                        // Download the file
                        await Download_File(file_guid, true, password);

                        uploading_linear = false;
                        uploading_indeterminate = false;
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/dashboard -> Remote_Setup_SignalR", "General error", ex.ToString());
                        error_occurred = true;
                        error_occurred_display = command;
                        uploading_linear = false;
                        uploading_indeterminate = false;
                    }

                    StateHasChanged();
                });
            });

            // Remote File Browser - Create Directory
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserCreateDirectory", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserCreateDirectory", command);

                // Use InvokeAsync to reflect changes on UI immediately
                loading_overlay = false;

                await InvokeAsync(async () =>
                {
                    await Remote_File_Browser_Get_Index(remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count() - 1], false);
                    await Remote_File_Browser_Result_Dialog(command);
                    StateHasChanged();
                });
            });

            // Remote File Browser - Delete Directory
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserDeleteDirectory", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserDeleteDirectory", command);

                // Use InvokeAsync to reflect changes on UI immediately
                loading_overlay = false;

                await InvokeAsync(async () =>
                {
                    await Remote_File_Browser_Get_Index(remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count() - 2], false);
                    await Remote_File_Browser_Result_Dialog(command);
                    StateHasChanged();
                });
            });

            // Remote File Browser - Move Directory
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserMoveDirectory", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserMoveDirectory", command);

                // Use InvokeAsync to reflect changes on UI immediately
                loading_overlay = false;

                await InvokeAsync(async () =>
                {
                    await Remote_File_Browser_Get_Index(remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count() - 2], false);
                    await Remote_File_Browser_Result_Dialog(command);
                    StateHasChanged();
                });
            });

            // Remote File Browser - Rename
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserRenameDirectory", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserRenameDirectory", command);

                // Use InvokeAsync to reflect changes on UI immediately
                loading_overlay = false;

                await InvokeAsync(async () =>
                {
                    await Remote_File_Browser_Get_Index(remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count() - 2], false);
                    await Remote_File_Browser_Result_Dialog(command);
                    StateHasChanged();
                });
            });

            // Remote File Browser - Create File
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserCreateFile", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserCreateFile", command);

                // Use InvokeAsync to reflect changes on UI immediately
                loading_overlay = false;

                await InvokeAsync(async () =>
                {
                    await Remote_File_Browser_Get_Index(remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count() - 1], false);
                    await Remote_File_Browser_Result_Dialog(command);
                    StateHasChanged();
                });
            });

            // Remote File Browser - Delete File
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserDeleteFile", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserDeleteFile", command);

                // Use InvokeAsync to reflect changes on UI immediately
                loading_overlay = false;

                await InvokeAsync(async () =>
                {
                    await Remote_File_Browser_Get_Index(remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count() - 1], false);
                    await Remote_File_Browser_Result_Dialog(command);
                    StateHasChanged();
                });
            });

            // Remote File Browser - Move File
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserMoveFile", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserMoveFile", command);

                // Use InvokeAsync to reflect changes on UI immediately
                loading_overlay = false;

                await InvokeAsync(async () =>
                {
                    await Remote_File_Browser_Get_Index(remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count() - 1], false);
                    await Remote_File_Browser_Result_Dialog(command);
                    StateHasChanged();
                });
            });

            // Remote File Browser - Rename File
            remote_server_client.On<string>("ReceiveClientResponseRemoteFileBrowserRenameFile", async (command) =>
            {
                Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "ReceiveClientResponseRemoteFileBrowserRenameFile", command);

                // Use InvokeAsync to reflect changes on UI immediately
                loading_overlay = false;

                await InvokeAsync(async () =>
                {
                    await Remote_File_Browser_Get_Index(remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count() - 1], false);
                    await Remote_File_Browser_Result_Dialog(command);
                    StateHasChanged();
                });
            });

            // Start the connection
            await remote_server_client.StartAsync();

            remote_server_client_setup = true;

            await Remote_File_Browser_Get_Drives();

            Logging.Handler.Debug("/dashboard -> Remote_Setup_SignalR", "Connected to the remote server.", remote_server_client_setup.ToString());

            this.Snackbar.Add(Localizer["connected_with_netlock_remote_server"].ToString(), Severity.Info);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_Setup_SignalR", "General error", ex.ToString());
        }
        finally
        {
            uploading_linear = false;
            uploading_indeterminate = false;
            StateHasChanged();
        }
    }

    private bool remote_authentification_dialog_open = false;

    private async Task Remote_Authentificate_Dialog()
    {
        if (remote_authentification_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        remote_authentification_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Devices.Dialogs.Remote_Authentificate_Dialog>(string.Empty, options).Result;

        remote_authentification_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/devices -> Event_Details_Dialog", "Result", result.Data.ToString());

        // Check if the user is authentificated
        if (result.Data.ToString() == "authentificated")
        {
            await Remote_Setup_SignalR();
        }
    }

    #endregion

    #region Remote File Browser

    private async Task Remote_File_Browser_Path_Keyboard_Enter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !String.IsNullOrEmpty(remote_file_browser_path))
            await Remote_File_Browser_Get_Index(remote_file_browser_path, false);
    }

    private List<Remote_File_Browser_Entity> remote_file_browser_mysql_data;

    private string remote_file_browser_drive_string = String.Empty;
    private List<string> remote_file_browser_drives_list = new List<string> { };

    private string remote_file_browser_path = String.Empty;
    private List<string> remote_file_browser_old_paths_list = new List<string> { };

    public class Remote_File_Browser_Entity
    {
        public string name { get; set; } = String.Empty;
        public string path { get; set; } = String.Empty;
        public string type { get; set; } = String.Empty;
        public string size { get; set; } = String.Empty;
        public string last_modified { get; set; } = String.Empty;
    }

    private string remote_file_browser_table_view_port = "70vh";
    private string remote_file_browser_table_sorted_column;
    private string remote_file_browser_table_search_string = "";

    private bool Remote_File_Browser_Table_Filter_Func(Remote_File_Browser_Entity row)
    {
        if (string.IsNullOrEmpty(remote_file_browser_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(remote_file_browser_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path.Contains(remote_file_browser_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.type.Contains(remote_file_browser_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.size.Contains(remote_file_browser_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.last_modified.Contains(remote_file_browser_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string remote_file_browser_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private async void Remote_File_Browser_RowClickHandler(Remote_File_Browser_Entity row)
    {
        remote_file_browser_selectedRowContent = row.path;

        if (row.type == "Directory")
        {
            remote_file_browser_path = row.path;
            await Remote_File_Browser_Get_Index(row.path, false);
        }
    }

    private string Remote_File_Browser_GetRowClass(Remote_File_Browser_Entity row)
    {
        return row.path == remote_file_browser_selectedRowContent ? "selected-row" : "";
    }

    private async Task Remote_File_Browser_Get_Drives()
    {
        try
        {
            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 0, // drives
                    file_browser_path = remote_file_browser_path,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_Shell_Send_Command", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "General error", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "General error", ex.Message);
        }
    }

    private async Task Remote_File_Browser_Get_Index(string _remote_file_browser_path, bool backwards)
    {
        try
        {
            // Handle navigating backwards
            if (backwards && remote_file_browser_old_paths_list.Count > 0)
            {
                if (remote_file_browser_old_paths_list.Count > 1)
                {
                    // Remove the current path
                    remote_file_browser_old_paths_list.RemoveAt(remote_file_browser_old_paths_list.Count - 1);

                    // Get the previous path
                    _remote_file_browser_path = remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count - 1];
                }
                else
                {
                    // If only one path is left, go to the base path
                    _remote_file_browser_path = remote_file_browser_drives_list[0];
                    remote_file_browser_old_paths_list.Clear();  // Reset old paths list
                    remote_file_browser_old_paths_list.Add(_remote_file_browser_path);  // Add the base path back to the history
                }

                // Log the action
                Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Get_Index", "Backwards", _remote_file_browser_path);
            }

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 1, // index
                    file_browser_path = _remote_file_browser_path,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_Shell_Send_Command", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);
                    remote_file_browser_path = _remote_file_browser_path;

                    // Add current path to list before updating
                    if (remote_file_browser_old_paths_list.Count == 0 || remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count - 1] != remote_file_browser_path)
                        remote_file_browser_old_paths_list.Add(remote_file_browser_path);

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "General error", ex.ToString());
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "General error", ex.ToString());
        }
    }

    private async Task Remote_File_Browser_Create_Directory(string _remote_file_browser_path)
    {
        try
        {
            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Create_Directory", "Path", _remote_file_browser_path);

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 2, // create directory
                    file_browser_path = _remote_file_browser_path,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_Shell_Send_Command", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);

                    // Add current path to list before updating
                    if (remote_file_browser_old_paths_list.Count == 0 || remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count - 1] != _remote_file_browser_path)
                        remote_file_browser_old_paths_list.Add(_remote_file_browser_path);

                    remote_file_browser_path = _remote_file_browser_path;
                    loading_overlay = true;

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "General error", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_File_Browser_Create_Directory", "General error", ex.ToString());
        }
    }

    private async Task Remote_File_Browser_Delete_Directory(string _remote_file_browser_path)
    {
        try
        {
            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Delete_Directory", "Path", _remote_file_browser_path);

            bool? result = await DialogService.ShowMessageBox(Localizer["warning"], Localizer["Are you sure you want to delete the directory?"] + " " + _remote_file_browser_path, yesText: "" + Localizer["confirm"] + "", cancelText: "" + Localizer["cancel"] + "");
            bool state = Convert.ToBoolean(result == null ? "false" : "true");

            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Delete_Directory", "Result", state.ToString());

            // if true
            if (!state)
                return;

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid,
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 3, // delete directory
                    file_browser_path = _remote_file_browser_path,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_Shell_Send_Command", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);
                    // Add current path to list before updating
                    if (remote_file_browser_old_paths_list.Count == 0 || remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count - 1] != _remote_file_browser_path)
                        remote_file_browser_old_paths_list.Add(_remote_file_browser_path);

                    remote_file_browser_path = _remote_file_browser_path;
                    loading_overlay = true;

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "General error", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_File_Browser_Delete_Directory", "General error", ex.ToString());
        }
    }

    private async Task Remote_File_Browser_Move_Directory(string _remote_file_browser_path, string _remote_file_browser_path_move)
    {
        try
        {
            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Create_Directory", "Path", _remote_file_browser_path);

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 4, // move directory
                    file_browser_path = _remote_file_browser_path,
                    file_browser_path_move = _remote_file_browser_path_move,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_Shell_Send_Command", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);

                    // Add current path to list before updating
                    if (remote_file_browser_old_paths_list.Count == 0 || remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count - 1] != _remote_file_browser_path)
                        remote_file_browser_old_paths_list.Add(_remote_file_browser_path);

                    remote_file_browser_path = _remote_file_browser_path_move;
                    loading_overlay = true;

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "General error", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_Shell_Send_Command", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_File_Browser_Create_Directory", "General error", ex.ToString());
        }
    }

    private async Task Remote_File_Browser_Rename_Directory(string _remote_file_browser_path, string _remote_file_browser_path_move)
    {
        try
        {
            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Rename_Directory", "Path", _remote_file_browser_path);

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 5, // rename directory
                    file_browser_path = _remote_file_browser_path,
                    file_browser_path_move = _remote_file_browser_path_move,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Rename_Directory", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);

                    // Add current path to list before updating
                    if (remote_file_browser_old_paths_list.Count == 0 || remote_file_browser_old_paths_list[remote_file_browser_old_paths_list.Count - 1] != _remote_file_browser_path)
                        remote_file_browser_old_paths_list.Add(_remote_file_browser_path);

                    remote_file_browser_path = _remote_file_browser_path_move;
                    loading_overlay = true;

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_File_Browser_Rename_Directory", "General error", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_File_Browser_Rename_Directory", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_File_Browser_Rename_Directory", "General error", ex.ToString());
        }
    }

    private async Task Remote_File_Browser_Create_File(string _remote_file_browser_path, string file_browser_file_content)
    {
        try
        {
            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Rename_Directory", "Path", _remote_file_browser_path);

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid,
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 6, // create file
                    file_browser_path = _remote_file_browser_path,
                    file_browser_path_move = String.Empty,
                    file_browser_file_content = file_browser_file_content,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Rename_Directory", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);
                    loading_overlay = true;

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_File_Browser_Rename_Directory", "General error", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_File_Browser_Rename_Directory", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_File_Browser_Rename_Directory", "General error", ex.ToString());
        }
    }

    private async Task Remote_File_Browser_Delete_File(string _remote_file_browser_path)
    {
        try
        {
            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Delete_File", "Path", _remote_file_browser_path);

            bool? result = await DialogService.ShowMessageBox(Localizer["warning"], Localizer["Are you sure you want to delete the file?"] + " " + _remote_file_browser_path, yesText: "" + Localizer["confirm"] + "", cancelText: "" + Localizer["cancel"] + "");
            bool state = Convert.ToBoolean(result == null ? "false" : "true");

            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Delete_File", "Result", state.ToString());

            // if true
            if (state == false)
                return;

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid,
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 7, // delete file
                    file_browser_path = _remote_file_browser_path,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Delete_File", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);
                    loading_overlay = true;

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_File_Browser_Delete_File", "General error", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_File_Browser_Delete_File", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_File_Browser_Delete_File", "General error", ex.ToString());
        }
    }

    private async Task Remote_File_Browser_Move_File(string _remote_file_browser_path, string _remote_file_browser_path_move)
    {
        try
        {
            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Move_File", "Path", _remote_file_browser_path);

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 8, // move file
                    file_browser_path = _remote_file_browser_path,
                    file_browser_path_move = _remote_file_browser_path_move,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Move_File", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);
                    loading_overlay = true;

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_File_Browser_Move_File", "General error", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_File_Browser_Move_File", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_File_Browser_Move_File", "General error", ex.ToString());
        }
    }

    private async Task Remote_File_Browser_Rename_File(string _remote_file_browser_path, string _remote_file_browser_path_move)
    {
        try
        {
            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Rename_File", "Path", _remote_file_browser_path);

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 9, // rename file
                    file_browser_path = _remote_file_browser_path,
                    file_browser_path_move = _remote_file_browser_path_move,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Rename_File", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);
                    loading_overlay = true;

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_File_Browser_Rename_File", "General error", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_File_Browser_Rename_File", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_File_Browser_Rename_File", "General error", ex.ToString());
        }
    }

    private async Task Remote_File_Browser_Upload_File_To_Device(string register_guid, string _remote_file_browser_path)
    {
        try
        {
            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Upload_File_To_Device", "register_guid", register_guid);

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 10, // upload file
                    file_browser_file_guid = register_guid,
                    file_browser_path = _remote_file_browser_path,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Upload_File_To_Device", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_File_Browser_Upload_File_To_Device", "General error", ex.ToString());
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_File_Browser_Upload_File_To_Device", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_File_Browser_Upload_File_To_Device", "General error", ex.ToString());
        }
    }

    private async Task Remote_File_Browser_Downlaod_File_From_Device(string _remote_file_browser_path)
    {
        try
        {
            Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Downlaod_File_From_Device", "_remote_file_browser_path", _remote_file_browser_path);

            uploading_indeterminate = true;
            _uploadProgressDisplayString = Localizer["waiting_for_device_to_upload_file"].ToString();

            // Create the object
            var adminIdentity = new Remote_Admin_Identity
                {
                    admin_username = username,
                    admin_password = password_hashed,
                    session_guid = session_guid
                };

            var targetDevice = new Remote_Target_Device
                {
                    device_id = device_id,
                    device_name = device_name,
                    tenant_guid = tenant_guid,
                    location_guid = location_guid
                };

            var command = new Remote_Command
                {
                    type = 1, // file browser
                    wait_response = true,
                    powershell_code = String.Empty,
                    file_browser_command = 11, // download file
                    file_browser_path = _remote_file_browser_path,
                };

            var rootObject = new Remote_Root_Object
                {
                    admin_identity = adminIdentity,
                    target_device = targetDevice,
                    command = command
                };

            // Serialization of the object
            string json = JsonSerializer.Serialize(rootObject, new JsonSerializerOptions { WriteIndented = true });

            if (remote_server_client_setup)
            {
                Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Upload_File_To_Device", "Message", json);

                try
                {
                    await remote_server_client.SendAsync("MessageReceivedFromWebconsole", json);

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/dashboard -> Remote_File_Browser_Upload_File_To_Device", "General error", ex.ToString());
                }
            }
            else
            {
                Logging.Handler.Error("/dashboard -> Remote_File_Browser_Upload_File_To_Device", "Remote server not setup.", "");
                await Remote_Authentificate_Dialog();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Remote_File_Browser_Upload_File_To_Device", "General error", ex.ToString());
        }
    }

    private bool remote_file_browser_result_dialog_open = false;

    private async Task Remote_File_Browser_Result_Dialog(string _result)
    {
        if (remote_file_browser_result_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",
            };

        remote_file_browser_result_dialog_open = true;

        DialogParameters parameters = new DialogParameters();
        parameters.Add("result", _result);

        remote_file_browser_result_dialog_open = false;

        await this.DialogService.Show<Pages.Devices.Dialogs.Remote_File_Browser.Result_Dialog>(string.Empty, parameters, options).Result;
    }

    private bool remote_file_browser_create_directory_dialog_open = false;

    private async Task Remote_File_Browser_Create_Directory_Dialog(string _remote_file_path)
    {
        if (remote_file_browser_create_directory_dialog_open)
            return;

        if (!remote_server_client_setup)
            await Remote_Authentificate_Dialog();

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",
            };

        remote_file_browser_create_directory_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Devices.Dialogs.Remote_File_Browser.Create_Directory_Dialog>(string.Empty, options).Result;

        remote_file_browser_create_directory_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Create_Directory_Dialog", "Result", result.Data.ToString());

        await Remote_File_Browser_Create_Directory(_remote_file_path + "\\" + result.Data.ToString());
    }

    private bool remote_file_browser_move_directory_dialog_open = false;

    private async Task Remote_File_Browser_Move_Directory_Dialog(string _remote_file_path)
    {
        if (remote_file_browser_move_directory_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        remote_file_browser_move_directory_dialog_open = false;

        DialogParameters parameters = new DialogParameters();
        parameters.Add("_remote_file_path", _remote_file_path);

        remote_file_browser_move_directory_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Devices.Dialogs.Remote_File_Browser.Move_Directory_Dialog>(string.Empty, parameters, options).Result;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Create_Directory_Dialog", "Result", result.Data.ToString());

        await Remote_File_Browser_Move_Directory(_remote_file_path, result.Data.ToString());
    }

    private bool remote_file_browser_rename_directory_dialog_open = false;

    private async Task Remote_File_Browser_Rename_Directory_Dialog(string _remote_file_path)
    {
        // Use regex to get the file name from the remote file path
        string pattern = @"\\([^\\]+)$";
        Match match = Regex.Match(_remote_file_path, pattern);

        // Assign the match to a string
        string remote_file_name = match.Groups[1].Value;

        var options = new DialogOptions
            {

                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("_remote_file_path", remote_file_name);

        remote_file_browser_rename_directory_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Devices.Dialogs.Remote_File_Browser.Rename_Directory_Dialog>(string.Empty, parameters, options).Result;

        remote_file_browser_rename_directory_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Rename_Directory_Dialog", "Result", result.Data.ToString());

        // Use the result to replace the old file name with the new one in the remote file path
        string _remote_file_path_new = _remote_file_path.Replace(remote_file_name, result.Data.ToString());
        Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Rename_Directory_Dialog", "Result, new file path", _remote_file_path_new);

        await Remote_File_Browser_Rename_Directory(_remote_file_path, _remote_file_path_new);
    }

    private bool remote_file_browser_create_file_dialog_open = false;

    private async Task Remote_File_Browser_Create_File_Dialog(string _remote_file_path)
    {
        if (remote_file_browser_create_file_dialog_open)
            return;

        if (!remote_server_client_setup)
            await Remote_Authentificate_Dialog();

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        remote_file_browser_create_file_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Devices.Dialogs.Remote_File_Browser.Create_File_Dialog>(string.Empty, options).Result;

        remote_file_browser_create_file_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Create_Directory_Dialog", "Result", result.Data.ToString());

        // Extract file_name and content from result, its split with,
        string[] result_array = result.Data.ToString().Split("\u001F");
        string file_name = result_array[0];
        string file_content = result_array[1];

        await Remote_File_Browser_Create_File(_remote_file_path + "\\" + file_name, file_content);
    }

    private bool remote_file_browser_move_file_dialog_open = false;

    private async Task Remote_File_Browser_Move_File_Dialog(string _remote_file_path)
    {
        if (remote_file_browser_move_file_dialog_open)
            return;

        var options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("_remote_file_path", _remote_file_path);

        remote_file_browser_move_file_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Devices.Dialogs.Remote_File_Browser.Move_File_Dialog>(string.Empty, parameters, options).Result;

        remote_file_browser_move_file_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Move_File_Dialog", "Result", result.Data.ToString());

        await Remote_File_Browser_Move_File(_remote_file_path, result.Data.ToString());
    }

    private bool remote_file_browser_rename_file_dialog_open = false;

    private async Task Remote_File_Browser_Rename_File_Dialog(string _remote_file_path)
    {
        if (remote_file_browser_rename_file_dialog_open)
            return;

        // Use regex to get the file name from the remote file path
        string pattern = @"\\([^\\]+)$";
        Match match = Regex.Match(_remote_file_path, pattern);

        // Assign the match to a string
        string remote_file_name = match.Groups[1].Value;

        var options = new DialogOptions
            {

                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("_remote_file_path", remote_file_name);

        remote_file_browser_rename_file_dialog_open = true;

        var result = await this.DialogService.Show<Pages.Devices.Dialogs.Remote_File_Browser.Move_Directory_Dialog>(string.Empty, parameters, options).Result;

        remote_file_browser_rename_file_dialog_open = false;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Rename_File_Dialog", "Result", result.Data.ToString());

        // Use the result to replace the old file name with the new one in the remote file path
        string _remote_file_path_new = _remote_file_path.Replace(remote_file_name, result.Data.ToString());
        Logging.Handler.Debug("/dashboard -> Remote_File_Browser_Rename_File_Dialog", "Result, new file path", _remote_file_path_new);

        await Remote_File_Browser_Rename_File(_remote_file_path, _remote_file_path_new);
    }

    private bool uploading_linear = false;
    private bool uploading_indeterminate = false;
    private double _uploadProgress = 0; // %
    private string _uploadProgressDisplayString = String.Empty; // %
    private IList<IBrowserFile> _files = new List<IBrowserFile>();

    private async void Upload_File(IBrowserFile file)
    {
        try
        {
            Snackbar.Configuration.ShowCloseIcon = true;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

            uploading_linear = true;

            _files.Clear();
            _files.Add(file);

            // Max size for the uploaded file (e.g., 10 gb)
            long maxAllowedSize = 10L * 1024 * 1024 * 1024; // 10 gb

            // Retrieve API key
            string api_key = await Classes.MySQL.Handler.Quick_Reader("SELECT * FROM settings;", "files_api_key");

            // Create a HttpClient instance
            using (var httpClient = new HttpClient())
            {
                httpClient.Timeout = TimeSpan.FromHours(24); // Set timeout to 24 hours

                // Set headers (no need for "application/json" since we are sending a file)
                httpClient.DefaultRequestHeaders.Add("x-api-key", api_key);

                Logging.Handler.Debug("/manage_files", "Upload_File", $"{File_Server.Connection_String}/admin/files/upload/{Uri.EscapeDataString(Path.Combine(Application_Paths._private_files_devices, tenant_guid, location_guid, device_name, "uploaded", file.Name))}?tenant_guid={tenant_guid}&location_guid={location_guid}&device_name={device_name}");

                // Create MultipartFormDataContent for the file
                using (var content = new MultipartFormDataContent())
                {
                    foreach (var _file in _files)
                    {
                        try
                        {
                            // Open the file stream with size check
                            var fileStream = _file.OpenReadStream(maxAllowedSize); // If size exceeds, this will throw an exception

                            // Create stream content with progress handling
                            var fileContent = new ProgressableStreamContent(new StreamContent(fileStream), 4096, progress =>
                            {
                                _uploadProgress = progress;
                                _uploadProgressDisplayString = $"{Localizer["uploading_file_to_server"].ToString()}: {progress:0.00}%";
                                InvokeAsync(StateHasChanged); // Update UI with progress
                            });

                            // Set the content headers for the file (based on the file type)
                            fileContent.Headers.ContentType = new MediaTypeHeaderValue(_file.ContentType);

                            // Add the file content to the MultipartFormDataContent
                            content.Add(fileContent, "file", _file.Name);
                        }
                        catch (IOException ex)
                        {
                            Logging.Handler.Error("/manage_files -> Upload_File", $"File exceeds max size: {ex.ToString()}", "");
                            Snackbar.Add($"{Localizer["The file exceeds the maximum allowed size of"].ToString()} 10 GB.", Severity.Error);
                            return;
                        }
                    }

                    // Send the request to the server with the path included in the URL
                    var uploadUrl = $"{File_Server.Connection_String}/admin/files/upload/{Uri.EscapeDataString(Path.Combine(Application_Paths._private_files_devices, tenant_guid, location_guid, device_name, "uploaded", file.Name))}?tenant_guid={tenant_guid}&location_guid={location_guid}&device_name={device_name}";
                    var response = await httpClient.PostAsync(uploadUrl, content);

                    // Handle the response
                    if (response.IsSuccessStatusCode)
                    {
                        var result = await response.Content.ReadAsStringAsync();
                        Logging.Handler.Debug("/manage_files -> Upload_File", "result", result);

                        if (result == "Unauthorized.")
                        {
                            Snackbar.Add(Localizer["unauthorized"], Severity.Error);
                            return;
                        }

                        // Extract register json
                        string register_guid = String.Empty;

                        using (JsonDocument doc = JsonDocument.Parse(result))
                        {
                            // Read the values directly from the JSON                            
                            register_guid = doc.RootElement.GetProperty("guid").GetString();
                        }

                        // Notify the device about the upload attempt
                        _uploadProgressDisplayString = Localizer["wait_for_device_to_download_file"].ToString();

                        await Remote_File_Browser_Upload_File_To_Device(register_guid, Path.Combine(remote_file_browser_path, file.Name));

                        // From now on wait for the response from the device
                        error_occurred = false;
                    }
                    else
                    {
                        // Log and display error
                        Logging.Handler.Error("/manage_files -> Upload_File", "response", response.StatusCode.ToString());
                        error_occurred = true;
                        error_occurred_display = response.StatusCode.ToString();
                        Snackbar.Add(Localizer["error"], Severity.Error);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_files -> Upload_File", "", ex.ToString());
            Snackbar.Add(Localizer["error"], Severity.Error);
        }
        finally
        {
            _uploadProgress = 0;
        }
    }

    // Open as new link for user to download
    private async Task Download_File(string guid, bool _private, string password)
    {
        Snackbar.Configuration.ShowCloseIcon = true;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        if (_private)
        {
            string url = File_Server.Connection_String + $"/admin/files/download?guid={guid}&password={password}";
            await JSRuntime.InvokeVoidAsync("window.open", url, "_blank");
        }
        else
        {
            string url = File_Server.Connection_String + "/admin/files/download?guid=" + guid;
            await JSRuntime.InvokeVoidAsync("window.open", url, "_blank");
        }
    }

    public class ProgressableStreamContent : HttpContent
    {
        private readonly HttpContent _content;
        private readonly int _bufferSize;
        private readonly Action<double> _progress;

        public ProgressableStreamContent(HttpContent content, int bufferSize, Action<double> progress)
        {
            _content = content ?? throw new ArgumentNullException(nameof(content));
            _bufferSize = bufferSize;
            _progress = progress;
            foreach (var header in _content.Headers)
            {
                Headers.TryAddWithoutValidation(header.Key, header.Value);
            }
        }

        protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            try
            {
                var buffer = new byte[_bufferSize];
                long size = _content.Headers.ContentLength ?? -1L;

                // If size -1, calculate the size manually
                if (size < 0)
                {
                    size = (await _content.ReadAsStreamAsync()).Length;
                }

                long uploaded = 0;

                using (var contentStream = await _content.ReadAsStreamAsync())
                {
                    while (true)
                    {
                        var length = await contentStream.ReadAsync(buffer, 0, buffer.Length);
                        if (length == 0)
                        {
                            break;
                        }

                        await stream.WriteAsync(buffer, 0, length);
                        uploaded += length;

                        if (size > 0)
                        {
                            var progress = (double)uploaded / size * 100;

                            // Round to two decimal places
                            progress = Math.Round(progress, 2);

                            _progress(progress); // Callback
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // Fehlerprotokollierung
                Logging.Handler.Error("/manage_files -> SerializeToStreamAsync", "", ex.ToString());
            }
        }


        protected override bool TryComputeLength(out long length)
        {
            length = _content.Headers.ContentLength ?? -1;
            return length >= 0;
        }
    }

    #endregion

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        this.MudDialog.Close(DialogResult.Ok("success"));
    }

    private void Cancel() => MudDialog.Cancel();
}