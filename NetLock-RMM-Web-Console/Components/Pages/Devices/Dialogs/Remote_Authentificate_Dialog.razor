@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Devices.Dialogs.Remote_Authentificate_Dialog> Localizer

<MudDialog Style="width: 600px;">
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["authentification"]</MudText>
    </TitleContent>
    <DialogContent>

        <MudText Typo="Typo.body1">@Localizer["text"]</MudText>
        <MudTextField Class="mt-2" Label="@Localizer["username"]" T="string" Lines="1" @bind-Value="@username" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" ReadOnly="false" />
        <MudTextField Label="@Localizer["password"]" T="string" Lines="1" @bind-Value="@password" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" InputType="@InputType.Password" ReadOnly="false" />
       
    </DialogContent>
    <DialogActions>
        
        <MudButton OnClick="@OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">@Localizer["confirm"]</MudButton>
        <MudButton OnClick="@Cancel" Variant="Variant.Text" Size="@Size.Small" Color="@Color.Default">@Localizer["cancel"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private string username = String.Empty;
    private string password = String.Empty;
    private string session_guid_local = String.Empty;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get session_guid local
            var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
            var session_guid_result = await sessionStorage.GetAsync<string>("session_guid");
            session_guid_local = session_guid_result.Value;

            // Get username from session
            var session_username = await sessionStorage.GetAsync<string>("username");
            username = session_username.Value;

            Logging.Handler.Debug("/devices (Remote_Authentificate_Dialog) -> OK", "session_guid_local", session_guid_local);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices (Remote_Authentificate_Dialog) -> OnInitializedAsync", "Result", ex.Message);
        }
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool session_guid_valid = false;
        string session_guid_database = String.Empty;

        bool user_verified = await Classes.Authentication.User.Verify_User(username, password);

        if (user_verified) // Check custom session guid
        {
            // Get session_guid from database
            session_guid_database = await Classes.MySQL.Handler.Get_Session_Guid_By_Username(username);

            Logging.Handler.Debug("/devices (Remote_Authentificate_Dialog) -> OK", "session_guid_database", session_guid_database);

            // Check if database session_guid is equal to the local session_guid
            if (session_guid_local == session_guid_database)
                session_guid_valid = true;
            else
                session_guid_valid = false;

            Logging.Handler.Debug("/devices (Remote_Authentificate_Dialog) -> OK", "sessions_guid_equal", session_guid_valid.ToString());

            // Check if session_guid is valid
            if (session_guid_valid)
            {
                this.MudDialog.Close(DialogResult.Ok("authentificated"));
            }
            else
            {
                this.Snackbar.Add(Localizer["invalid_session_guid"], Severity.Error);
                this.MudDialog.Close(DialogResult.Ok("error"));
            }
        }
        else
        {
            Logging.Handler.Debug("/devices (Remote_Authentificate_Dialog) -> OK", "success", session_guid_valid.ToString());
            this.Snackbar.Add(Localizer["auth_failed_check_credentials"], Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}