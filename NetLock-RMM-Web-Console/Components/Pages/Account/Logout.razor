@page "/logout"

@using Microsoft.AspNetCore.Authentication
@using NetLock_RMM_Web_Console.Classes.Authentication
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection

@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject ProtectedSessionStorage SessionStorage

<h3>Logout</h3>

@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        try
        {
            var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider); // not required if injecting it
            await sessionStorage.DeleteAsync("username");
            await sessionStorage.DeleteAsync("password");

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthentificationState(new UserSession(), true);

            NavigationManager.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/logout", "AfterInitializedAsync", ex.ToString());
            NavigationManager.NavigateTo("/login", true);
        }
    }
}
