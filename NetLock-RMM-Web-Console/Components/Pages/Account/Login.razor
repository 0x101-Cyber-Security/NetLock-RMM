@page "/"
@page "/login"

@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Net.WebSockets;
@using System.Threading.Tasks;
@using System.Security.Claims;
@using Blazored.LocalStorage;
@using System.Security.Principal;
@using Microsoft.AspNetCore.Identity;
@using MySqlConnector;
@using NetLock_RMM_Web_Console.Classes.Authentication
@using Google.Authenticator;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Globalization;
@using System.Resources;
@using Microsoft.Extensions.Options
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Localization
@using Microsoft.JSInterop

@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Components.Pages.Account.Login> Localizer
@inject IHttpContextAccessor _httpContextAccessor

<AuthorizeView>
    <NotAuthorized>

        <MudLayout>
            <MudAppBar Elevation="0">
                <MudImage Src="media/images/NetLock-RMM-Logo-Transparent.svg" Alt="Favicon" Width="35" Height="35" Class="mr-3" />

                <!-- Only show the title on larger screens -->
                <MudText Typo="Typo.h5" Class="ml-3 d-none d-md-flex">NetLock RMM</MudText>

                <MudSpacer />

                <!-- Normal icon buttons for larger screens -->
                <div class="d-none d-md-flex">
                    <MudIconButton Href="https://github.com/0x101-Cyber-Security/NetLock-RMM/issues" Target="_blank" Icon="@Icons.Material.Filled.BugReport" Color="Color.Inherit" Title="@Localizer["report_a_bug"]" />
                    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/0x101-Cyber-Security/NetLock-RMM" Title="GitHub" Target="_blank" />
                    <MudIconButton Icon="@Icons.Material.Filled.MenuBook" Color="Color.Inherit" Href="https://docs.netlockrmm.com/en/home" Title="@Localizer["documentation"]" Target="_blank" />
                    <MudIconButton Icon="@Icons.Material.Filled.Support" Color="Color.Inherit" Href="https://members.netlockrmm.com/" Title="Support" Target="_blank" />
                    <MudIconButton Icon="@Icons.Custom.Brands.Discord" Color="Color.Inherit" Href="https://discord.gg/HqUpZgtX4U" Title="Discord" Target="_blank" />
                </div>

                <!-- Dropdown menu for mobile view -->
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Class="d-md-none">
                    <MudMenuItem Href="https://github.com/0x101-Cyber-Security/NetLock-RMM/issues" Target="_blank">@Localizer["report_a_bug"]</MudMenuItem>
                    <MudMenuItem Href="https://github.com/0x101-Cyber-Security/NetLock-RMM" Target="_blank">GitHub</MudMenuItem>
                    <MudMenuItem Href="https://docs.netlockrmm.com/en/home" Target="_blank">@Localizer["documentation"]</MudMenuItem>
                    <MudMenuItem Href="https://members.netlockrmm.com" Target="_blank">@Localizer["support"]</MudMenuItem>
                    <MudMenuItem Href="https://discord.gg/HqUpZgtX4U" Target="_blank">Discord</MudMenuItem>
                </MudMenu>
            </MudAppBar>

            <MudContainer MaxWidth="MaxWidth.Medium" Class="mx-auto mt-5">
                <MudCard>
                    <MudCardContent Class="p-5 bg-white">
                        <MudText Typo="Typo.h4" Class="mb-4 text-center">Login</MudText>

                        <MudForm>

                            @{
                                if (auth_status == 0 && two_factor_state == 0) //2f disabled
                                {
                                    <MudTextField @bind-Value="@username" Label="@Localizer["username"]" RequiredError="@Localizer["required"]" Required="true" OnKeyDown="Enter" Immediate="true" />
                                    <MudTextField @bind-Value="@password" Label="@Localizer["password"]" RequiredError="@Localizer["required"]" Required="true" InputType="@InputType.Password" OnKeyDown="Enter" Immediate="true" />
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@Authenticate" FullWidth="true">@Localizer["login"]</MudButton>
                                }
                                else if (auth_status == 0 && two_factor_state == 1) //2f setup mode
                                {
                                    <MudText Class="mt-2">Two-Factor Authentification had been enabled for your account. Please set it up with your favorite 2factor app.</MudText>
                                    <MudImage Src="@two_factor_qrCodeImageUrl" Alt="QR code" Style="width: 150px; height: 150px;" Class="mt-2" />
                                    <MudText Class="mt-2">Scan the QR code with your Authenticator app or enter the following code manually: @two_factor_manualEntrySetupCode</MudText>

                                    <MudTextField @bind-Value="@two_factor_codeInput" Label="@Localizer["2factor_verification_code"]" Required="true" RequiredError="@Localizer["required"]" Immediate="true" />

                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@Two_Factor_Authentification_VerifyCode">@Localizer["verificate"]</MudButton>
                                }
                                else if (auth_status == 0 && two_factor_state == 2) //2f enabled
                                {
                                    <p>Two-factor authentication code:</p>

                                    <MudTextField @bind-Value="@two_factor_codeInput" Label="@Localizer["2factor_verification_code"]" OnKeyDown="Enter" Required="true" RequiredError="@Localizer["required"]" Immediate="true" />
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@Authenticate">@Localizer["verificate"]</MudButton>
                                }
                                else if (auth_status == 1 && two_factor_state == 0) //logged in, reset password, 2f disabled
                                {
                                    <MudTextField @bind-Value="@password_new" Label="@Localizer["new_password"]" RequiredError="@Localizer["required"]" Required="true" InputType="@InputType.Password" OnKeyDown="Enter" Immediate="true" />
                                    <MudTextField @bind-Value="@password_confirm_new" Label="@Localizer["new_password_confirm"]" RequiredError="@Localizer["required"]" Required="true" InputType="@InputType.Password" OnKeyDown="Enter" Immediate="true" />
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@Reset_Password" FullWidth="true" Disabled=@Check_New_Password()>@Localizer["confirm"]</MudButton>
                                }
                                else if (auth_status == 2 && two_factor_state == 0) //reset password, 2f disabled
                                {
                                    <MudTextField @bind-Value="@username" Label="@Localizer["username"]" RequiredError="@Localizer["required"]" Required="true" OnKeyDown="Enter" Immediate="true" />
                                    <MudTextField @bind-Value="@password" Label="@Localizer["password"]" RequiredError="@Localizer["required"]" Required="true" InputType="@InputType.Password" OnKeyDown="Enter" Immediate="true" />
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@Authenticate" FullWidth="true">@Localizer["login"]</MudButton>
                                }
                                else if (auth_status == 2 && two_factor_state == 1) //reset password, 2f setup mode
                                {
                                    <img src="@two_factor_qrCodeImageUrl" alt="@Localizer["2factor_code_image_alt"]" />
                                    <p>@Localizer["2factor_code_description"]</p>
                                    <p>@two_factor_manualEntrySetupCode</p>

                                    <MudTextField @bind-Value="@two_factor_codeInput" Label="@Localizer["2factor_verification_code"]" Required="true" RequiredError="@Localizer["required"]" Immediate="true" />

                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@Two_Factor_Authentification_VerifyCode">@Localizer["verificate"]</MudButton>
                                }
                                else if (auth_status == 2 && two_factor_state == 2) //reset password, 2f enabled
                                {
                                    <p>@Localizer["2factor_verification_code_long"]</p>

                                    <MudTextField @bind-Value="@two_factor_codeInput" Label="@Localizer["2factor_verification_code"]" OnKeyDown="Enter" Required="true" RequiredError="@Localizer["required"]" Immediate="true" />
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@Authenticate">@Localizer["verificate"]</MudButton>
                                }

                            }

                            <!--Error Message-->
                            <MudText Typo="Typo.body2" Color="Color.Error" Class="mt-3">@message</MudText>

                        </MudForm>

                    </MudCardContent>
                </MudCard>
            </MudContainer>
        </MudLayout>

    </NotAuthorized>

    <Authorized>
        @{
            NavigationManager.NavigateTo("/dashboard", true);
        }
    </Authorized>
</AuthorizeView>

@code {

    private string username = String.Empty;
    private string password = String.Empty;
    private string message = String.Empty;
    private string role = String.Empty;
    private bool isPasswordCorrect = false;
    private int auth_status = 0; //0 = not logged in, 1 = logged in, 2 = reset password

    private bool success = false;

    private int reset_password = 0;
    private string password_new = String.Empty;
    private string password_confirm_new = String.Empty;

    //2factor
    private TwoFactorAuthenticator tfa = new TwoFactorAuthenticator();

    private int two_factor_enabled = 0;
    private bool two_factor_setup_mode = false;
    private int two_factor_state = 0; //0 = disabled, 1 = setup, 2 = enabled
    private string two_factor_account_secret_key = String.Empty;
    private string two_factor_codeInput = String.Empty;
    private bool two_factor_isCodeVerified = false;
    private string two_factor_qrCodeImageUrl = String.Empty;
    private string two_factor_manualEntrySetupCode = String.Empty;

    private int invalid_count = 0;

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" && !String.IsNullOrEmpty(password))
            await Authenticate();
    }

    private async Task Authenticate()
    {
        Logging.Handler.Debug("/login -> Authenticate", "username", username);

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            conn.Open();

            MySqlCommand command = new MySqlCommand("SELECT * FROM accounts WHERE username = @username;", conn);
            command.Parameters.AddWithValue("@username", username);

            MySqlDataReader reader = command.ExecuteReader();

            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    isPasswordCorrect = BCrypt.Verify(password, reader["password"].ToString());
                    role = reader["role"].ToString() ?? string.Empty;
                    two_factor_enabled = Convert.ToInt32(reader["two_factor_enabled"]);
                    two_factor_account_secret_key = reader["two_factor_account_secret_key"].ToString() ?? string.Empty;
                    reset_password = Convert.ToInt32(reader["reset_password"]);
                }
            }
            else
            {
                invalid_count++;
                message = Localizer["invalid_credentials"] + " (" + invalid_count + ")";
                return;
            }

            reader.Close();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("login", "fehler", ex.ToString());
            return; // Abort if an error occurs
        }
        finally
        {
            conn.Close();
        }

        Logging.Handler.Debug("/login -> Authenticate", "isPasswordCorrect", isPasswordCorrect.ToString());
        Logging.Handler.Debug("/login -> Authenticate", "role", role);
        Logging.Handler.Debug("/login -> Authenticate", "two_factor_enabled", two_factor_enabled.ToString());
        Logging.Handler.Debug("/login -> Authenticate", "two_factor_account_secret_key", two_factor_account_secret_key);

        try
        {
            bool user_verified = false;

            if (isPasswordCorrect && reset_password == 1)
            {
                auth_status = 1;
                return;
            }

            if (isPasswordCorrect)
            {
                if (two_factor_enabled == 1)
                {
                    // 2FA is activated
                    if (string.IsNullOrEmpty(two_factor_account_secret_key))
                    {
                        // Key not set, user must go through setup
                        two_factor_account_secret_key = Randomizer.Handler.Key(20);
                        two_factor_setup_mode = true;
                        two_factor_state = 1;
                        await Two_Factor_Authentification_Setup();
                        return;
                    }
                    else
                    {
                        // Key set, user must verify code
                        two_factor_state = 2;
                        await Two_Factor_Authentification_VerifyCode();

                        if (two_factor_isCodeVerified)
                        {
                            user_verified = true;
                        }
                        else
                        {
                            message = Localizer["2factor_invalid_code"];
                            invalid_count++;
                            return; // Abort if the code is incorrect
                        }
                    }
                }
                else
                {
                    // 2FA is not activated
                    user_verified = true;
                }

                if (user_verified)
                {
                    await Login_User();
                }
            }
            else
            {
                invalid_count++;
                message = Localizer["invalid_credentials"] + " (" + invalid_count + ")";
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/login Authenticate", "isPasswordCorrect", ex.ToString());
        }
    }


    private async Task Login_User()
    {
        try
        {
            var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
            await sessionStorage.SetAsync("username", username);
            await sessionStorage.SetAsync("password", password);

            Guid guid = Guid.NewGuid();
            await sessionStorage.SetAsync("session_guid", guid.ToString());

            // Get the user's IP addresses
            string ip_address = _httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString();


            // Update latest login session
            MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

            try
            {
                await conn.OpenAsync();

                string execute_query = "UPDATE accounts SET last_login = @last_login, ip_address = @ip_address, session_guid = @guid WHERE username = @username;";

                MySqlCommand cmd = new MySqlCommand(execute_query, conn);
                cmd.Parameters.AddWithValue("@username", username);
                cmd.Parameters.AddWithValue("@last_login", DateTime.Now);
                cmd.Parameters.AddWithValue("@ip_address", ip_address);
                cmd.Parameters.AddWithValue("@guid", guid.ToString());
                cmd.ExecuteNonQuery();

                success = true;
            }
            catch (Exception ex)
            {
                Logging.Handler.Error("Add_Mail_Notification_Dialog", "General error", ex.ToString());
            }
            finally
            {
                await conn.CloseAsync();
            }

            Logging.Handler.Debug("/login -> Login_User", "perform user login", "username: " + username + " role: " + role);

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthentificationState(new UserSession
                {
                    UserName = username,
                    Role = role
                }, false);

            NavigationManager.NavigateTo("/dashboard", true);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/login -> Login_User", "two_factor_account_secret_key", ex.ToString());
        }
    }

    private async Task Two_Factor_Authentification_VerifyCode()
    {
        two_factor_isCodeVerified = tfa.ValidateTwoFactorPIN(two_factor_account_secret_key, two_factor_codeInput);

        if (two_factor_isCodeVerified && two_factor_setup_mode)
        {
            bool success = false;

            MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

            try
            {
                await conn.OpenAsync();

                string execute_query = "UPDATE accounts SET two_factor_account_secret_key = @two_factor_account_secret_key, two_factor_enabled = 1 WHERE username = @username;";

                MySqlCommand cmd = new MySqlCommand(execute_query, conn);
                cmd.Parameters.AddWithValue("@username", username);
                cmd.Parameters.AddWithValue("@two_factor_account_secret_key", two_factor_account_secret_key);

                cmd.ExecuteNonQuery();
                success = true;
            }
            catch (Exception ex)
            {
                Logging.Handler.Error("/login -> ", "Result", ex.ToString());
            }
            finally
            {
                await conn.CloseAsync();
            }

            Logging.Handler.Debug("/login -> Two_Factor_Authentification_VerifyCode", "result", success.ToString());

            if (success)
            {
                // Setze Setup-Mode zurück und melde den Benutzer an
                two_factor_setup_mode = false;
                await Login_User();
            }
        }
        else if (!two_factor_setup_mode && two_factor_isCodeVerified)
        {
            // 2FA-Verifizierung erfolgreich ohne Setup-Modus
            await Login_User();
        }
    }

    private async Task Two_Factor_Authentification_Setup()
    {
        Logging.Handler.Debug("/login -> Two_Factor_Authentification_Setup", "requested for user", "username: " + username + " role: " + role);

        SetupCode setupInfo = tfa.GenerateSetupCode("NetLock RMM - Instance", username, two_factor_account_secret_key, false, 1);
        two_factor_qrCodeImageUrl = setupInfo.QrCodeSetupImageUrl;
        two_factor_manualEntrySetupCode = setupInfo.ManualEntryKey;

        // The code is expected after the setup        
        message = "Please scan the QR code or manually enter the setup code, then enter the verification code.";
    }

    private bool Check_New_Password()
    {
        if (String.IsNullOrEmpty(password_new) || String.IsNullOrEmpty(password_confirm_new)) //passwords missmatch
        {
            message = String.Empty;
            return true;
        }
        else if (password_new != password_confirm_new)
        {
            message = Localizer["passwords_not_match"];
            return true;
        }
        else
        {
            message = String.Empty;
            return false;
        }
    }

    private async Task Reset_Password()
    {
        bool success = false;

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            string new_password = BCrypt.HashPassword(password_new);

            await conn.OpenAsync();

            string execute_query = "UPDATE accounts SET password = @password_new, reset_password = 0 WHERE username = @username;";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);
            cmd.Parameters.AddWithValue("@username", username);
            cmd.Parameters.AddWithValue("@password_new", new_password);

            cmd.ExecuteNonQuery();
            success = true;

            Logging.Handler.Debug("/login -> Reset_Password", "result", success.ToString());

            //clear password
            password = String.Empty;
            message = String.Empty;
            invalid_count = 0;

            auth_status = 2;

            await Authenticate();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/login -> Reset_Password", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }
    }
}
