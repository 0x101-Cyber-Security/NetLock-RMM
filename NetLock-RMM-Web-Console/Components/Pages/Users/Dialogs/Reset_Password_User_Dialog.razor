@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IStringLocalizer<Pages.Users.Dialogs.Reset_Password_User_Dialog> Localizer

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>

    <Authorized>

        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h5">@Localizer["title"]</MudText>
            </TitleContent>
            <DialogContent>
                @{

                    if (String.IsNullOrEmpty(one_time_password))
                    {
                        <MudText>@Localizer["one_time_password_text_1"]</MudText>
                    }
                    else
                    {
                        <MudText>@Localizer["one_time_password_text_2"] @one_time_password</MudText>
                    }
                }
            </DialogContent>

            <DialogActions>
                @{
                    if (String.IsNullOrEmpty(one_time_password))
                    {
                        <MudButton OnClick="Cancel">@Localizer["cancel"]</MudButton>

                        <MudButton OnClick="Reset_Password" Variant="@Variant.Filled" Color="@Color.Error">@Localizer["reset_password"]</MudButton>
                    }
                    else
                    {
                        <MudButton OnClick="OK" Variant="@Variant.Filled" Color="@Color.Error">@Localizer["cancel"]</MudButton>
                    }
                }
            </DialogActions>
        </MudDialog>

    </Authorized>
</AuthorizeView>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        temp_username = username;
        Logging.Handler.Debug("/manage_users (Delete_User_Dialog) -> OnInitializedAsync", "temp_username", temp_username);
    }

    private string temp_username = String.Empty;
    private string one_time_password = String.Empty;


    private async Task Reset_Password()
    {

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            one_time_password = Randomizer.Handler.Generate_Password(true, 12);
            string one_time_password_hash = BCrypt.HashPassword(one_time_password);


            await conn.OpenAsync();

            string execute_query = "UPDATE accounts SET reset_password = 1, password = @one_time_password_hash WHERE username = @temp_username;";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);
            cmd.Parameters.AddWithValue("@temp_username", temp_username);
            cmd.Parameters.AddWithValue("@one_time_password_hash", one_time_password_hash);
            cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/user_settings (Reset_Password) -> OK", "Result", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }
    }

    private async Task OK()
    {
        this.MudDialog.Close(DialogResult.Ok("success"));
    }

    private void Cancel() => MudDialog.Cancel();
}
