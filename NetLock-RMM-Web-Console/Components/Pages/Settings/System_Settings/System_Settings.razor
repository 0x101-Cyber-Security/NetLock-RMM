@page "/system"

@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using OfficeOpenXml;
@using System.Xml.Serialization;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.DataProtection;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Net;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Settings.System_Settings.System_Settings> Localizer

<style>
    .selected-row-light {
    background-color: lightgray;
    }

    .selected-row-dark {
    background-color: #141414;
    }

    .custom-expansion-panel {
    background-color: transparent;
    }

    .dialog-blurring {
    backdrop-filter: blur(10px);
    }

    .mud-table-cell-custom-group {
    font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
    padding-bottom: 50px;
    text-align: right;
    }

    @@media only screen and (max-width: 768px) {
    .desktop-icon {
    display: none;
    }
    }
</style>

<MudOverlay Visible="@loading_overlay" DarkBackground="false" Absolute="false">
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
</MudOverlay>

<AuthorizeView>

    <Authorized>

        @if (Configuration.Members_Portal.cloud_enabled)
        {
            <MudAlert Severity="Severity.Warning">This section is administered by the cloud team. :-)</MudAlert>
        }

        @if (permissions_settings_enabled && permissions_settings_system_enabled && !Configuration.Members_Portal.cloud_enabled)
        {
            <MudText Typo="Typo.h5" >System</MudText>

            <MudPaper Elevation="4" Class="mt-5">

                <MudText Class="ml-2" Typo="Typo.h6">@Localizer["MySQL"]</MudText>

                <MudGrid>
                    <!-- MySQL Connection Status -->
                    <MudItem xs="12" sm="4">
                        <MudCard Class="pa-2" Elevation="2">
                            <MudCardContent>
                                @if (mysqlConnectionStatus)
                                {
                                    <div style="display: flex; align-items: center;">
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                        <MudText Class="ml-2" Color="Color.Success">@Localizer["connected"]</MudText>                                    
                                    </div>

                                    <!-- Additional MySQL Info -->
                                    <MudText Typo="Typo.body2">Version: @mysqlVersion</MudText>
                                    <MudText Typo="Typo.body2">@Localizer["uptime"]: @mysqlUptime (seconds)</MudText>
                                    <MudText Typo="Typo.body2">@Localizer["active connections"]: @mysqlConnectedUsers</MudText>
                                    <MudText Typo="Typo.body2">@Localizer["database size"]: @mysqlDatabaseSize</MudText>

                                    <!-- Security Info -->
                                    <MudText Typo="Typo.body2">@Localizer["max connections"]: @mysqlMaxConnections</MudText>
                                    <MudText Typo="Typo.body2">@Localizer["failed logins"]: @mysqlFailedLogins</MudText>
                                }
                                else
                                {
                                    <div style="display: flex; align-items: center;">
                                        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                                        <MudText Class="ml-2" Color="Color.Error">@Localizer["not connected"]</MudText>
                                    </div>
                                }
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>

                <MudText Class="mt-3 ml-2" Typo="Typo.h6">@Localizer["active queries"]</MudText>

                <MudTable Height="25vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@mysqlActiveQueries" Filter="new Func<MySQL_Active_Queries, bool>(MySQL_Active_Queries_Table_Filter_Func)">
                    <ToolBarContent>
                        <MudTextField Class="mt-0" @bind-Value="mysql_active_queries_table_search_string" Placeholder="@Localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Id))" style="white-space: nowrap;">Id</MudTh>
                        <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.User))" style="white-space: nowrap;">User</MudTh>
                        <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Host))" style="white-space: nowrap;">Host</MudTh>
                        <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Database))" style="white-space: nowrap;">Database</MudTh>
                        <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Command))" style="white-space: nowrap;">Command</MudTh>
                        <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Time))" style="white-space: nowrap;">Time</MudTh>
                        <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.State))" style="white-space: nowrap;">State</MudTh>
                        <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Info))" style="white-space: nowrap;">Info</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="row">

                        <MudTd DataLabel="Id" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@row.Id
                            </span>
                        </MudTd>

                        <MudTd DataLabel="User" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@row.User
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Host" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@row.Host
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Database" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@row.Database
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Command" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center; color: @(GetCommandColor(row.Command, row.Time))">
                                &nbsp;@row.Command
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Time" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@row.Time
                            </span>
                        </MudTd>

                        <MudTd DataLabel="State" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@row.State
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Info" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                &nbsp;@row.Info
                            </span>
                        </MudTd>

                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["entries per page"]" />
                    </PagerContent>
                </MudTable>

            </MudPaper>

            <MudPaper Class="mt-3">
                <MudText Class="ml-2" Typo="Typo.h6">@Localizer["Web Console"]</MudText>

                <MudGrid>
                    <!-- CPU Usage -->
                    <MudItem xs="12" sm="4">
                        <MudCard Class="pa-2" Elevation="2">
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle1">@Localizer["cpu usage"]: @cpuUsage%</MudText>
                                <MudProgressLinear Value="@cpuUsage" Color="Color.Primary" />
                            </MudCardContent>
                        </MudCard>
                    </MudItem>

                    <!-- RAM Usage -->
                    <MudItem xs="12" sm="4">
                        <MudCard Class="pa-2" Elevation="2">
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle1">@Localizer["ram usage"]: @ramUsage%</MudText>
                                <MudProgressLinear Value="@ramUsage" Color="Color.Warning" />
                            </MudCardContent>
                        </MudCard>
                    </MudItem>

                    <!-- Disk Usage -->
                    <MudItem xs="12" sm="4">
                        <MudCard Class="pa-2" Elevation="2">
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle1">@Localizer["disk usage"]: @diskUsage%</MudText>
                                <MudProgressLinear Value="@diskUsage" Color="Color.Info" />
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            @if (Configuration.Web_Console.isDocker)
            {
                <MudAlert Class="mt-3" Severity="Severity.Warning">@Localizer["is_docker_info"]</MudAlert>
            }

            @foreach (var server in servers)
            {
                DateTime lastHeartbeat;
                bool isRecent = false;

                try
                {
                    // Try to parse the heartbeat timestamp
                    lastHeartbeat = DateTime.Parse(server.hearthbeat);
                    isRecent = (DateTime.Now - lastHeartbeat).TotalMinutes <= 10;
                }
                catch (Exception ex)
                {
                    // Error handling for invalid or missing date
                    Logging.Handler.Error("Heartbeat-Parsing", "Error parsing server heartbeat", ex.ToString());
                }

                <MudPaper Class="mt-3">
                    <MudText Class="ml-2" Typo="Typo.h6">@server.name (@server.os) @(server.docker == "1" ? " (Docker)" : String.Empty)</MudText>
                    <MudText Class="ml-2" Typo="Typo.subtitle2">IP: @server.ip_address | Domain: @server.domain</MudText>

                    <MudText Class="ml-2" Typo="Typo.subtitle2" Color="@(isRecent ? Color.Success : Color.Error)">@Localizer["last hearthbeat"]: @server.hearthbeat</MudText>

                    <MudGrid>
                        <!-- CPU Usage -->
                        <MudItem xs="12" sm="4">
                            <MudCard Class="pa-2" Elevation="2">
                                <MudCardContent>
                                    <MudText Typo="Typo.subtitle1">@Localizer["cpu usage"]: @server.cpu_usage%</MudText>
                                    <MudProgressLinear Value="@Convert.ToDouble(server.cpu_usage)" Color="Color.Primary" />
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <!-- RAM Usage -->
                        <MudItem xs="12" sm="4">
                            <MudCard Class="pa-2" Elevation="2">
                                <MudCardContent>
                                    <MudText Typo="Typo.subtitle1">@Localizer["ram usage"]: @server.ram_usage%</MudText>
                                    <MudProgressLinear Value="@Convert.ToDouble(server.ram_usage)" Color="Color.Warning" />
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <!-- Disk Usage -->
                        <MudItem xs="12" sm="4">
                            <MudCard Class="pa-2" Elevation="2">
                                <MudCardContent>
                                    <MudText Typo="Typo.subtitle1">@Localizer["disk usage"]: @server.disk_usage%</MudText>
                                    <MudProgressLinear Value="@Convert.ToDouble(server.disk_usage)" Color="Color.Info" />
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>

                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.SettingsApplications" class="mr-3"></MudIcon>
                                <MudText>@Localizer["appsettings.json"]</MudText>
                            </div>
                        </TitleContent>

                        <ChildContent>
                            <MudTextField Class="ml-2 mr-2" T="string" Lines="20" Variant="Variant.Text" ReadOnly="true" @bind-Text="server.appsettings" />
                        </ChildContent>

                    </MudExpansionPanel>
                </MudPaper>
            }

            <!-- NetLock RMM File Server Status -->

            <MudPaper Class="mt-3">
                <MudText Class="ml-2" Typo="Typo.h6">@Localizer["NetLock RMM File Server"] (@Configuration.File_Server.Connection_String)</MudText>

                <MudGrid>
                    <MudItem xs="12" sm="4">
                        <MudCard Class="pa-2" Elevation="2">
                            <MudCardContent>

                                <div style="display: flex; align-items: center;">
                                    @if (fileServerConnectionStatus)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                        <MudText Class="ml-2" Color="Color.Success">@Localizer["connected"]</MudText>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                                        <MudText Class="ml-2" Color="Color.Error">@Localizer["not connected"]</MudText>
                                    }
                                </div>

                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>

            </MudPaper>

            <MudPaper Class="mt-3">
                <MudText Class="ml-2" Typo="Typo.h6">@Localizer["NetLock RMM Remote Server"] (@Configuration.Remote_Server.Connection_String)</MudText>

                <MudGrid>
                    <!-- Remote Server Connection Status -->
                    <MudItem xs="12" sm="4">
                        <MudCard Class="pa-2" Elevation="2">
                            <MudCardContent>

                                <div style="display: flex; align-items: center;">

                                    @if (remoteServerConnectionStatus)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                        <MudText Class="ml-2" Color="Color.Success">@Localizer["connected"]</MudText>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                                        <MudText Class="ml-2" Color="Color.Error">@Localizer["not connected"]</MudText>
                                    }

                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>

            </MudPaper>

            <MudPaper Class="mt-3">
                <MudText Class="ml-2" Typo="Typo.h6">@Localizer["Agent Updates"]</MudText>
                <MudSwitch Class="ml-2" @bind-Value="agent_updates_enabled" @bind-Value:after="Set_Agent_Updates" Color="Color.Primary" />
            </MudPaper>


            <MudPaper Class="mt-3">

                <MudText Class="ml-2" Typo="Typo.h6">@Localizer["Members Portal Api"]</MudText>

                @if (!Configuration.Members_Portal.api_enabled)
                {
                    <MudAlert Class="mb-2" Severity="Severity.Warning" Icon="@Icons.Material.Filled.SyncDisabled">@Localizer["members portal api is not enabled. Please enable it in the appsettings.json"]</MudAlert>
                }
                else
                {
                    <MudTextField Class="ml-2 mr-2" T="string" Variant="Variant.Filled" Label="@Localizer["enter your api key here"]" @bind-Text="members_portal_api_key" Immediate="true" />
                    <MudButton Class="mt-2 ml-2 mb-3" Size="Size.Small" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save" OnClick="Save_Api_Key" Disabled="@(String.IsNullOrEmpty(members_portal_api_key))">@Localizer["save"]</MudButton>

                    <MudText Class="ml-2 mt-2" Typo="Typo.h6">@Localizer["license status"]</MudText>

                    @if (members_portal_status == "Active")
                    {
                        <div style="display: flex; align-items: center;">
                            <MudIcon Class="ml-2" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                            <MudText Class="ml-2" Color="Color.Success">@Localizer["active"]</MudText>
                        </div>
                    }
                    else
                    {
                        <div style="display: flex; align-items: center;">
                            <MudIcon Class="ml-2" Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                            <MudText Class="ml-2" Color="Color.Error">@Localizer["expired"]</MudText>
                        </div>
                    }

                    <MudText Class="ml-2 mt-2" Typo="Typo.body1">Name: @members_portal_license_name</MudText>
                    <MudText Class="ml-2" Typo="Typo.body1">@Localizer["licenses used"]: @members_portal_licenses_used / @members_portal_licenses_max</MudText>
                    <MudText Class="ml-2" Typo="Typo.body1">@Localizer["hard_limit"]: @members_portal_licenses_hard_limit</MudText>

                    <MudButton Class="ml-2 mt-3 mb-3" Size="Size.Small" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Update" OnClick="Update_Members_Portal_License_Information" Disabled="@(String.IsNullOrEmpty(members_portal_api_key))">@Localizer["refresh license information"]</MudButton>
                }

            </MudPaper>

        }

    </Authorized>

</AuthorizeView>

@code {

    #region Permissions System

    private string permissions_json = String.Empty;
    private string permissions_tenants_json = String.Empty;
    public static List<string> permissions_tenants_list = new List<string> { };

    private bool permissions_settings_enabled = false;
    private bool permissions_settings_system_enabled = false;

    public class Permissions_Tenants_Activation_State
    {
        public string id { get; set; } = String.Empty;
    }

    private async Task Get_Permissions()
    {
        //Extract user info from users session storage
        var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
        var username = await sessionStorage.GetAsync<string>("username");
        var password = await sessionStorage.GetAsync<string>("password");

        Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "username", username.Value ?? String.Empty);

        //if user info empty, force logout
        if (String.IsNullOrEmpty(username.Value) || String.IsNullOrEmpty(password.Value))
        {
            Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "sessions storage data", "empty, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Check if user info is valid, if not, force logout
        if (!await Classes.Authentication.User.Verify_User(username.Value ?? String.Empty, password.Value ?? String.Empty))
        {
            Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "verify user", "incorrect data, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Get permissions
        string query = "SELECT * FROM `accounts` WHERE username = @username;";

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@username", username.Value);

            Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        permissions_json = reader["permissions"].ToString() ?? String.Empty;
                        permissions_tenants_json = reader["tenants"].ToString() ?? String.Empty;
                    }
                }
            }

            Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "permissions_json", permissions_json);

            //Extract permissions
            if (!String.IsNullOrEmpty(permissions_json))
            {
                using (JsonDocument document = JsonDocument.Parse(permissions_json))
                {
                    //settings_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_enabled");
                        permissions_settings_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (permissions_settings_enabled)", ex.ToString());
                    }

                    //settings_system_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_system_enabled");
                        permissions_settings_system_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_system_enabled)", ex.ToString());
                    }
                }
            }
            else if (permissions_json == "[]")
            {
                Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }
            else
            {
                Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }

            //Extract tenants from json
            permissions_tenants_list.Clear();
            if (!String.IsNullOrEmpty(permissions_tenants_json))
            {
                //Set the activation state for the tenants
                try
                {
                    List<Permissions_Tenants_Activation_State> tenants_activation_state_list = JsonSerializer.Deserialize<List<Permissions_Tenants_Activation_State>>(permissions_tenants_json);

                    foreach (var tenant in tenants_activation_state_list)
                    {
                        Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "foreach tenant", tenant.id);

                        permissions_tenants_list.Add(tenant.id);
                    }
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/manage_notifications -> Permissions_Load (permissions_tenants_json deserialize)", "Result", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Debug("/manage_notifications -> Permissions_Load (permissions_tenants_json deserialize)", "Result", "Empty");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_notifications -> Permissions_Load", "general_error (force logout)", ex.Message);
            NavigationManager.NavigateTo("/logout", true);
        }
        finally
        {
            conn.Close();
        }
    }

    #endregion

    private bool loading_overlay = false;

    private bool _isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        if (!Configuration.Members_Portal.cloud_enabled)
            loading_overlay = true;

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        await Get_Permissions();

        //Check permissions
        if (!permissions_settings_enabled || !permissions_settings_system_enabled)
        {
            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        _isDarkMode = await JSRuntime.InvokeAsync<bool>("isDarkMode");

        if (Configuration.Members_Portal.cloud_enabled)
            return;

        await MySQL_Status();
        await Get_Servers();
        await 1409abd0-21b2-4b9d-a48a-8de41abf2b3e //OSSCH

    // Save api key for members portal
    private async Task 75d95b9d-175b-4698-80b0-619f80a5e87d //OSSCH

    // Update members portal license information
    private async Task c76b07a1-04d6-445a-876a-b43c5530da5b //OSSCH

    // Get members portal license status
    private async Task a99f4667-aa31-46f6-84bf-3129cd422d38 //OSSCH

    // Get agent updates settings
    private async Task Get_Agent_Updates()
    {
        string updates_enabled = await Classes.MySQL.Handler.Quick_Reader("SELECT * FROM settings", "agent_updates_enabled");

        if (updates_enabled == "1")
            agent_updates_enabled = true;
        else
            agent_updates_enabled = false;
    }

    // Set agent updates settings
    private async Task Set_Agent_Updates()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        if (agent_updates_enabled)
        {
            Logging.Handler.Debug("/system -> Set_Agent_Updates", "agent_updates_enabled", "true");
            await Classes.MySQL.Handler.Execute_Command("UPDATE settings SET agent_updates_enabled = 1;");

            Snackbar.Add(Localizer["agent updates enabled"], Severity.Success);
        }
        else
        {
            Logging.Handler.Debug("/system -> Set_Agent_Updates", "agent_updates_enabled", "false");
            await Classes.MySQL.Handler.Execute_Command("UPDATE settings SET agent_updates_enabled = 0;");

            Snackbar.Add(Localizer["agent updates disabled"], Severity.Warning);
        }
    }
}
