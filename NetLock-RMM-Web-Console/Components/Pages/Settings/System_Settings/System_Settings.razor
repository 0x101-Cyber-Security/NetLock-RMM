@page "/system"

@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using System.Xml.Serialization;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.DataProtection;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Net;
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Settings.System_Settings.System_Settings> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .selected-row-light {
    background-color: lightgray;
    }

    .selected-row-dark {
    background-color: #141414;
    }

    .custom-expansion-panel {
    background-color: transparent;
    }

    .dialog-blurring {
    backdrop-filter: blur(10px);
    }

    .mud-table-cell-custom-group {
    font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
    padding-bottom: 50px;
    text-align: right;
    }

    @@media only screen and (max-width: 768px) {
    .desktop-icon {
    display: none;
    }
    }

    @@keyframes fadeIn {
    from {opacity: 0;}
    to {opacity: 1;}
    }

    .animated-text {
    animation: pulse 2s infinite ease-in-out;
    }

    @@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.6; }
    }

    .wave-emoji {
    display: inline-block;
    animation: wave 2s infinite;
    transform-origin: 70% 70%;
    }

    @@keyframes wave {
    0% { transform: rotate(0deg); }
    15% { transform: rotate(15deg); }
    30% { transform: rotate(-10deg); }
    45% { transform: rotate(15deg); }
    60% { transform: rotate(-10deg); }
    75% { transform: rotate(15deg); }
    100% { transform: rotate(0deg); }
    }

</style>

<MudOverlay Visible="@loading_overlay" DarkBackground="false" Absolute="false">
    <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; gap: 1rem; animation: fadeIn 0.5s ease-in-out;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Thickness="6" />
        <MudText Typo="Typo.h5" Class="animated-text">
            Please wait... <span class="wave-emoji">üêß</span>
        </MudText>
    </div>
</MudOverlay>

<AuthorizeView>

    <Authorized>

        @if (Configuration.Members_Portal.cloud_enabled)
        {
            <MudAlert Class="mb-3" Severity="Severity.Warning">This section is administered by the cloud team. The view is limited. :-)</MudAlert>
        }

        @if (permissions_settings_enabled && permissions_settings_system_enabled)
        {
            <MudTabs KeepPanelsAlive=true Class="mt-0" Elevation="4" Rounded="false" Color="@Color.Default">

                @if (!Configuration.Members_Portal.cloud_enabled)
                {
                <MudTabPanel Text="Overview">

                        <MudPaper Elevation="4" Class="mt-0">

                            <MudText Class="ml-2" Typo="Typo.h6">@Localizer["MySQL"]</MudText>

                            <MudGrid>
                                <!-- MySQL Connection Status -->
                                <MudItem xs="12" sm="4">
                                    <MudCard Class="pa-2" Elevation="2">
                                        <MudCardContent>
                                            @if (mysqlConnectionStatus)
                                            {
                                                <div style="display: flex; align-items: center;">
                                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                                    <MudText Class="ml-2" Color="Color.Success">@Localizer["connected"]</MudText>
                                                </div>

                                                <!-- Additional MySQL Info -->
                                                <MudText Typo="Typo.body2">Version: @mysqlVersion</MudText>
                                                <MudText Typo="Typo.body2">@Localizer["uptime"]: @mysqlUptime (seconds)</MudText>
                                                <MudText Typo="Typo.body2">@Localizer["active connections"]: @mysqlConnectedUsers</MudText>
                                                <MudText Typo="Typo.body2">@Localizer["database size"]: @mysqlDatabaseSize</MudText>

                                                <!-- Security Info -->
                                                <MudText Typo="Typo.body2">@Localizer["max connections"]: @mysqlMaxConnections</MudText>
                                                <MudText Typo="Typo.body2">@Localizer["failed logins"]: @mysqlFailedLogins</MudText>
                                            }
                                            else
                                            {
                                                <div style="display: flex; align-items: center;">
                                                    <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                                                    <MudText Class="ml-2" Color="Color.Error">@Localizer["not connected"]</MudText>
                                                </div>
                                            }
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            </MudGrid>

                            <MudText Class="mt-3 ml-2" Typo="Typo.h6">@Localizer["active queries"]</MudText>

                            <MudTable Height="25vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@mysqlActiveQueries" Filter="new Func<MySQL_Active_Queries, bool>(MySQL_Active_Queries_Table_Filter_Func)">
                                <ToolBarContent>
                                    <MudTextField Class="mt-0" @bind-Value="mysql_active_queries_table_search_string" Placeholder="@Localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Id))" style="white-space: nowrap;">Id</MudTh>
                                    <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.User))" style="white-space: nowrap;">User</MudTh>
                                    <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Host))" style="white-space: nowrap;">Host</MudTh>
                                    <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Database))" style="white-space: nowrap;">Database</MudTh>
                                    <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Command))" style="white-space: nowrap;">Command</MudTh>
                                    <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Time))" style="white-space: nowrap;">Time</MudTh>
                                    <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.State))" style="white-space: nowrap;">State</MudTh>
                                    <MudTh @onclick="() => mysql_active_queries_table_sorted_column = (nameof(MySQL_Active_Queries.Info))" style="white-space: nowrap;">Info</MudTh>
                                </HeaderContent>

                                <RowTemplate Context="row">

                                    <MudTd DataLabel="Id" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            &nbsp;@row.Id
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="User" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            &nbsp;@row.User
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Host" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            &nbsp;@row.Host
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Database" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            &nbsp;@row.Database
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Command" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center; color: @(GetCommandColor(row.Command, row.Time))">
                                            &nbsp;@row.Command
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Time" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            &nbsp;@row.Time
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="State" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            &nbsp;@row.State
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Info" @onclick="() => mysql_active_queries_RowClickHandler(row)" class="@mysql_active_queries_GetRowClass(row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            &nbsp;@row.Info
                                        </span>
                                    </MudTd>

                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="@Localizer["entries per page"]" />
                                </PagerContent>
                            </MudTable>

                        </MudPaper>

                        <MudPaper Class="mt-3">
                            <MudText Class="ml-2" Typo="Typo.h6">@Localizer["Web Console"]</MudText>

                            <MudGrid>
                                <!-- CPU Usage -->
                                <MudItem xs="12" sm="4">
                                    <MudCard Class="pa-2" Elevation="2">
                                        <MudCardContent>
                                            <MudText Typo="Typo.subtitle1">@Localizer["cpu usage"]: @cpuUsage%</MudText>
                                            <MudProgressLinear Value="@cpuUsage" Color="Color.Primary" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <!-- RAM Usage -->
                                <MudItem xs="12" sm="4">
                                    <MudCard Class="pa-2" Elevation="2">
                                        <MudCardContent>
                                            <MudText Typo="Typo.subtitle1">@Localizer["ram usage"]: @ramUsage%</MudText>
                                            <MudProgressLinear Value="@ramUsage" Color="Color.Warning" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <!-- Disk Usage -->
                                <MudItem xs="12" sm="4">
                                    <MudCard Class="pa-2" Elevation="2">
                                        <MudCardContent>
                                            <MudText Typo="Typo.subtitle1">@Localizer["disk usage"]: @diskUsage%</MudText>
                                            <MudProgressLinear Value="@diskUsage" Color="Color.Info" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>

                        @foreach (var server in servers)
                        {
                            DateTime lastHeartbeat;
                            bool isRecent = false;

                            try
                            {
                                // Try to parse the heartbeat timestamp
                                lastHeartbeat = DateTime.Parse(server.hearthbeat);
                                isRecent = (DateTime.Now - lastHeartbeat).TotalMinutes <= 10;
                            }
                            catch (Exception ex)
                            {
                                // Error handling for invalid or missing date
                                Logging.Handler.Error("Heartbeat-Parsing", "Error parsing server heartbeat", ex.ToString());
                            }

                            <MudPaper Class="mt-3">
                                <MudText Class="ml-2" Typo="Typo.h6">@server.name (@server.os) @(server.docker == "1" ? " (Docker)" : String.Empty)</MudText>
                                <MudText Class="ml-2" Typo="Typo.subtitle2">IP: @server.ip_address | Domain: @server.domain</MudText>

                                <MudText Class="ml-2" Typo="Typo.subtitle2" Color="@(isRecent ? Color.Success : Color.Error)">@Localizer["last hearthbeat"]: @server.hearthbeat</MudText>

                                <MudGrid>
                                    <!-- CPU Usage -->
                                    <MudItem xs="12" sm="4">
                                        <MudCard Class="pa-2" Elevation="2">
                                            <MudCardContent>
                                                <MudText Typo="Typo.subtitle1">@Localizer["cpu usage"]: @server.cpu_usage%</MudText>
                                                <MudProgressLinear Value="@Convert.ToDouble(server.cpu_usage)" Color="Color.Primary" />
                                            </MudCardContent>
                                        </MudCard>
                                    </MudItem>

                                    <!-- RAM Usage -->
                                    <MudItem xs="12" sm="4">
                                        <MudCard Class="pa-2" Elevation="2">
                                            <MudCardContent>
                                                <MudText Typo="Typo.subtitle1">@Localizer["ram usage"]: @server.ram_usage%</MudText>
                                                <MudProgressLinear Value="@Convert.ToDouble(server.ram_usage)" Color="Color.Warning" />
                                            </MudCardContent>
                                        </MudCard>
                                    </MudItem>

                                    <!-- Disk Usage -->
                                    <MudItem xs="12" sm="4">
                                        <MudCard Class="pa-2" Elevation="2">
                                            <MudCardContent>
                                                <MudText Typo="Typo.subtitle1">@Localizer["disk usage"]: @server.disk_usage%</MudText>
                                                <MudProgressLinear Value="@Convert.ToDouble(server.disk_usage)" Color="Color.Info" />
                                            </MudCardContent>
                                        </MudCard>
                                    </MudItem>
                                </MudGrid>

                                <MudExpansionPanel>
                                    <TitleContent>
                                        <div class="d-flex">
                                            <MudIcon Icon="@Icons.Material.Filled.SettingsApplications" class="mr-3"></MudIcon>
                                            <MudText>@Localizer["appsettings.json"]</MudText>
                                        </div>
                                    </TitleContent>

                                    <ChildContent>
                                        <MudTextField Class="ml-2 mr-2" T="string" Lines="20" Variant="Variant.Text" ReadOnly="true" @bind-Text="server.appsettings" />
                                    </ChildContent>

                                </MudExpansionPanel>
                            </MudPaper>
                        }

                    <!-- NetLock RMM File Server Status -->

                    <MudPaper Class="mt-3">
                        <MudText Class="ml-2" Typo="Typo.h6">@Localizer["NetLock RMM File Server"] (@Configuration.File_Server.Connection_String)</MudText>

                        <MudGrid>
                            <MudItem xs="12" sm="4">
                                <MudCard Class="pa-2" Elevation="2">
                                    <MudCardContent>

                                        <div style="display: flex; align-items: center;">
                                            @if (fileServerConnectionStatus)
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                                <MudText Class="ml-2" Color="Color.Success">@Localizer["connected"]</MudText>
                                            }
                                            else
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                                                <MudText Class="ml-2" Color="Color.Error">@Localizer["not connected"]</MudText>
                                            }
                                        </div>

                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        </MudGrid>

                    </MudPaper>

                    <MudPaper Class="mt-3">
                        <MudText Class="ml-2" Typo="Typo.h6">@Localizer["NetLock RMM Remote Server"] (@Configuration.Remote_Server.Connection_String)</MudText>

                        <MudGrid>
                            <!-- Remote Server Connection Status -->
                            <MudItem xs="12" sm="4">
                                <MudCard Class="pa-2" Elevation="2">
                                    <MudCardContent>

                                        <div style="display: flex; align-items: center;">

                                            @if (remoteServerConnectionStatus)
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                                <MudText Class="ml-2" Color="Color.Success">@Localizer["connected"]</MudText>
                                            }
                                            else
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                                                <MudText Class="ml-2" Color="Color.Error">@Localizer["not connected"]</MudText>
                                            }

                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        </MudGrid>

                        @if (!_dnsWarning && !Configuration.Members_Portal.cloud_enabled && !remoteServerConnectionStatus && !fileServerConnectionStatus)
                        {
                            <MudAlert Class="mt-2 ml-2" Severity="Severity.Warning" Icon="@Icons.Material.Filled.Dns">PTR record mismatch detected! Your provided hostname resolves to: @_dnsWarningText but it should resolve to: @Configuration.Remote_Server.Hostname instead, according to your provided configuration. More details: https://docs.netlockrmm.com/en/troubleshooting/ptr-mismatch</MudAlert>
                        }

                        <MudButton Class="mt-2 ml-2 mb-3" Size="Size.Small" Variant="Variant.Filled" Color="Color.Default" StartIcon="@Icons.Material.Filled.NetworkCheck" OnClick="Test_Remote_File_Server_Connection">@Localizer["Check again"]</MudButton>

                    </MudPaper>

                </MudTabPanel>

                }
                    @if (!Configuration.Members_Portal.cloud_enabled)
                    {
                    <MudTabPanel Text="Members Portal Api">

                        <MudPaper Class="mt-0">

                            <MudText Class="ml-2" Typo="Typo.h6">@Localizer["Members Portal Api"]</MudText>

                            @if (!Configuration.Members_Portal.api_enabled)
                            {
                                <MudAlert Class="mb-2" Severity="Severity.Warning" Icon="@Icons.Material.Filled.SyncDisabled">@Localizer["members portal api is not enabled. Please enable it in the appsettings.json"]</MudAlert>
                            }
                            else
                            {
                                <MudTextField Class="ml-2 mr-2" T="string" Variant="Variant.Filled" Label="@Localizer["enter your api key here"]" @bind-Text="members_portal_api_key" Immediate="true" />
                                <MudButton Class="mt-2 ml-2 mb-3" Size="Size.Small" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save" OnClick="Save_Api_Key" Disabled="@(String.IsNullOrEmpty(members_portal_api_key))">@Localizer["save"]</MudButton>

                                <MudText Class="ml-2 mt-2" Typo="Typo.h6">@Localizer["license status"]</MudText>

                                @if (members_portal_status == "Active")
                                {
                                    <div style="display: flex; align-items: center;">
                                        <MudIcon Class="ml-2" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                        <MudText Class="ml-2" Color="Color.Success">@Localizer["active"]</MudText>
                                    </div>
                                }
                                else
                                {
                                    <div style="display: flex; align-items: center;">
                                        <MudIcon Class="ml-2" Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                                        <MudText Class="ml-2" Color="Color.Error">@Localizer["expired"]</MudText>
                                    </div>
                                }

                                <MudText Class="ml-2 mt-2" Typo="Typo.body1">Name: @members_portal_license_name</MudText>
                                <MudText Class="ml-2" Typo="Typo.body1">@Localizer["licenses used"]: @members_portal_licenses_used / @members_portal_licenses_max</MudText>
                                <MudText Class="ml-2" Typo="Typo.body1">@Localizer["hard_limit"]: @members_portal_licenses_hard_limit</MudText>
                                <MudText Class="ml-2" Typo="Typo.body1">@Localizer["code_signed"]: @members_portal_code_signed</MudText>

                                <MudButton Class="ml-2 mt-3 mb-3" Size="Size.Small" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Update" OnClick="Update_Members_Portal_License_Information" Disabled="@(String.IsNullOrEmpty(members_portal_api_key))">@Localizer["refresh license information"]</MudButton>
                            }

                        </MudPaper>

                    </MudTabPanel>
                    }
                <MudTabPanel Text="Updates">
                    <MudPaper Class="mt-0">
                        <MudText Class="ml-2" Typo="Typo.h6">Automatic agent updates</MudText>
                        <MudSwitch Class="ml-2" @bind-Value="agent_updates_windows_enabled" Color="Color.Primary">Windows</MudSwitch>
                        <MudSwitch Class="ml-2" @bind-Value="agent_updates_linux_enabled" Color="Color.Primary">Linux</MudSwitch>
                        <MudSwitch Class="ml-2" @bind-Value="agent_updates_macos_enabled" Color="Color.Primary">MacOS</MudSwitch>

                        @if (!Configuration.Members_Portal.cloud_enabled)
                        {
                            <div style="display: flex; align-items: center; width: 250px">
                                <MudNumericField Class="ml-2" @bind-Value="agent_updates_max_concurrent_updates" Label="Max concurrent updates" Variant="Variant.Text" Min="1" Max="100" />

                                <MudTooltip Text="Controls how many devices update their agent concurrently. Choose a value appropriate for your available CPU, memory, and bandwidth to prevent ressource shortage & failed update processes.">
                                    <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                                </MudTooltip>
                            </div>
                        }

                        <MudButton Class="ml-2 mt-3 mb-2" Size="Size.Small" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save" OnClick="@SaveAgentUpdates">Save</MudButton>
                    </MudPaper>
                </MudTabPanel>
                @if (!Configuration.Members_Portal.cloud_enabled)
                {
                    <MudTabPanel Text="Database">
                        <MudPaper Class="mt-0">
                            <MudText Class="ml-2" Typo="Typo.h6">Clean Up & Optimize Database</MudText>
                            <MudText Class="mt-2 ml-2" Typo="Typo.body1">
                                Automatic cleanup of the database.
                            </MudText>

                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_applications_drivers_history_enabled" Label="Applications Drivers History" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_applications_drivers_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_applications_installed_history_enabled" Label="Applications Installed History" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_applications_installed_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_applications_logon_history_enabled" Label="Applications Logon History" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_applications_logon_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_applications_scheduled_tasks_history_enabled" Label="Applications Scheduled Tasks History" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_applications_scheduled_tasks_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_applications_services_history_enabled" Label="Applications Services History" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_applications_services_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_device_information_antivirus_products_history_enabled" Label="Device Information Antivirus Products History" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_device_information_antivirus_products_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_device_information_cpu_history_enabled" Label="Device information CPU history" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_device_information_cpu_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_device_information_cronjobs_history_enabled" Label="Device information cronjobs history" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_device_information_cronjobs_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_device_information_disks_history_enabled" Label="Device information disks history" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_device_information_disks_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_device_information_general_history_enabled" Label="Device information general history" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_device_information_general_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_device_information_history_enabled" Label="Device information history" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_device_information_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_device_information_network_adapters_history_enabled" Label="Device information network adapters history" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_device_information_network_adapters_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_device_information_ram_history_enabled" Label="Device information RAM history" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_device_information_ram_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_device_information_task_manager_history_enabled" Label="Device information task manager history" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_device_information_task_manager_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <MudItem xs="12" md="6">
                                    <MudCard Class="ml-2 mb-4">
                                        <MudCardContent>
                                            <MudCheckBox T="bool" @bind-Value="cleanup_events_history_enabled" Label="Events history" Color="Color.Primary" />
                                            <MudNumericField Class="mt-2" @bind-Value="cleanup_events_history_days" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                            </MudGrid>

                            <MudButton Class="ml-2 mt-2 mb-3" Size="Size.Small" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save" OnClick="@Save_Cleanup_Settings">Save</MudButton>
                            <MudButton Class="ml-2 mt-2 mb-3" Size="Size.Small" Variant="Variant.Filled" Color="Color.Default" StartIcon="@Icons.Material.Filled.Refresh" OnClick="@Optimize_Database">Optimize Database</MudButton>
                        </MudPaper>
                    </MudTabPanel>
                }
                <MudTabPanel Text="Remote Screen Control">
                    <MudPaper Class="mt-0 mb-0">
                        @if (!Configuration.Members_Portal.isCodeSigned)
                        {
                            <MudAlert Class="mb-3" Severity="Severity.Warning" Icon="@Icons.Material.Filled.Warning">@Application_Settings.onlyPro</MudAlert>
                        }

                        <MudText Class="ml-2" Typo="Typo.h6">Remote Screen Control Recording</MudText>
                        <MudSwitch Class="ml-2" Color="Color.Primary" @bind-Value="remoteScreenSessionRecordingForced" Label="Force session recording"></MudSwitch>
                        <MudText Class="ml-2 mt-2" Typo="Typo.body1">When enabled, all remote screen control sessions will be recorded by the server.</MudText>

                        <MudCheckBox T="bool" @bind-Value="remoteScreenSessionRecordingAutoClean" Label="Auto purge" Color="Color.Primary" />

                        @if (Configuration.Members_Portal.cloud_enabled)
                        {
                            <MudText Class="ml-2 mt-2" Typo="Typo.body1">Your recordings will be kept for seven days.</MudText>
                        }
                        else
                        {
                            <MudNumericField Class="ml-2 mt-2" @bind-Value="remoteScreenSessionRecordingForcedDays" Label="Older than X days" Variant="Variant.Text" Min="1" Max="9999" />
                        }

                        <MudButton Class="ml-2 mt-2 mb-3" Size="Size.Small" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save" OnClick="@SaveRemoteScreenSessionRecordingSettings">Save</MudButton>
                    </MudPaper>
                </MudTabPanel>

            </MudTabs>
        }

    </Authorized>

</AuthorizeView>

@code {

    #region Permissions System

    private string permissions_json = String.Empty;

    private bool permissions_settings_enabled = false;
    private bool permissions_settings_system_enabled = false;

    private async Task<bool> Permissions()
    {
        try
        {
            bool logout = false;

            // Get the current user from the authentication state
            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

            // Check if user is authenticated
            if (user?.Identity is not { IsAuthenticated: true })
                logout = true;

            string netlock_username = user.FindFirst(ClaimTypes.Email)?.Value;

            permissions_settings_enabled = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "settings_enabled");
                        permissions_settings_system_enabled = await Classes.Authentication.Permissions.Verify_Permission(netlock_username, "settings_system_enabled");

            if (!permissions_settings_enabled)
                logout = true;

            if (logout) // Redirect to the login page
            {
                NavigationManager.NavigateTo("/logout", true);
                return false;
            }

            // All fine? Nice.
            return true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Permissions", "Error", ex.ToString());
            return false;
        }
    }

    #endregion

    private bool loading_overlay = false;

    private bool _isDarkMode = false;
    private bool _dnsWarning = false;
    private string _dnsWarningText = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AfterInitializedAsync();
        }
    }

    private async Task AfterInitializedAsync()
    {
        if (!await Permissions())
            return;

        loading_overlay = true;
        StateHasChanged();

        _isDarkMode = await JSRuntime.InvokeAsync<bool>("isDarkMode");

        await MySQL_Status();
        await Fix_Settings(); // this is a hotfix code to verify if a bug is present in the database
        await Get_Servers();
        await Get_Agent_Updates();

        if (Configuration.Members_Portal.api_enabled)
            await Get_Members_Portal_License_Status();

        // Get CPU Usage
        cpuUsage = await Classes.System_Information.Handler.Get_CPU_Usage();

        // Get RAM Usage
        ramUsage = await Classes.System_Information.Handler.Get_RAM_Usage();

        // Get Disk Usage
        diskUsage = await Classes.System_Information.Handler.Get_Disk_Usage();

        fileServerConnectionStatus = await Classes.Helper.Networking.Test_Connection(Configuration.File_Server.Connection_String + "/test");

        remoteServerConnectionStatus = await Classes.Helper.Networking.Test_Connection(Configuration.Remote_Server.Connection_String + "/test");

        await Check_DNS();

        await Get_Cleanup_Settings();

        loading_overlay = false;

        StateHasChanged();
    }

    private bool mysqlConnectionStatus = false;
    private bool fileServerConnectionStatus = false;
    private bool remoteServerConnectionStatus = false;

    private int cpuUsage = 0;
    private int ramUsage = 0;
    private int diskUsage = 0;

    private string mysqlVersion = String.Empty;
    private string mysqlUptime = String.Empty;
    private string mysqlConnectedUsers = String.Empty;
    private string mysqlDatabaseSize = String.Empty;
    private List<MySQL_Active_Queries> mysqlActiveQueries = new List<MySQL_Active_Queries>();
    private bool mysqlSSLEnabled = false;
    private string mysqlFailedLogins = String.Empty;
    private string mysqlPrivilegedUsers = String.Empty;
    private string mysqlMaxConnections = String.Empty;

    // Agent Update Settings
    private bool agent_updates_windows_enabled = false;
    private bool agent_updates_linux_enabled = false;
    private bool agent_updates_macos_enabled = false;
    private int agent_updates_max_concurrent_updates = 0;

    // Members Portal
    private string members_portal_api_key = String.Empty;
    private string members_portal_status = String.Empty;
    private string members_portal_license_name = String.Empty;
    private int members_portal_licenses_used = 0;
    private int members_portal_licenses_max = 0;
    private bool members_portal_licenses_hard_limit = false;
    private bool members_portal_code_signed = false;

    private string package_url = String.Empty;

    // Remote Screen Control
    private bool remoteScreenSessionRecordingForced = false;
    private bool remoteScreenSessionRecordingAutoClean = false;
    private int remoteScreenSessionRecordingForcedDays = 0;

    public class MySQL_Active_Queries
    {
        public int Id { get; set; }
        public string User { get; set; }
        public string Host { get; set; }
        public string Database { get; set; }
        public string Command { get; set; }
        public int Time { get; set; }
        public string State { get; set; }
        public string Info { get; set; }
    }

    private bool MySQL_Active_Queries_Table_Filter_Func(MySQL_Active_Queries row)
    {
        try
        {
            if (row == null) return false; // √úberpr√ºfe, ob row null ist

            if (string.IsNullOrEmpty(mysql_active_queries_table_search_string))
                return true;

            return row.Id.ToString().Contains(mysql_active_queries_table_search_string, StringComparison.OrdinalIgnoreCase) ||
                   (row.User?.Contains(mysql_active_queries_table_search_string, StringComparison.OrdinalIgnoreCase) ?? false) ||
                   (row.Host?.Contains(mysql_active_queries_table_search_string, StringComparison.OrdinalIgnoreCase) ?? false) ||
                   (row.Database?.Contains(mysql_active_queries_table_search_string, StringComparison.OrdinalIgnoreCase) ?? false) ||
                   (row.Command?.Contains(mysql_active_queries_table_search_string, StringComparison.OrdinalIgnoreCase) ?? false) ||
                   row.Time.ToString().Contains(mysql_active_queries_table_search_string, StringComparison.OrdinalIgnoreCase) ||
                   (row.State?.Contains(mysql_active_queries_table_search_string, StringComparison.OrdinalIgnoreCase) ?? false) ||
                   (row.Info?.Contains(mysql_active_queries_table_search_string, StringComparison.OrdinalIgnoreCase) ?? false);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/system -> MySQL_Active_Queries_Table_Filter_Func", "general_error", ex.ToString());
            return false;
        }
    }

    private string mysql_active_queries_table_sorted_column;
    private string mysql_active_queries_table_search_string = String.Empty;
    private string mysql_active_queries_selectedRowContent = ""; // Saving content of selected row

    // Executes on row click
    private void mysql_active_queries_RowClickHandler(MySQL_Active_Queries row)
    {
        mysql_active_queries_selectedRowContent = row.Id.ToString();
    }

    private string mysql_active_queries_GetRowClass(MySQL_Active_Queries row)
    {
        return row.Id.ToString() == mysql_active_queries_selectedRowContent ? "selected-row" : "";
    }

    // MySQL

    private string GetCommandColor(string command, int time)
    {
        switch (command)
        {
            case "Daemon":
                return "blue";
            case "Sleep":
                return "orange";
            case "Query":
                return time > 60 ? "red" : "green"; // Red for long queries, green for short
            default:
                return "inherit"; // Standard colour
        }
    }

    private async Task MySQL_Status()
    {
        try
        {
            if (await Classes.MySQL.Database.Check_Connection())
            {
                mysqlConnectionStatus = true;

                // Get MySQL Version
                mysqlVersion = await Classes.MySQL.Database.Get_Version();

                // Get MySQL Uptime
                mysqlUptime = await Classes.MySQL.Database.Get_Uptime();

                // Get MySQL Connected Users
                mysqlConnectedUsers = await Classes.MySQL.Database.Get_Connected_Users();

                // Get MySQL Active Queries
                string mysqlActiveQueriesJson = await Classes.MySQL.Database.Get_Active_Queries();
                Logging.Handler.Debug("/system -> MySQL_Status", "mysqlActiveQueriesJson", mysqlActiveQueriesJson);
                mysqlActiveQueries = JsonSerializer.Deserialize<List<MySQL_Active_Queries>>(mysqlActiveQueriesJson);

                // Get MySQL Failed Logins
                mysqlFailedLogins = await Classes.MySQL.Database.Get_Failed_Logins();

                // Get MySQL Max Connections
                mysqlMaxConnections = await Classes.MySQL.Database.Get_Max_Connections();

                // Get MySQL Database Size
                mysqlDatabaseSize = await Classes.MySQL.Database.Get_Database_Size();
            }
            else
            {
                mysqlConnectionStatus = false;
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/system -> MySQL_Status", "general_error", ex.ToString());
        }

    }

    // Servers overview
    private List<Servers> servers = new List<Servers>();

    public class Servers
    {
        public string id { get; set; }
        public string name { get; set; }
        public string ip_address { get; set; }
        public string domain { get; set; }
        public string os { get; set; }
        public string hearthbeat { get; set; }
        public string appsettings { get; set; }
        public string cpu_usage { get; set; }
        public string ram_usage { get; set; }
        public string disk_usage { get; set; }
        public string docker { get; set; }
    }

    // Get servers from database
    private async Task Get_Servers()
    {
        servers.Clear();

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM servers;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        servers.Add(new Servers
                            {
                                id = reader["id"].ToString() ?? String.Empty,
                                name = reader["name"].ToString() ?? String.Empty,
                                ip_address = reader["ip_address"].ToString() ?? String.Empty,
                                domain = reader["domain"].ToString() ?? String.Empty,
                                os = reader["os"].ToString() ?? String.Empty,
                                hearthbeat = reader["hearthbeat"].ToString() ?? String.Empty,
                                appsettings = reader["appsettings"].ToString() ?? String.Empty,
                                cpu_usage = reader["cpu_usage"].ToString() ?? String.Empty,
                                ram_usage = reader["ram_usage"].ToString() ?? String.Empty,
                                disk_usage = reader["disk_usage"].ToString() ?? String.Empty,
                                docker = reader["docker"].ToString() ?? String.Empty
                            });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/system -> Get_Servers", "general_error", ex.ToString());
        }
        finally
        {
            conn.Close();
        }
    }

    // Save api key for members portal
    //OSSCH_START 752bf6d6-4926-41c8-b5df-da2267d0f614 //OSSCH_END

    // Update members portal license information
    //OSSCH_START 59229cc1-8e4c-4c8f-a880-f91458f4e83c //OSSCH_END

    // Get members portal license status
    //OSSCH_START f1a683e3-f55c-4e4a-a675-9e6fe8230ea1 //OSSCH_END

    // Get agent updates settings
    private async Task Get_Agent_Updates()
    {
        string windows_updates_enabled = await Classes.MySQL.Handler.Quick_Reader("SELECT * FROM settings", "agent_updates_windows_enabled");
        string linux_updates_enabled = await Classes.MySQL.Handler.Quick_Reader("SELECT * FROM settings", "agent_updates_linux_enabled");
        string macos_updates_enabled = await Classes.MySQL.Handler.Quick_Reader("SELECT * FROM settings", "agent_updates_macos_enabled");

        if (windows_updates_enabled == "1")
            agent_updates_windows_enabled = true;
        else
            agent_updates_windows_enabled = false;

        if (linux_updates_enabled == "1")
            agent_updates_linux_enabled = true;
        else
            agent_updates_linux_enabled = false;

        if (macos_updates_enabled == "1")
            agent_updates_macos_enabled = true;
        else
            agent_updates_macos_enabled = false;

        agent_updates_max_concurrent_updates = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT * FROM settings", "agent_updates_max_concurrent_updates"));
    }

    // Set agent updates settings
    private async Task SaveAgentUpdates()
    {
        Snackbar.Configuration.ShowCloseIcon = true;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        if (agent_updates_windows_enabled)
        {
            Logging.Handler.Debug("/system -> Set_Agent_Updates", "agent_updates_windows_enabled", "true");
            await Classes.MySQL.Handler.Execute_Command("UPDATE settings SET agent_updates_windows_enabled = 1;");
        }
        else
        {
            Logging.Handler.Debug("/system -> Set_Agent_Updates", "agent_updates_windows_enabled", "false");
            await Classes.MySQL.Handler.Execute_Command("UPDATE settings SET agent_updates_windows_enabled = 0;");
        }

        if (agent_updates_linux_enabled)
        {
            Logging.Handler.Debug("/system -> Set_Agent_Updates", "agent_updates_linux_enabled", "true");
            await Classes.MySQL.Handler.Execute_Command("UPDATE settings SET agent_updates_linux_enabled = 1;");
        }
        else
        {
            Logging.Handler.Debug("/system -> Set_Agent_Updates", "agent_updates_linux_enabled", "false");
            await Classes.MySQL.Handler.Execute_Command("UPDATE settings SET agent_updates_linux_enabled = 0;");
        }

        if (agent_updates_macos_enabled)
        {
            Logging.Handler.Debug("/system -> Set_Agent_Updates", "agent_updates_macos_enabled", "true");
            await Classes.MySQL.Handler.Execute_Command("UPDATE settings SET agent_updates_macos_enabled = 1;");
        }
        else
        {
            Logging.Handler.Debug("/system -> Set_Agent_Updates", "agent_updates_macos_enabled", "false");
            await Classes.MySQL.Handler.Execute_Command("UPDATE settings SET agent_updates_macos_enabled = 0;");
        }

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        string query = "UPDATE settings SET agent_updates_max_concurrent_updates = @agent_updates_max_concurrent_updates;";

        try
        {
            await conn.OpenAsync();

            MySqlCommand cmd = new MySqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@agent_updates_max_concurrent_updates", agent_updates_max_concurrent_updates.ToString());

            Logging.Handler.Debug("SaveAgentUpdates", "MySQL_Prepared_Query", query);

            await cmd.ExecuteNonQueryAsync();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("SaveAgentUpdates", "MySQL_Query", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }

        Snackbar.Add("Saved.", Severity.Success);
    }

    // Check the dns ptr record
    private async Task Check_DNS()
    {
        (_dnsWarning, _dnsWarningText) = await Classes.Setup.DNS.Check_Dns_Forward_Reverse(Configuration.Remote_Server.Hostname);
    }

    // Check connection
    private async Task Test_Remote_File_Server_Connection()
    {
        Snackbar.Configuration.ShowCloseIcon = true;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        loading_overlay = true;
        fileServerConnectionStatus = await Classes.Helper.Networking.Test_Connection(Configuration.File_Server.Connection_String + "/test");

        remoteServerConnectionStatus = await Classes.Helper.Networking.Test_Connection(Configuration.Remote_Server.Connection_String + "/test");

        await Check_DNS();

        loading_overlay = false;

        StateHasChanged();

        if (fileServerConnectionStatus && remoteServerConnectionStatus)
        {
            Snackbar.Add(Localizer["connected"] + ".", Severity.Success);
        }
        else
        {
            Snackbar.Add(Localizer["not connected"] + ".", Severity.Error);
        }
    }

    // Automatic cleanup
    private bool cleanup_applications_drivers_history_enabled = false;
    private int cleanup_applications_drivers_history_days = 0;

    private bool cleanup_applications_installed_history_enabled = false;
    private int cleanup_applications_installed_history_days = 0;

    private bool cleanup_applications_logon_history_enabled = false;
    private int cleanup_applications_logon_history_days = 0;

    private bool cleanup_applications_scheduled_tasks_history_enabled = false;
    private int cleanup_applications_scheduled_tasks_history_days = 0;

    private bool cleanup_applications_services_history_enabled = false;
    private int cleanup_applications_services_history_days = 0;

    private bool cleanup_device_information_antivirus_products_history_enabled = false;
    private int cleanup_device_information_antivirus_products_history_days = 0;

    private bool cleanup_device_information_cpu_history_enabled = false;
    private int cleanup_device_information_cpu_history_days = 0;

    private bool cleanup_device_information_cronjobs_history_enabled = false;
    private int cleanup_device_information_cronjobs_history_days = 0;

    private bool cleanup_device_information_disks_history_enabled = false;
    private int cleanup_device_information_disks_history_days = 0;

    private bool cleanup_device_information_general_history_enabled = false;
    private int cleanup_device_information_general_history_days = 0;

    private bool cleanup_device_information_history_enabled = false;
    private int cleanup_device_information_history_days = 0;

    private bool cleanup_device_information_network_adapters_history_enabled = false;
    private int cleanup_device_information_network_adapters_history_days = 0;

    private bool cleanup_device_information_ram_history_enabled = false;
    private int cleanup_device_information_ram_history_days = 0;

    private bool cleanup_device_information_task_manager_history_enabled = false;
    private int cleanup_device_information_task_manager_history_days = 0;

    private bool cleanup_events_history_enabled = false;
    private int cleanup_events_history_days = 0;

    // Get cleanup settings from database
    private async Task Get_Cleanup_Settings()
    {
        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            string query = "SELECT * FROM settings;";

            MySqlCommand cmd = new MySqlCommand(query, conn);

            Logging.Handler.Debug("Example", "MySQL_Prepared_Query", query);

            using (DbDataReader reader = await cmd.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        cleanup_applications_drivers_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_applications_drivers_history_enabled"));
                        cleanup_applications_drivers_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_applications_drivers_history_days"));

                        cleanup_applications_installed_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_applications_installed_history_enabled"));
                        cleanup_applications_installed_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_applications_installed_history_days"));

                        cleanup_applications_logon_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_applications_logon_history_enabled"));
                        cleanup_applications_logon_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_applications_logon_history_days"));

                        cleanup_applications_scheduled_tasks_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_applications_scheduled_tasks_history_enabled"));
                        cleanup_applications_scheduled_tasks_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_applications_scheduled_tasks_history_days"));

                        cleanup_applications_services_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_applications_services_history_enabled"));
                        cleanup_applications_services_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_applications_services_history_days"));

                        cleanup_device_information_antivirus_products_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_device_information_antivirus_products_history_enabled"));
                        cleanup_device_information_antivirus_products_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_device_information_antivirus_products_history_days"));

                        cleanup_device_information_cpu_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_device_information_cpu_history_enabled"));
                        cleanup_device_information_cpu_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_device_information_cpu_history_days"));

                        cleanup_device_information_cronjobs_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_device_information_cronjobs_history_enabled"));
                        cleanup_device_information_cronjobs_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_device_information_cronjobs_history_days"));

                        cleanup_device_information_disks_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_device_information_disks_history_enabled"));
                        cleanup_device_information_disks_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_device_information_disks_history_days"));

                        cleanup_device_information_general_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_device_information_general_history_enabled"));
                        cleanup_device_information_general_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_device_information_general_history_days"));

                        cleanup_device_information_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_device_information_history_enabled"));
                        cleanup_device_information_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_device_information_history_days"));

                        cleanup_device_information_network_adapters_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_device_information_network_adapters_history_enabled"));
                        cleanup_device_information_network_adapters_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_device_information_network_adapters_history_days"));

                        cleanup_device_information_ram_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_device_information_ram_history_enabled"));
                        cleanup_device_information_ram_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_device_information_ram_history_days"));

                        cleanup_device_information_task_manager_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_device_information_task_manager_history_enabled"));
                        cleanup_device_information_task_manager_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_device_information_task_manager_history_days"));

                        cleanup_events_history_enabled = reader.GetBoolean(reader.GetOrdinal("cleanup_events_history_enabled"));
                        cleanup_events_history_days = reader.GetInt32(reader.GetOrdinal("cleanup_events_history_days"));

                        remoteScreenSessionRecordingForced = reader.GetBoolean(reader.GetOrdinal("remote_screen_session_recording_forced_enabled"));
                        remoteScreenSessionRecordingAutoClean = reader.GetBoolean(reader.GetOrdinal("remote_screen_session_recording_auto_clean_enabled"));
                        remoteScreenSessionRecordingForcedDays = reader.GetInt32(reader.GetOrdinal("remote_screen_session_recording_forced_days"));
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Settings -> Get_Cleanup_Settings", "MySQL_Query", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }
    }

    // Save cleanup settings to database (settings)
    private async Task Save_Cleanup_Settings()
    {
        Snackbar.Configuration.ShowCloseIcon = true;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        // Save cleanup settings to database
        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        string query = @"UPDATE settings SET
cleanup_applications_drivers_history_enabled = @cleanup_applications_drivers_history_enabled,
cleanup_applications_drivers_history_days = @cleanup_applications_drivers_history_days,
cleanup_applications_installed_history_enabled = @cleanup_applications_installed_history_enabled,
cleanup_applications_installed_history_days = @cleanup_applications_installed_history_days,
cleanup_applications_logon_history_enabled = @cleanup_applications_logon_history_enabled,
cleanup_applications_logon_history_days = @cleanup_applications_logon_history_days,
cleanup_applications_scheduled_tasks_history_enabled = @cleanup_applications_scheduled_tasks_history_enabled,
cleanup_applications_scheduled_tasks_history_days = @cleanup_applications_scheduled_tasks_history_days,
cleanup_applications_services_history_enabled = @cleanup_applications_services_history_enabled,
cleanup_applications_services_history_days = @cleanup_applications_services_history_days,
cleanup_device_information_antivirus_products_history_enabled = @cleanup_device_information_antivirus_products_history_enabled,
cleanup_device_information_antivirus_products_history_days = @cleanup_device_information_antivirus_products_history_days,
cleanup_device_information_cpu_history_enabled = @cleanup_device_information_cpu_history_enabled,
cleanup_device_information_cpu_history_days = @cleanup_device_information_cpu_history_days,
cleanup_device_information_cronjobs_history_enabled = @cleanup_device_information_cronjobs_history_enabled,
cleanup_device_information_cronjobs_history_days = @cleanup_device_information_cronjobs_history_days,
cleanup_device_information_disks_history_enabled = @cleanup_device_information_disks_history_enabled,
cleanup_device_information_disks_history_days = @cleanup_device_information_disks_history_days,
cleanup_device_information_general_history_enabled = @cleanup_device_information_general_history_enabled,
cleanup_device_information_general_history_days = @cleanup_device_information_general_history_days,
cleanup_device_information_history_enabled = @cleanup_device_information_history_enabled,
cleanup_device_information_history_days = @cleanup_device_information_history_days,
cleanup_device_information_network_adapters_history_enabled = @cleanup_device_information_network_adapters_history_enabled,
cleanup_device_information_network_adapters_history_days = @cleanup_device_information_network_adapters_history_days,
cleanup_device_information_ram_history_enabled = @cleanup_device_information_ram_history_enabled,
cleanup_device_information_ram_history_days = @cleanup_device_information_ram_history_days,
cleanup_device_information_task_manager_history_enabled = @cleanup_device_information_task_manager_history_enabled,
cleanup_device_information_task_manager_history_days = @cleanup_device_information_task_manager_history_days,
cleanup_events_history_enabled = @cleanup_events_history_enabled,
cleanup_events_history_days = @cleanup_events_history_days;";

        try
        {
            await conn.OpenAsync();

            MySqlCommand cmd = new MySqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@cleanup_applications_drivers_history_enabled", Convert.ToInt32(cleanup_applications_drivers_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_applications_drivers_history_days", cleanup_applications_drivers_history_days);
            cmd.Parameters.AddWithValue("@cleanup_applications_installed_history_enabled", Convert.ToInt32(cleanup_applications_installed_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_applications_installed_history_days", cleanup_applications_installed_history_days);
            cmd.Parameters.AddWithValue("@cleanup_applications_logon_history_enabled", Convert.ToInt32(cleanup_applications_logon_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_applications_logon_history_days", cleanup_applications_logon_history_days);
            cmd.Parameters.AddWithValue("@cleanup_applications_scheduled_tasks_history_enabled", Convert.ToInt32(cleanup_applications_scheduled_tasks_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_applications_scheduled_tasks_history_days", cleanup_applications_scheduled_tasks_history_days);
            cmd.Parameters.AddWithValue("@cleanup_applications_services_history_enabled", Convert.ToInt32(cleanup_applications_services_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_applications_services_history_days", cleanup_applications_services_history_days);
            cmd.Parameters.AddWithValue("@cleanup_device_information_antivirus_products_history_enabled", Convert.ToInt32(cleanup_device_information_antivirus_products_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_device_information_antivirus_products_history_days", cleanup_device_information_antivirus_products_history_days);
            cmd.Parameters.AddWithValue("@cleanup_device_information_cpu_history_enabled", Convert.ToInt32(cleanup_device_information_cpu_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_device_information_cpu_history_days", cleanup_device_information_cpu_history_days);
            cmd.Parameters.AddWithValue("@cleanup_device_information_cronjobs_history_enabled", Convert.ToInt32(cleanup_device_information_cronjobs_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_device_information_cronjobs_history_days", cleanup_device_information_cronjobs_history_days);
            cmd.Parameters.AddWithValue("@cleanup_device_information_disks_history_enabled", Convert.ToInt32(cleanup_device_information_disks_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_device_information_disks_history_days", cleanup_device_information_disks_history_days);
            cmd.Parameters.AddWithValue("@cleanup_device_information_general_history_enabled", Convert.ToInt32(cleanup_device_information_general_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_device_information_general_history_days", cleanup_device_information_general_history_days);
            cmd.Parameters.AddWithValue("@cleanup_device_information_history_enabled", Convert.ToInt32(cleanup_device_information_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_device_information_history_days", cleanup_device_information_history_days);
            cmd.Parameters.AddWithValue("@cleanup_device_information_network_adapters_history_enabled", Convert.ToInt32(cleanup_device_information_network_adapters_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_device_information_network_adapters_history_days", cleanup_device_information_network_adapters_history_days);
            cmd.Parameters.AddWithValue("@cleanup_device_information_ram_history_enabled", Convert.ToInt32(cleanup_device_information_ram_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_device_information_ram_history_days", cleanup_device_information_ram_history_days);
            cmd.Parameters.AddWithValue("@cleanup_device_information_task_manager_history_enabled", Convert.ToInt32(cleanup_device_information_task_manager_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_device_information_task_manager_history_days", cleanup_device_information_task_manager_history_days);
            cmd.Parameters.AddWithValue("@cleanup_events_history_enabled", Convert.ToInt32(cleanup_events_history_enabled));
            cmd.Parameters.AddWithValue("@cleanup_events_history_days", cleanup_events_history_days);

            Logging.Handler.Debug("Settings -> Save_Cleanup_Setting", "MySQL_Prepared_Query", query);

            await cmd.ExecuteNonQueryAsync();

            Snackbar.Add("Cleanup settings saved!", Severity.Success);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Settings -> Save_Cleanup_Settings", "MySQL_Query", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }
    }

    private async Task Optimize_Database()
    {
        Snackbar.Configuration.ShowCloseIcon = true;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        loading_overlay = true;
        StateHasChanged();

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        string query = @"OPTIMIZE TABLE `accounts`;
OPTIMIZE TABLE agent_package_configurations;
OPTIMIZE TABLE antivirus_controlled_folder_access_rulesets;
OPTIMIZE TABLE applications_drivers_history;
OPTIMIZE TABLE applications_installed_history;
OPTIMIZE TABLE applications_logon_history;
OPTIMIZE TABLE applications_scheduled_tasks_history;
OPTIMIZE TABLE applications_services_history;
OPTIMIZE TABLE automations;
OPTIMIZE TABLE device_information_antivirus_products_history;
OPTIMIZE TABLE device_information_cpu_history;
OPTIMIZE TABLE device_information_cronjobs_history;
OPTIMIZE TABLE device_information_disks_history;
OPTIMIZE TABLE device_information_general_history;
OPTIMIZE TABLE device_information_history;
OPTIMIZE TABLE device_information_network_adapters_history;
OPTIMIZE TABLE device_information_notes_history;
OPTIMIZE TABLE device_information_ram_history;
OPTIMIZE TABLE device_information_remote_shell_history;
OPTIMIZE TABLE device_information_task_manager_history;
OPTIMIZE TABLE devices;
OPTIMIZE TABLE `events`;
OPTIMIZE TABLE files;
OPTIMIZE TABLE `groups`;
OPTIMIZE TABLE infrastructure_events;
OPTIMIZE TABLE jobs;
OPTIMIZE TABLE locations;
OPTIMIZE TABLE mail_notifications;
OPTIMIZE TABLE microsoft_teams_notifications;
OPTIMIZE TABLE ntfy_sh_notifications;
OPTIMIZE TABLE performance_monitoring_ressources;
OPTIMIZE TABLE policies;
OPTIMIZE TABLE scripts;
OPTIMIZE TABLE sensors;
OPTIMIZE TABLE servers;
OPTIMIZE TABLE `settings`;
OPTIMIZE TABLE support_history;
OPTIMIZE TABLE telegram_notifications;
OPTIMIZE TABLE tenants;";

        try
        {
            await conn.OpenAsync();

            MySqlCommand cmd = new MySqlCommand(query, conn);

            Logging.Handler.Debug("Settings -> Optimize_Database", "MySQL_Prepared_Query", query);

            await cmd.ExecuteNonQueryAsync();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Settings -> Optimize_Database", "MySQL_Query", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }

        loading_overlay = false;
        StateHasChanged();

        Snackbar.Add("Database optimized!", Severity.Success);
    }

    private async Task Fix_Settings()
    {
        try
        {
            // smtp
            string smtp = String.Empty; 
            smtp = await Classes.MySQL.Handler.Quick_Reader("SELECT * FROM settings;", "smtp");

            // files api key
            string files_api_key = String.Empty;
            files_api_key = await Classes.MySQL.Handler.Quick_Reader("SELECT * FROM settings;", "files_api_key");

            if (String.IsNullOrEmpty(files_api_key))
            {
                // Generate random files api key if empty
                if (String.IsNullOrEmpty(files_api_key))
                    files_api_key = Guid.NewGuid().ToString() + "-" + Guid.NewGuid().ToString();

                // Delete old settings
                await Classes.MySQL.Handler.Execute_Command("DELETE FROM settings;");

                // Add new settings
                await Classes.MySQL.Handler.Execute_Command("INSERT INTO settings (db_version, files_api_key, smtp) VALUES ('" + Application_Settings.db_version + "', '" + files_api_key + "', '" + smtp + "');");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Settings -> Fix_Settings", "MySQL_Query", ex.ToString());
        }   
    }

    // Remote Screen Control

    private async Task SaveRemoteScreenSessionRecordingSettings()
    {
        Snackbar.Configuration.ShowCloseIcon = true;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        int remoteScreenSessionRecordingForcedDaysValue = remoteScreenSessionRecordingForcedDays;


        // Save cleanup settings to database
        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        string query = @"UPDATE settings SET remote_screen_session_recording_forced_enabled = @remote_screen_session_recording_forced_enabled, remote_screen_session_recording_auto_clean_enabled = @remote_screen_session_recording_auto_clean_enabled, remote_screen_session_recording_forced_days = @remote_screen_session_recording_forced_days;";

        try
        {
            await conn.OpenAsync();

            MySqlCommand cmd = new MySqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@remote_screen_session_recording_forced_enabled", Convert.ToInt32(remoteScreenSessionRecordingForced));
            cmd.Parameters.AddWithValue("@remote_screen_session_recording_auto_clean_enabled", Convert.ToInt32(remoteScreenSessionRecordingAutoClean));
            cmd.Parameters.AddWithValue("@remote_screen_session_recording_forced_days", remoteScreenSessionRecordingForcedDays);

            Logging.Handler.Debug("Settings -> SaveRemoteScreenSessionRecordingSettings", "MySQL_Prepared_Query", query);

            await cmd.ExecuteNonQueryAsync();

            Snackbar.Add("Remote screen control cleanup settings saved!", Severity.Success);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Settings -> SaveRemoteScreenSessionRecordingSettings", "MySQL_Query", ex.ToString());
        }
        finally
        {
            await conn.CloseAsync();
        }
    }
}