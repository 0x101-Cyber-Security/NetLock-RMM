@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider
@inject IStringLocalizer<Pages.Settings.Notifications.Ntfy_sh.Edit_Ntfy_sh_Notification_Dialog> Localizer

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@Localizer["title"]</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Label="@Localizer["topic_name"]" T="string" @bind-Value="@topic_name" Immediate="@true" />
        <MudTextField Label="@Localizer["topic_url"]" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Show_Password" AdornmentAriaLabel="@Localizer["display_password"]" @bind-Value="@topic_url" Immediate="@true" />
        <MudTextField Label="@Localizer["access_token"]" InputType="@PasswordInput" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Show_Password" AdornmentAriaLabel="@Localizer["display_password"]" @bind-Value="@access_token" Adornment="Adornment.End" Immediate="@true" />
        <MudTextField Label="@Localizer["description"]" T="string" @bind-Value="@description" Immediate="@true" />

        <MudSelect T="string" @bind-Value="severity" Label="@Localizer["severity"]" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem T="string" Value="@Localizer["any"]" />
            <MudSelectItem T="string" Value="@Localizer["critical"]" />
            <MudSelectItem T="string" Value="@Localizer["high"]" />
            <MudSelectItem T="string" Value="@Localizer["moderate"]" />
            <MudSelectItem T="string" Value="@Localizer["low"]" />
        </MudSelect>

        <MudDropContainer T="DropItem" Items="tenants" ItemsSelector="@((item,dropzone) => item.identifier  == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
            <ChildContent>
                <MudDropZone T="DropItem" identifier="drop_zone_one" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                    <MudText Typo="Typo.h6" Class="mb-4">@Localizer["tenants"]</MudText>
                </MudDropZone>
                <MudDropZone T="DropItem" identifier="drop_zone_two" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                    <MudText Typo="Typo.h6" Class="mb-4">@Localizer["selected_tenants"]</MudText>
                </MudDropZone>
            </ChildContent>
            <ItemRenderer>
                <MudPaper Elevation="25" Class="pa-4 my-4">@context.id</MudPaper>
            </ItemRenderer>
        </MudDropContainer>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer["cancel"]</MudButton>

        <MudButton Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success" OnClick="@OK" Disabled="@(String.IsNullOrEmpty(topic_name) || String.IsNullOrEmpty(topic_url))">@Localizer["confirm"]</MudButton>
    </DialogActions>
</MudDialog>

    @code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string id { get; set; }
    [Parameter] public string topic_name { get; set; }
    [Parameter] public string topic_url { get; set; }
    [Parameter] public string access_token { get; set; }
    [Parameter] public string description { get; set; }
    [Parameter] public string severity { get; set; }
    [Parameter] public string tenants_json { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Get_Tenants();

        // convert severity
        if (severity == "0")
            severity = Localizer["low"];
        else if (severity == "1")
            severity = Localizer["moderate"];
        else if (severity == "2")
            severity = Localizer["high"];
        else if (severity == "3")
            severity = Localizer["critical"];
        else if (severity == "4")
            severity = Localizer["any"];
    }

    private List<DropItem> tenants = new();

    public class DropItem
    {
        public string id { get; set; }
        public string identifier { get; set; }
    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.identifier = dropItem.DropzoneIdentifier;
    }

    bool password_visible;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void Show_Password()
    {
        @if (password_visible)
        {
            password_visible = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            password_visible = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task Get_Tenants()
    {
        var tenants_list = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(tenants_json);

        foreach (var tenant in tenants_list)
        {
            tenant["id"] = await Classes.MySQL.Database.Get_Tenant_Name_By_Id(Convert.ToInt32(tenant["id"]));

            tenants.Add(new DropItem
            {
                id = tenant["id"],
                identifier = tenant["identifier"]
            });
        }

        MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM tenants;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        string tenant_name_decoded = reader["name"].ToString() ?? String.Empty;

                        bool exists = tenants.Any(item => item.id == tenant_name_decoded);

                        if (exists == false)
                            tenants.Add(new DropItem { id = reader["name"].ToString() ?? String.Empty, identifier = "drop_zone_one" });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Edit_Ntfy_sh_Notification_Dialog", "Get_Tenants_Sort_Tenants", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        //Get all tenants from drop zone two
        var filtered_tenants = tenants.Where(item => item.identifier == "drop_zone_two").ToList();

        // foreach filtered tenant, get tenant_id
        foreach (var tenant in filtered_tenants)
        {
            int tenant_id = await Classes.MySQL.Database.Get_Tenant_Id(tenant.id);

            // replace name with id
            tenant.id = tenant_id.ToString();
        }

        tenants_json = JsonSerializer.Serialize(filtered_tenants);

        Logging.Handler.Debug("Edit_Ntfy_sh_Notification_Dialog", "tenants_json", tenants_json);

        if (tenants_json.Count() != 0)
        {
            MySqlConnection conn = new MySqlConnection(Configuration.MySQL.Connection_String);

            try
            {
                var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
                var username = await sessionStorage.GetAsync<string>("username");

                // convert severity
                string sevirity_converted = String.Empty;

                if (severity == Localizer["low"])
                    sevirity_converted = "0";
                else if (severity == Localizer["moderate"])
                    sevirity_converted = "1";
                else if (severity == Localizer["high"])
                    sevirity_converted = "2";
                else if (severity == Localizer["critical"])
                    sevirity_converted = "3";
                else if (severity == Localizer["any"])
                    sevirity_converted = "4";

                await conn.OpenAsync();

                string execute_query = "UPDATE ntfy_sh_notifications SET topic_name = @topic_name, topic_url = @topic_url, access_token = @access_token, author = @author, description = @description, severity = @severity, tenants = @tenants WHERE id = @id;";

                MySqlCommand cmd = new MySqlCommand(execute_query, conn);
                cmd.Parameters.AddWithValue("@id", id);
                cmd.Parameters.AddWithValue("@topic_name", topic_name);
                cmd.Parameters.AddWithValue("@topic_url", topic_url);
                cmd.Parameters.AddWithValue("@access_token", access_token);
                cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                cmd.Parameters.AddWithValue("@author", username.Value);
                cmd.Parameters.AddWithValue("@description", description);
                cmd.Parameters.AddWithValue("@severity", sevirity_converted);
                cmd.Parameters.AddWithValue("@tenants", tenants_json);

                cmd.ExecuteNonQuery();

                success = true;
            }
            catch (Exception ex)
            {
                Logging.Handler.Error("Edit_Ntfy_sh_Notification_Dialog", "General error", ex.ToString());
            }
            finally
            {
                await conn.CloseAsync();
            }

            if (success)
            {
                MudDialog.Close(DialogResult.Ok("success"));
            }
            else
            {
                Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            }
        }
        else
        {
            Snackbar.Add(Localizer["no_tenants_selected"], Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}